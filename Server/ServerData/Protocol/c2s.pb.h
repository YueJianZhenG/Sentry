// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c2s.proto

#ifndef PROTOBUF_INCLUDED_c2s_2eproto
#define PROTOBUF_INCLUDED_c2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_c2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_c2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_c2s_2eproto();
namespace c2s {
class UserRegister;
class UserRegisterDefaultTypeInternal;
extern UserRegisterDefaultTypeInternal _UserRegister_default_instance_;
class UserRegister_Request;
class UserRegister_RequestDefaultTypeInternal;
extern UserRegister_RequestDefaultTypeInternal _UserRegister_Request_default_instance_;
class UserRegister_Response;
class UserRegister_ResponseDefaultTypeInternal;
extern UserRegister_ResponseDefaultTypeInternal _UserRegister_Response_default_instance_;
class UserVerify;
class UserVerifyDefaultTypeInternal;
extern UserVerifyDefaultTypeInternal _UserVerify_default_instance_;
class UserVerify_Request;
class UserVerify_RequestDefaultTypeInternal;
extern UserVerify_RequestDefaultTypeInternal _UserVerify_Request_default_instance_;
class UserVerify_Response;
class UserVerify_ResponseDefaultTypeInternal;
extern UserVerify_ResponseDefaultTypeInternal _UserVerify_Response_default_instance_;
}  // namespace c2s
namespace google {
namespace protobuf {
template<> ::c2s::UserRegister* Arena::CreateMaybeMessage<::c2s::UserRegister>(Arena*);
template<> ::c2s::UserRegister_Request* Arena::CreateMaybeMessage<::c2s::UserRegister_Request>(Arena*);
template<> ::c2s::UserRegister_Response* Arena::CreateMaybeMessage<::c2s::UserRegister_Response>(Arena*);
template<> ::c2s::UserVerify* Arena::CreateMaybeMessage<::c2s::UserVerify>(Arena*);
template<> ::c2s::UserVerify_Request* Arena::CreateMaybeMessage<::c2s::UserVerify_Request>(Arena*);
template<> ::c2s::UserVerify_Response* Arena::CreateMaybeMessage<::c2s::UserVerify_Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace c2s {

// ===================================================================

class UserRegister_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2s.UserRegister.Request) */ {
 public:
  UserRegister_Request();
  virtual ~UserRegister_Request();

  UserRegister_Request(const UserRegister_Request& from);

  inline UserRegister_Request& operator=(const UserRegister_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegister_Request(UserRegister_Request&& from) noexcept
    : UserRegister_Request() {
    *this = ::std::move(from);
  }

  inline UserRegister_Request& operator=(UserRegister_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserRegister_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegister_Request* internal_default_instance() {
    return reinterpret_cast<const UserRegister_Request*>(
               &_UserRegister_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserRegister_Request* other);
  friend void swap(UserRegister_Request& a, UserRegister_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegister_Request* New() const final {
    return CreateMaybeMessage<UserRegister_Request>(nullptr);
  }

  UserRegister_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegister_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegister_Request& from);
  void MergeFrom(const UserRegister_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegister_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string PassWord = 2;
  void clear_password();
  static const int kPassWordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string Platform = 4;
  void clear_platform();
  static const int kPlatformFieldNumber = 4;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // string DeviceMac = 5;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 5;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const char* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // int64 PhoneNum = 3;
  void clear_phonenum();
  static const int kPhoneNumFieldNumber = 3;
  ::google::protobuf::int64 phonenum() const;
  void set_phonenum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:c2s.UserRegister.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::int64 phonenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class UserRegister_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2s.UserRegister.Response) */ {
 public:
  UserRegister_Response();
  virtual ~UserRegister_Response();

  UserRegister_Response(const UserRegister_Response& from);

  inline UserRegister_Response& operator=(const UserRegister_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegister_Response(UserRegister_Response&& from) noexcept
    : UserRegister_Response() {
    *this = ::std::move(from);
  }

  inline UserRegister_Response& operator=(UserRegister_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserRegister_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegister_Response* internal_default_instance() {
    return reinterpret_cast<const UserRegister_Response*>(
               &_UserRegister_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserRegister_Response* other);
  friend void swap(UserRegister_Response& a, UserRegister_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegister_Response* New() const final {
    return CreateMaybeMessage<UserRegister_Response>(nullptr);
  }

  UserRegister_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegister_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegister_Response& from);
  void MergeFrom(const UserRegister_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegister_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 UserId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:c2s.UserRegister.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class UserRegister :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2s.UserRegister) */ {
 public:
  UserRegister();
  virtual ~UserRegister();

  UserRegister(const UserRegister& from);

  inline UserRegister& operator=(const UserRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegister(UserRegister&& from) noexcept
    : UserRegister() {
    *this = ::std::move(from);
  }

  inline UserRegister& operator=(UserRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegister* internal_default_instance() {
    return reinterpret_cast<const UserRegister*>(
               &_UserRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserRegister* other);
  friend void swap(UserRegister& a, UserRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegister* New() const final {
    return CreateMaybeMessage<UserRegister>(nullptr);
  }

  UserRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegister& from);
  void MergeFrom(const UserRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserRegister_Request Request;
  typedef UserRegister_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c2s.UserRegister)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class UserVerify_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2s.UserVerify.Request) */ {
 public:
  UserVerify_Request();
  virtual ~UserVerify_Request();

  UserVerify_Request(const UserVerify_Request& from);

  inline UserVerify_Request& operator=(const UserVerify_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserVerify_Request(UserVerify_Request&& from) noexcept
    : UserVerify_Request() {
    *this = ::std::move(from);
  }

  inline UserVerify_Request& operator=(UserVerify_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserVerify_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserVerify_Request* internal_default_instance() {
    return reinterpret_cast<const UserVerify_Request*>(
               &_UserVerify_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserVerify_Request* other);
  friend void swap(UserVerify_Request& a, UserVerify_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserVerify_Request* New() const final {
    return CreateMaybeMessage<UserVerify_Request>(nullptr);
  }

  UserVerify_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserVerify_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserVerify_Request& from);
  void MergeFrom(const UserVerify_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserVerify_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string PassWord = 2;
  void clear_password();
  static const int kPassWordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string Token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:c2s.UserVerify.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class UserVerify_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2s.UserVerify.Response) */ {
 public:
  UserVerify_Response();
  virtual ~UserVerify_Response();

  UserVerify_Response(const UserVerify_Response& from);

  inline UserVerify_Response& operator=(const UserVerify_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserVerify_Response(UserVerify_Response&& from) noexcept
    : UserVerify_Response() {
    *this = ::std::move(from);
  }

  inline UserVerify_Response& operator=(UserVerify_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserVerify_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserVerify_Response* internal_default_instance() {
    return reinterpret_cast<const UserVerify_Response*>(
               &_UserVerify_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UserVerify_Response* other);
  friend void swap(UserVerify_Response& a, UserVerify_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserVerify_Response* New() const final {
    return CreateMaybeMessage<UserVerify_Response>(nullptr);
  }

  UserVerify_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserVerify_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserVerify_Response& from);
  void MergeFrom(const UserVerify_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserVerify_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string GateAddress = 3;
  void clear_gateaddress();
  static const int kGateAddressFieldNumber = 3;
  const ::std::string& gateaddress() const;
  void set_gateaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_gateaddress(::std::string&& value);
  #endif
  void set_gateaddress(const char* value);
  void set_gateaddress(const char* value, size_t size);
  ::std::string* mutable_gateaddress();
  ::std::string* release_gateaddress();
  void set_allocated_gateaddress(::std::string* gateaddress);

  // int64 UserId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:c2s.UserVerify.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr gateaddress_;
  ::google::protobuf::int64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class UserVerify :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2s.UserVerify) */ {
 public:
  UserVerify();
  virtual ~UserVerify();

  UserVerify(const UserVerify& from);

  inline UserVerify& operator=(const UserVerify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserVerify(UserVerify&& from) noexcept
    : UserVerify() {
    *this = ::std::move(from);
  }

  inline UserVerify& operator=(UserVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserVerify* internal_default_instance() {
    return reinterpret_cast<const UserVerify*>(
               &_UserVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UserVerify* other);
  friend void swap(UserVerify& a, UserVerify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserVerify* New() const final {
    return CreateMaybeMessage<UserVerify>(nullptr);
  }

  UserVerify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserVerify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserVerify& from);
  void MergeFrom(const UserVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserVerify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserVerify_Request Request;
  typedef UserVerify_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c2s.UserVerify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegister_Request

// string Account = 1;
inline void UserRegister_Request::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegister_Request::account() const {
  // @@protoc_insertion_point(field_get:c2s.UserRegister.Request.Account)
  return account_.GetNoArena();
}
inline void UserRegister_Request::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserRegister.Request.Account)
}
#if LANG_CXX11
inline void UserRegister_Request::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserRegister.Request.Account)
}
#endif
inline void UserRegister_Request::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserRegister.Request.Account)
}
inline void UserRegister_Request::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserRegister.Request.Account)
}
inline ::std::string* UserRegister_Request::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserRegister.Request.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegister_Request::release_account() {
  // @@protoc_insertion_point(field_release:c2s.UserRegister.Request.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister_Request::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserRegister.Request.Account)
}

// string PassWord = 2;
inline void UserRegister_Request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegister_Request::password() const {
  // @@protoc_insertion_point(field_get:c2s.UserRegister.Request.PassWord)
  return password_.GetNoArena();
}
inline void UserRegister_Request::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserRegister.Request.PassWord)
}
#if LANG_CXX11
inline void UserRegister_Request::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserRegister.Request.PassWord)
}
#endif
inline void UserRegister_Request::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserRegister.Request.PassWord)
}
inline void UserRegister_Request::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserRegister.Request.PassWord)
}
inline ::std::string* UserRegister_Request::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserRegister.Request.PassWord)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegister_Request::release_password() {
  // @@protoc_insertion_point(field_release:c2s.UserRegister.Request.PassWord)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister_Request::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserRegister.Request.PassWord)
}

// int64 PhoneNum = 3;
inline void UserRegister_Request::clear_phonenum() {
  phonenum_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserRegister_Request::phonenum() const {
  // @@protoc_insertion_point(field_get:c2s.UserRegister.Request.PhoneNum)
  return phonenum_;
}
inline void UserRegister_Request::set_phonenum(::google::protobuf::int64 value) {
  
  phonenum_ = value;
  // @@protoc_insertion_point(field_set:c2s.UserRegister.Request.PhoneNum)
}

// string Platform = 4;
inline void UserRegister_Request::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegister_Request::platform() const {
  // @@protoc_insertion_point(field_get:c2s.UserRegister.Request.Platform)
  return platform_.GetNoArena();
}
inline void UserRegister_Request::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserRegister.Request.Platform)
}
#if LANG_CXX11
inline void UserRegister_Request::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserRegister.Request.Platform)
}
#endif
inline void UserRegister_Request::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserRegister.Request.Platform)
}
inline void UserRegister_Request::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserRegister.Request.Platform)
}
inline ::std::string* UserRegister_Request::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserRegister.Request.Platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegister_Request::release_platform() {
  // @@protoc_insertion_point(field_release:c2s.UserRegister.Request.Platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister_Request::set_allocated_platform(::std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserRegister.Request.Platform)
}

// string DeviceMac = 5;
inline void UserRegister_Request::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegister_Request::devicemac() const {
  // @@protoc_insertion_point(field_get:c2s.UserRegister.Request.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void UserRegister_Request::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserRegister.Request.DeviceMac)
}
#if LANG_CXX11
inline void UserRegister_Request::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserRegister.Request.DeviceMac)
}
#endif
inline void UserRegister_Request::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserRegister.Request.DeviceMac)
}
inline void UserRegister_Request::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserRegister.Request.DeviceMac)
}
inline ::std::string* UserRegister_Request::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserRegister.Request.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegister_Request::release_devicemac() {
  // @@protoc_insertion_point(field_release:c2s.UserRegister.Request.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister_Request::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != nullptr) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserRegister.Request.DeviceMac)
}

// -------------------------------------------------------------------

// UserRegister_Response

// int64 UserId = 1;
inline void UserRegister_Response::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserRegister_Response::userid() const {
  // @@protoc_insertion_point(field_get:c2s.UserRegister.Response.UserId)
  return userid_;
}
inline void UserRegister_Response::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:c2s.UserRegister.Response.UserId)
}

// -------------------------------------------------------------------

// UserRegister

// -------------------------------------------------------------------

// UserVerify_Request

// string Account = 1;
inline void UserVerify_Request::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserVerify_Request::account() const {
  // @@protoc_insertion_point(field_get:c2s.UserVerify.Request.Account)
  return account_.GetNoArena();
}
inline void UserVerify_Request::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserVerify.Request.Account)
}
#if LANG_CXX11
inline void UserVerify_Request::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserVerify.Request.Account)
}
#endif
inline void UserVerify_Request::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserVerify.Request.Account)
}
inline void UserVerify_Request::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserVerify.Request.Account)
}
inline ::std::string* UserVerify_Request::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserVerify.Request.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVerify_Request::release_account() {
  // @@protoc_insertion_point(field_release:c2s.UserVerify.Request.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVerify_Request::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserVerify.Request.Account)
}

// string PassWord = 2;
inline void UserVerify_Request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserVerify_Request::password() const {
  // @@protoc_insertion_point(field_get:c2s.UserVerify.Request.PassWord)
  return password_.GetNoArena();
}
inline void UserVerify_Request::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserVerify.Request.PassWord)
}
#if LANG_CXX11
inline void UserVerify_Request::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserVerify.Request.PassWord)
}
#endif
inline void UserVerify_Request::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserVerify.Request.PassWord)
}
inline void UserVerify_Request::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserVerify.Request.PassWord)
}
inline ::std::string* UserVerify_Request::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserVerify.Request.PassWord)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVerify_Request::release_password() {
  // @@protoc_insertion_point(field_release:c2s.UserVerify.Request.PassWord)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVerify_Request::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserVerify.Request.PassWord)
}

// string Token = 3;
inline void UserVerify_Request::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserVerify_Request::token() const {
  // @@protoc_insertion_point(field_get:c2s.UserVerify.Request.Token)
  return token_.GetNoArena();
}
inline void UserVerify_Request::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserVerify.Request.Token)
}
#if LANG_CXX11
inline void UserVerify_Request::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserVerify.Request.Token)
}
#endif
inline void UserVerify_Request::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserVerify.Request.Token)
}
inline void UserVerify_Request::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserVerify.Request.Token)
}
inline ::std::string* UserVerify_Request::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserVerify.Request.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVerify_Request::release_token() {
  // @@protoc_insertion_point(field_release:c2s.UserVerify.Request.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVerify_Request::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserVerify.Request.Token)
}

// -------------------------------------------------------------------

// UserVerify_Response

// int64 UserId = 1;
inline void UserVerify_Response::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserVerify_Response::userid() const {
  // @@protoc_insertion_point(field_get:c2s.UserVerify.Response.UserId)
  return userid_;
}
inline void UserVerify_Response::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:c2s.UserVerify.Response.UserId)
}

// string Token = 2;
inline void UserVerify_Response::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserVerify_Response::token() const {
  // @@protoc_insertion_point(field_get:c2s.UserVerify.Response.Token)
  return token_.GetNoArena();
}
inline void UserVerify_Response::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserVerify.Response.Token)
}
#if LANG_CXX11
inline void UserVerify_Response::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserVerify.Response.Token)
}
#endif
inline void UserVerify_Response::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserVerify.Response.Token)
}
inline void UserVerify_Response::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserVerify.Response.Token)
}
inline ::std::string* UserVerify_Response::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserVerify.Response.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVerify_Response::release_token() {
  // @@protoc_insertion_point(field_release:c2s.UserVerify.Response.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVerify_Response::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserVerify.Response.Token)
}

// string GateAddress = 3;
inline void UserVerify_Response::clear_gateaddress() {
  gateaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserVerify_Response::gateaddress() const {
  // @@protoc_insertion_point(field_get:c2s.UserVerify.Response.GateAddress)
  return gateaddress_.GetNoArena();
}
inline void UserVerify_Response::set_gateaddress(const ::std::string& value) {
  
  gateaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2s.UserVerify.Response.GateAddress)
}
#if LANG_CXX11
inline void UserVerify_Response::set_gateaddress(::std::string&& value) {
  
  gateaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2s.UserVerify.Response.GateAddress)
}
#endif
inline void UserVerify_Response::set_gateaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2s.UserVerify.Response.GateAddress)
}
inline void UserVerify_Response::set_gateaddress(const char* value, size_t size) {
  
  gateaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2s.UserVerify.Response.GateAddress)
}
inline ::std::string* UserVerify_Response::mutable_gateaddress() {
  
  // @@protoc_insertion_point(field_mutable:c2s.UserVerify.Response.GateAddress)
  return gateaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVerify_Response::release_gateaddress() {
  // @@protoc_insertion_point(field_release:c2s.UserVerify.Response.GateAddress)
  
  return gateaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVerify_Response::set_allocated_gateaddress(::std::string* gateaddress) {
  if (gateaddress != nullptr) {
    
  } else {
    
  }
  gateaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateaddress);
  // @@protoc_insertion_point(field_set_allocated:c2s.UserVerify.Response.GateAddress)
}

// -------------------------------------------------------------------

// UserVerify

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace c2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_c2s_2eproto
