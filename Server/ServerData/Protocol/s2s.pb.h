// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#ifndef PROTOBUF_INCLUDED_s2s_2eproto
#define PROTOBUF_INCLUDED_s2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2eproto();
namespace s2s {
class NodeData;
class NodeDataDefaultTypeInternal;
extern NodeDataDefaultTypeInternal _NodeData_default_instance_;
class NodeData_Array;
class NodeData_ArrayDefaultTypeInternal;
extern NodeData_ArrayDefaultTypeInternal _NodeData_Array_default_instance_;
class NodeData_NodeInfo;
class NodeData_NodeInfoDefaultTypeInternal;
extern NodeData_NodeInfoDefaultTypeInternal _NodeData_NodeInfo_default_instance_;
class NodeRegister;
class NodeRegisterDefaultTypeInternal;
extern NodeRegisterDefaultTypeInternal _NodeRegister_default_instance_;
class NodeRegister_Request;
class NodeRegister_RequestDefaultTypeInternal;
extern NodeRegister_RequestDefaultTypeInternal _NodeRegister_Request_default_instance_;
}  // namespace s2s
namespace google {
namespace protobuf {
template<> ::s2s::NodeData* Arena::CreateMaybeMessage<::s2s::NodeData>(Arena*);
template<> ::s2s::NodeData_Array* Arena::CreateMaybeMessage<::s2s::NodeData_Array>(Arena*);
template<> ::s2s::NodeData_NodeInfo* Arena::CreateMaybeMessage<::s2s::NodeData_NodeInfo>(Arena*);
template<> ::s2s::NodeRegister* Arena::CreateMaybeMessage<::s2s::NodeRegister>(Arena*);
template<> ::s2s::NodeRegister_Request* Arena::CreateMaybeMessage<::s2s::NodeRegister_Request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace s2s {

// ===================================================================

class NodeRegister_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister.Request) */ {
 public:
  NodeRegister_Request();
  virtual ~NodeRegister_Request();

  NodeRegister_Request(const NodeRegister_Request& from);

  inline NodeRegister_Request& operator=(const NodeRegister_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister_Request(NodeRegister_Request&& from) noexcept
    : NodeRegister_Request() {
    *this = ::std::move(from);
  }

  inline NodeRegister_Request& operator=(NodeRegister_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister_Request* internal_default_instance() {
    return reinterpret_cast<const NodeRegister_Request*>(
               &_NodeRegister_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NodeRegister_Request* other);
  friend void swap(NodeRegister_Request& a, NodeRegister_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister_Request* New() const final {
    return CreateMaybeMessage<NodeRegister_Request>(nullptr);
  }

  NodeRegister_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister_Request& from);
  void MergeFrom(const NodeRegister_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Services = 5;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 5;
  const ::std::string& services(int index) const;
  ::std::string* mutable_services(int index);
  void set_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_services(int index, ::std::string&& value);
  #endif
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  ::std::string* add_services();
  void add_services(const ::std::string& value);
  #if LANG_CXX11
  void add_services(::std::string&& value);
  #endif
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_services();

  // string Address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string ServerName = 4;
  void clear_servername();
  static const int kServerNameFieldNumber = 4;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // int32 AreaId = 1;
  void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // int32 NodeId = 2;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 nodeid() const;
  void set_nodeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> services_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 nodeid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeRegister :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister) */ {
 public:
  NodeRegister();
  virtual ~NodeRegister();

  NodeRegister(const NodeRegister& from);

  inline NodeRegister& operator=(const NodeRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister(NodeRegister&& from) noexcept
    : NodeRegister() {
    *this = ::std::move(from);
  }

  inline NodeRegister& operator=(NodeRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister* internal_default_instance() {
    return reinterpret_cast<const NodeRegister*>(
               &_NodeRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeRegister* other);
  friend void swap(NodeRegister& a, NodeRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister* New() const final {
    return CreateMaybeMessage<NodeRegister>(nullptr);
  }

  NodeRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister& from);
  void MergeFrom(const NodeRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeRegister_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeData_NodeInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeData.NodeInfo) */ {
 public:
  NodeData_NodeInfo();
  virtual ~NodeData_NodeInfo();

  NodeData_NodeInfo(const NodeData_NodeInfo& from);

  inline NodeData_NodeInfo& operator=(const NodeData_NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeData_NodeInfo(NodeData_NodeInfo&& from) noexcept
    : NodeData_NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeData_NodeInfo& operator=(NodeData_NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeData_NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeData_NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeData_NodeInfo*>(
               &_NodeData_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeData_NodeInfo* other);
  friend void swap(NodeData_NodeInfo& a, NodeData_NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeData_NodeInfo* New() const final {
    return CreateMaybeMessage<NodeData_NodeInfo>(nullptr);
  }

  NodeData_NodeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeData_NodeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeData_NodeInfo& from);
  void MergeFrom(const NodeData_NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData_NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Services = 5;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 5;
  const ::std::string& services(int index) const;
  ::std::string* mutable_services(int index);
  void set_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_services(int index, ::std::string&& value);
  #endif
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  ::std::string* add_services();
  void add_services(const ::std::string& value);
  #if LANG_CXX11
  void add_services(::std::string&& value);
  #endif
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_services();

  // string Address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string ServerName = 4;
  void clear_servername();
  static const int kServerNameFieldNumber = 4;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // int32 AreaId = 1;
  void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // int32 NodeId = 2;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 nodeid() const;
  void set_nodeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeData.NodeInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> services_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 nodeid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeData_Array :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeData.Array) */ {
 public:
  NodeData_Array();
  virtual ~NodeData_Array();

  NodeData_Array(const NodeData_Array& from);

  inline NodeData_Array& operator=(const NodeData_Array& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeData_Array(NodeData_Array&& from) noexcept
    : NodeData_Array() {
    *this = ::std::move(from);
  }

  inline NodeData_Array& operator=(NodeData_Array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeData_Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeData_Array* internal_default_instance() {
    return reinterpret_cast<const NodeData_Array*>(
               &_NodeData_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NodeData_Array* other);
  friend void swap(NodeData_Array& a, NodeData_Array& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeData_Array* New() const final {
    return CreateMaybeMessage<NodeData_Array>(nullptr);
  }

  NodeData_Array* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeData_Array>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeData_Array& from);
  void MergeFrom(const NodeData_Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData_Array* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .s2s.NodeData.NodeInfo NodeArray = 1;
  int nodearray_size() const;
  void clear_nodearray();
  static const int kNodeArrayFieldNumber = 1;
  ::s2s::NodeData_NodeInfo* mutable_nodearray(int index);
  ::google::protobuf::RepeatedPtrField< ::s2s::NodeData_NodeInfo >*
      mutable_nodearray();
  const ::s2s::NodeData_NodeInfo& nodearray(int index) const;
  ::s2s::NodeData_NodeInfo* add_nodearray();
  const ::google::protobuf::RepeatedPtrField< ::s2s::NodeData_NodeInfo >&
      nodearray() const;

  // @@protoc_insertion_point(class_scope:s2s.NodeData.Array)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::s2s::NodeData_NodeInfo > nodearray_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeData) */ {
 public:
  NodeData();
  virtual ~NodeData();

  NodeData(const NodeData& from);

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeData(NodeData&& from) noexcept
    : NodeData() {
    *this = ::std::move(from);
  }

  inline NodeData& operator=(NodeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeData* internal_default_instance() {
    return reinterpret_cast<const NodeData*>(
               &_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NodeData* other);
  friend void swap(NodeData& a, NodeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeData* New() const final {
    return CreateMaybeMessage<NodeData>(nullptr);
  }

  NodeData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeData& from);
  void MergeFrom(const NodeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeData_NodeInfo NodeInfo;
  typedef NodeData_Array Array;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.NodeData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeRegister_Request

// int32 AreaId = 1;
inline void NodeRegister_Request::clear_areaid() {
  areaid_ = 0;
}
inline ::google::protobuf::int32 NodeRegister_Request::areaid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.AreaId)
  return areaid_;
}
inline void NodeRegister_Request::set_areaid(::google::protobuf::int32 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.AreaId)
}

// int32 NodeId = 2;
inline void NodeRegister_Request::clear_nodeid() {
  nodeid_ = 0;
}
inline ::google::protobuf::int32 NodeRegister_Request::nodeid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.NodeId)
  return nodeid_;
}
inline void NodeRegister_Request::set_nodeid(::google::protobuf::int32 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.NodeId)
}

// string Address = 3;
inline void NodeRegister_Request::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeRegister_Request::address() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.Address)
  return address_.GetNoArena();
}
inline void NodeRegister_Request::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.Address)
}
#if LANG_CXX11
inline void NodeRegister_Request::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeRegister.Request.Address)
}
#endif
inline void NodeRegister_Request::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeRegister.Request.Address)
}
inline void NodeRegister_Request::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeRegister.Request.Address)
}
inline ::std::string* NodeRegister_Request::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Request.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRegister_Request::release_address() {
  // @@protoc_insertion_point(field_release:s2s.NodeRegister.Request.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRegister_Request::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeRegister.Request.Address)
}

// string ServerName = 4;
inline void NodeRegister_Request::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeRegister_Request::servername() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.ServerName)
  return servername_.GetNoArena();
}
inline void NodeRegister_Request::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.ServerName)
}
#if LANG_CXX11
inline void NodeRegister_Request::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeRegister.Request.ServerName)
}
#endif
inline void NodeRegister_Request::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeRegister.Request.ServerName)
}
inline void NodeRegister_Request::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeRegister.Request.ServerName)
}
inline ::std::string* NodeRegister_Request::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Request.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRegister_Request::release_servername() {
  // @@protoc_insertion_point(field_release:s2s.NodeRegister.Request.ServerName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRegister_Request::set_allocated_servername(::std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeRegister.Request.ServerName)
}

// repeated string Services = 5;
inline int NodeRegister_Request::services_size() const {
  return services_.size();
}
inline void NodeRegister_Request::clear_services() {
  services_.Clear();
}
inline const ::std::string& NodeRegister_Request::services(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.Services)
  return services_.Get(index);
}
inline ::std::string* NodeRegister_Request::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Request.Services)
  return services_.Mutable(index);
}
inline void NodeRegister_Request::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.Services)
  services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeRegister_Request::set_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.Services)
  services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeRegister_Request::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.NodeRegister.Request.Services)
}
inline void NodeRegister_Request::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeRegister.Request.Services)
}
inline ::std::string* NodeRegister_Request::add_services() {
  // @@protoc_insertion_point(field_add_mutable:s2s.NodeRegister.Request.Services)
  return services_.Add();
}
inline void NodeRegister_Request::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.NodeRegister.Request.Services)
}
#if LANG_CXX11
inline void NodeRegister_Request::add_services(::std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.NodeRegister.Request.Services)
}
#endif
inline void NodeRegister_Request::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.NodeRegister.Request.Services)
}
inline void NodeRegister_Request::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.NodeRegister.Request.Services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodeRegister_Request::services() const {
  // @@protoc_insertion_point(field_list:s2s.NodeRegister.Request.Services)
  return services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodeRegister_Request::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeRegister.Request.Services)
  return &services_;
}

// -------------------------------------------------------------------

// NodeRegister

// -------------------------------------------------------------------

// NodeData_NodeInfo

// int32 AreaId = 1;
inline void NodeData_NodeInfo::clear_areaid() {
  areaid_ = 0;
}
inline ::google::protobuf::int32 NodeData_NodeInfo::areaid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeData.NodeInfo.AreaId)
  return areaid_;
}
inline void NodeData_NodeInfo::set_areaid(::google::protobuf::int32 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeData.NodeInfo.AreaId)
}

// int32 NodeId = 2;
inline void NodeData_NodeInfo::clear_nodeid() {
  nodeid_ = 0;
}
inline ::google::protobuf::int32 NodeData_NodeInfo::nodeid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeData.NodeInfo.NodeId)
  return nodeid_;
}
inline void NodeData_NodeInfo::set_nodeid(::google::protobuf::int32 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeData.NodeInfo.NodeId)
}

// string Address = 3;
inline void NodeData_NodeInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeData_NodeInfo::address() const {
  // @@protoc_insertion_point(field_get:s2s.NodeData.NodeInfo.Address)
  return address_.GetNoArena();
}
inline void NodeData_NodeInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeData.NodeInfo.Address)
}
#if LANG_CXX11
inline void NodeData_NodeInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeData.NodeInfo.Address)
}
#endif
inline void NodeData_NodeInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeData.NodeInfo.Address)
}
inline void NodeData_NodeInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeData.NodeInfo.Address)
}
inline ::std::string* NodeData_NodeInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeData.NodeInfo.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeData_NodeInfo::release_address() {
  // @@protoc_insertion_point(field_release:s2s.NodeData.NodeInfo.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeData_NodeInfo::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeData.NodeInfo.Address)
}

// string ServerName = 4;
inline void NodeData_NodeInfo::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeData_NodeInfo::servername() const {
  // @@protoc_insertion_point(field_get:s2s.NodeData.NodeInfo.ServerName)
  return servername_.GetNoArena();
}
inline void NodeData_NodeInfo::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeData.NodeInfo.ServerName)
}
#if LANG_CXX11
inline void NodeData_NodeInfo::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeData.NodeInfo.ServerName)
}
#endif
inline void NodeData_NodeInfo::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeData.NodeInfo.ServerName)
}
inline void NodeData_NodeInfo::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeData.NodeInfo.ServerName)
}
inline ::std::string* NodeData_NodeInfo::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeData.NodeInfo.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeData_NodeInfo::release_servername() {
  // @@protoc_insertion_point(field_release:s2s.NodeData.NodeInfo.ServerName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeData_NodeInfo::set_allocated_servername(::std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeData.NodeInfo.ServerName)
}

// repeated string Services = 5;
inline int NodeData_NodeInfo::services_size() const {
  return services_.size();
}
inline void NodeData_NodeInfo::clear_services() {
  services_.Clear();
}
inline const ::std::string& NodeData_NodeInfo::services(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeData.NodeInfo.Services)
  return services_.Get(index);
}
inline ::std::string* NodeData_NodeInfo::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeData.NodeInfo.Services)
  return services_.Mutable(index);
}
inline void NodeData_NodeInfo::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeData.NodeInfo.Services)
  services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeData_NodeInfo::set_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeData.NodeInfo.Services)
  services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeData_NodeInfo::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.NodeData.NodeInfo.Services)
}
inline void NodeData_NodeInfo::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeData.NodeInfo.Services)
}
inline ::std::string* NodeData_NodeInfo::add_services() {
  // @@protoc_insertion_point(field_add_mutable:s2s.NodeData.NodeInfo.Services)
  return services_.Add();
}
inline void NodeData_NodeInfo::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.NodeData.NodeInfo.Services)
}
#if LANG_CXX11
inline void NodeData_NodeInfo::add_services(::std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.NodeData.NodeInfo.Services)
}
#endif
inline void NodeData_NodeInfo::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.NodeData.NodeInfo.Services)
}
inline void NodeData_NodeInfo::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.NodeData.NodeInfo.Services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodeData_NodeInfo::services() const {
  // @@protoc_insertion_point(field_list:s2s.NodeData.NodeInfo.Services)
  return services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodeData_NodeInfo::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeData.NodeInfo.Services)
  return &services_;
}

// -------------------------------------------------------------------

// NodeData_Array

// repeated .s2s.NodeData.NodeInfo NodeArray = 1;
inline int NodeData_Array::nodearray_size() const {
  return nodearray_.size();
}
inline void NodeData_Array::clear_nodearray() {
  nodearray_.Clear();
}
inline ::s2s::NodeData_NodeInfo* NodeData_Array::mutable_nodearray(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeData.Array.NodeArray)
  return nodearray_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::s2s::NodeData_NodeInfo >*
NodeData_Array::mutable_nodearray() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeData.Array.NodeArray)
  return &nodearray_;
}
inline const ::s2s::NodeData_NodeInfo& NodeData_Array::nodearray(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeData.Array.NodeArray)
  return nodearray_.Get(index);
}
inline ::s2s::NodeData_NodeInfo* NodeData_Array::add_nodearray() {
  // @@protoc_insertion_point(field_add:s2s.NodeData.Array.NodeArray)
  return nodearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::s2s::NodeData_NodeInfo >&
NodeData_Array::nodearray() const {
  // @@protoc_insertion_point(field_list:s2s.NodeData.Array.NodeArray)
  return nodearray_;
}

// -------------------------------------------------------------------

// NodeData

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2eproto
