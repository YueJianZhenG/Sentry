// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace lua {
class TestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Test> _instance;
} _Test_default_instance_;
class Test1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Test1> _instance;
} _Test1_default_instance_;
class Rpc_Request_Call_NoticeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rpc_Request_Call_Notice> _instance;
} _Rpc_Request_Call_Notice_default_instance_;
class Rpc_Request_CallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rpc_Request_Call> _instance;
} _Rpc_Request_Call_default_instance_;
class Rpc_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rpc_Request> _instance;
} _Rpc_Request_default_instance_;
class Rpc_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rpc_Response> _instance;
} _Rpc_Response_default_instance_;
class RpcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rpc> _instance;
} _Rpc_default_instance_;
}  // namespace lua
static void InitDefaultsTest_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lua::_Test_default_instance_;
    new (ptr) ::lua::Test();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lua::Test::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Test_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTest_test_2eproto}, {}};

static void InitDefaultsTest1_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lua::_Test1_default_instance_;
    new (ptr) ::lua::Test1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lua::Test1::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Test1_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTest1_test_2eproto}, {}};

static void InitDefaultsRpc_Request_Call_Notice_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lua::_Rpc_Request_Call_Notice_default_instance_;
    new (ptr) ::lua::Rpc_Request_Call_Notice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lua::Rpc_Request_Call_Notice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rpc_Request_Call_Notice_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpc_Request_Call_Notice_test_2eproto}, {}};

static void InitDefaultsRpc_Request_Call_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lua::_Rpc_Request_Call_default_instance_;
    new (ptr) ::lua::Rpc_Request_Call();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lua::Rpc_Request_Call::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rpc_Request_Call_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpc_Request_Call_test_2eproto}, {}};

static void InitDefaultsRpc_Request_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lua::_Rpc_Request_default_instance_;
    new (ptr) ::lua::Rpc_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lua::Rpc_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rpc_Request_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpc_Request_test_2eproto}, {}};

static void InitDefaultsRpc_Response_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lua::_Rpc_Response_default_instance_;
    new (ptr) ::lua::Rpc_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lua::Rpc_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rpc_Response_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpc_Response_test_2eproto}, {}};

static void InitDefaultsRpc_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lua::_Rpc_default_instance_;
    new (ptr) ::lua::Rpc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lua::Rpc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rpc_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpc_test_2eproto}, {}};

void InitDefaults_test_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Test_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Test1_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rpc_Request_Call_Notice_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rpc_Request_Call_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rpc_Request_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rpc_Response_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rpc_test_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_test_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lua::Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lua::Test, address_),
  PROTOBUF_FIELD_OFFSET(::lua::Test, service_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lua::Test1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request_Call_Notice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request_Call_Notice, methodid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request_Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request_Call, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request, name_),
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request, user_id_),
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Request, rpc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Response, name_),
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Response, user_id_),
  PROTOBUF_FIELD_OFFSET(::lua::Rpc_Response, rpc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lua::Rpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lua::Test)},
  { 7, -1, sizeof(::lua::Test1)},
  { 12, -1, sizeof(::lua::Rpc_Request_Call_Notice)},
  { 18, -1, sizeof(::lua::Rpc_Request_Call)},
  { 24, -1, sizeof(::lua::Rpc_Request)},
  { 32, -1, sizeof(::lua::Rpc_Response)},
  { 40, -1, sizeof(::lua::Rpc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lua::_Test_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lua::_Test1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lua::_Rpc_Request_Call_Notice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lua::_Rpc_Request_Call_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lua::_Rpc_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lua::_Rpc_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lua::_Rpc_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_test_2eproto = {
  {}, AddDescriptors_test_2eproto, "test.proto", schemas,
  file_default_instances, TableStruct_test_2eproto::offsets,
  file_level_metadata_test_2eproto, 7, file_level_enum_descriptors_test_2eproto, file_level_service_descriptors_test_2eproto,
};

const char descriptor_table_protodef_test_2eproto[] =
  "\n\ntest.proto\022\003lua\"(\n\004Test\022\017\n\007address\030\001 \001"
  "(\t\022\017\n\007service\030\002 \003(\t\"\007\n\005Test1\"\254\001\n\003Rpc\032j\n\007"
  "Request\022\014\n\004name\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\003\022\016"
  "\n\006rpc_id\030\003 \001(\003\0320\n\004Call\022\014\n\004name\030\001 \001(\t\032\032\n\006"
  "Notice\022\020\n\010methodId\030\001 \001(\005\0329\n\010Response\022\014\n\004"
  "name\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\003\022\016\n\006rpc_id\030\003 "
  "\001(\003b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_test_2eproto = {
  false, InitDefaults_test_2eproto, 
  descriptor_table_protodef_test_2eproto,
  "test.proto", &assign_descriptors_table_test_2eproto, 251,
};

void AddDescriptors_test_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_test_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_test_2eproto = []() { AddDescriptors_test_2eproto(); return true; }();
namespace lua {

// ===================================================================

void Test::InitAsDefaultInstance() {
}
class Test::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Test::kAddressFieldNumber;
const int Test::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Test::Test()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lua.Test)
}
Test::Test(const Test& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      service_(from.service_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:lua.Test)
}

void Test::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Test_test_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:lua.Test)
  SharedDtor();
}

void Test::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test& Test::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Test_test_2eproto.base);
  return *internal_default_instance();
}


void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:lua.Test)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Test::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Test*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lua.Test.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string service = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("lua.Test.service");
          object = msg->add_service();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lua.Test)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lua.Test.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service(this->service_size() - 1).data(),
            static_cast<int>(this->service(this->service_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lua.Test.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lua.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lua.Test)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lua.Test)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Test.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // repeated string service = 2;
  for (int i = 0, n = this->service_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service(i).data(), static_cast<int>(this->service(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Test.service");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lua.Test)
}

::google::protobuf::uint8* Test::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lua.Test)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Test.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // repeated string service = 2;
  for (int i = 0, n = this->service_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service(i).data(), static_cast<int>(this->service(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Test.service");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->service(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lua.Test)
  return target;
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lua.Test)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->service_size());
  for (int i = 0, n = this->service_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->service(i));
  }

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lua.Test)
  GOOGLE_DCHECK_NE(&from, this);
  const Test* source =
      ::google::protobuf::DynamicCastToGenerated<Test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lua.Test)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lua.Test)
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lua.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_.MergeFrom(from.service_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lua.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lua.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::Swap(Test* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test::InternalSwap(Test* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_.InternalSwap(CastToBase(&other->service_));
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Test::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Test1::InitAsDefaultInstance() {
}
class Test1::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Test1::Test1()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lua.Test1)
}
Test1::Test1(const Test1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lua.Test1)
}

void Test1::SharedCtor() {
}

Test1::~Test1() {
  // @@protoc_insertion_point(destructor:lua.Test1)
  SharedDtor();
}

void Test1::SharedDtor() {
}

void Test1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test1& Test1::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Test1_test_2eproto.base);
  return *internal_default_instance();
}


void Test1::Clear() {
// @@protoc_insertion_point(message_clear_start:lua.Test1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Test1::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Test1*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Test1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lua.Test1)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lua.Test1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lua.Test1)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Test1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lua.Test1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lua.Test1)
}

::google::protobuf::uint8* Test1::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lua.Test1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lua.Test1)
  return target;
}

size_t Test1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lua.Test1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lua.Test1)
  GOOGLE_DCHECK_NE(&from, this);
  const Test1* source =
      ::google::protobuf::DynamicCastToGenerated<Test1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lua.Test1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lua.Test1)
    MergeFrom(*source);
  }
}

void Test1::MergeFrom(const Test1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lua.Test1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Test1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lua.Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test1::CopyFrom(const Test1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lua.Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test1::IsInitialized() const {
  return true;
}

void Test1::Swap(Test1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test1::InternalSwap(Test1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Test1::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rpc_Request_Call_Notice::InitAsDefaultInstance() {
}
class Rpc_Request_Call_Notice::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rpc_Request_Call_Notice::kMethodIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rpc_Request_Call_Notice::Rpc_Request_Call_Notice()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lua.Rpc.Request.Call.Notice)
}
Rpc_Request_Call_Notice::Rpc_Request_Call_Notice(const Rpc_Request_Call_Notice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  methodid_ = from.methodid_;
  // @@protoc_insertion_point(copy_constructor:lua.Rpc.Request.Call.Notice)
}

void Rpc_Request_Call_Notice::SharedCtor() {
  methodid_ = 0;
}

Rpc_Request_Call_Notice::~Rpc_Request_Call_Notice() {
  // @@protoc_insertion_point(destructor:lua.Rpc.Request.Call.Notice)
  SharedDtor();
}

void Rpc_Request_Call_Notice::SharedDtor() {
}

void Rpc_Request_Call_Notice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpc_Request_Call_Notice& Rpc_Request_Call_Notice::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rpc_Request_Call_Notice_test_2eproto.base);
  return *internal_default_instance();
}


void Rpc_Request_Call_Notice::Clear() {
// @@protoc_insertion_point(message_clear_start:lua.Rpc.Request.Call.Notice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  methodid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rpc_Request_Call_Notice::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rpc_Request_Call_Notice*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 methodId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_methodid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rpc_Request_Call_Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lua.Rpc.Request.Call.Notice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 methodId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &methodid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lua.Rpc.Request.Call.Notice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lua.Rpc.Request.Call.Notice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rpc_Request_Call_Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lua.Rpc.Request.Call.Notice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 methodId = 1;
  if (this->methodid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->methodid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lua.Rpc.Request.Call.Notice)
}

::google::protobuf::uint8* Rpc_Request_Call_Notice::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lua.Rpc.Request.Call.Notice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 methodId = 1;
  if (this->methodid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->methodid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lua.Rpc.Request.Call.Notice)
  return target;
}

size_t Rpc_Request_Call_Notice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lua.Rpc.Request.Call.Notice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 methodId = 1;
  if (this->methodid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->methodid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpc_Request_Call_Notice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lua.Rpc.Request.Call.Notice)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpc_Request_Call_Notice* source =
      ::google::protobuf::DynamicCastToGenerated<Rpc_Request_Call_Notice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lua.Rpc.Request.Call.Notice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lua.Rpc.Request.Call.Notice)
    MergeFrom(*source);
  }
}

void Rpc_Request_Call_Notice::MergeFrom(const Rpc_Request_Call_Notice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lua.Rpc.Request.Call.Notice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.methodid() != 0) {
    set_methodid(from.methodid());
  }
}

void Rpc_Request_Call_Notice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lua.Rpc.Request.Call.Notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc_Request_Call_Notice::CopyFrom(const Rpc_Request_Call_Notice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lua.Rpc.Request.Call.Notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc_Request_Call_Notice::IsInitialized() const {
  return true;
}

void Rpc_Request_Call_Notice::Swap(Rpc_Request_Call_Notice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc_Request_Call_Notice::InternalSwap(Rpc_Request_Call_Notice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(methodid_, other->methodid_);
}

::google::protobuf::Metadata Rpc_Request_Call_Notice::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rpc_Request_Call::InitAsDefaultInstance() {
}
class Rpc_Request_Call::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rpc_Request_Call::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rpc_Request_Call::Rpc_Request_Call()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lua.Rpc.Request.Call)
}
Rpc_Request_Call::Rpc_Request_Call(const Rpc_Request_Call& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:lua.Rpc.Request.Call)
}

void Rpc_Request_Call::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rpc_Request_Call_test_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rpc_Request_Call::~Rpc_Request_Call() {
  // @@protoc_insertion_point(destructor:lua.Rpc.Request.Call)
  SharedDtor();
}

void Rpc_Request_Call::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rpc_Request_Call::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpc_Request_Call& Rpc_Request_Call::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rpc_Request_Call_test_2eproto.base);
  return *internal_default_instance();
}


void Rpc_Request_Call::Clear() {
// @@protoc_insertion_point(message_clear_start:lua.Rpc.Request.Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rpc_Request_Call::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rpc_Request_Call*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lua.Rpc.Request.Call.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rpc_Request_Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lua.Rpc.Request.Call)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lua.Rpc.Request.Call.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lua.Rpc.Request.Call)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lua.Rpc.Request.Call)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rpc_Request_Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lua.Rpc.Request.Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Rpc.Request.Call.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lua.Rpc.Request.Call)
}

::google::protobuf::uint8* Rpc_Request_Call::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lua.Rpc.Request.Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Rpc.Request.Call.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lua.Rpc.Request.Call)
  return target;
}

size_t Rpc_Request_Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lua.Rpc.Request.Call)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpc_Request_Call::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lua.Rpc.Request.Call)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpc_Request_Call* source =
      ::google::protobuf::DynamicCastToGenerated<Rpc_Request_Call>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lua.Rpc.Request.Call)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lua.Rpc.Request.Call)
    MergeFrom(*source);
  }
}

void Rpc_Request_Call::MergeFrom(const Rpc_Request_Call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lua.Rpc.Request.Call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Rpc_Request_Call::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lua.Rpc.Request.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc_Request_Call::CopyFrom(const Rpc_Request_Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lua.Rpc.Request.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc_Request_Call::IsInitialized() const {
  return true;
}

void Rpc_Request_Call::Swap(Rpc_Request_Call* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc_Request_Call::InternalSwap(Rpc_Request_Call* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Rpc_Request_Call::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rpc_Request::InitAsDefaultInstance() {
}
class Rpc_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rpc_Request::kNameFieldNumber;
const int Rpc_Request::kUserIdFieldNumber;
const int Rpc_Request::kRpcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rpc_Request::Rpc_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lua.Rpc.Request)
}
Rpc_Request::Rpc_Request(const Rpc_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rpc_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(rpc_id_));
  // @@protoc_insertion_point(copy_constructor:lua.Rpc.Request)
}

void Rpc_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rpc_Request_test_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpc_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(rpc_id_));
}

Rpc_Request::~Rpc_Request() {
  // @@protoc_insertion_point(destructor:lua.Rpc.Request)
  SharedDtor();
}

void Rpc_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rpc_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpc_Request& Rpc_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rpc_Request_test_2eproto.base);
  return *internal_default_instance();
}


void Rpc_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:lua.Rpc.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpc_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(rpc_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rpc_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rpc_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lua.Rpc.Request.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 rpc_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rpc_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rpc_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lua.Rpc.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lua.Rpc.Request.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rpc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rpc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lua.Rpc.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lua.Rpc.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rpc_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lua.Rpc.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Rpc.Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // int64 rpc_id = 3;
  if (this->rpc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rpc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lua.Rpc.Request)
}

::google::protobuf::uint8* Rpc_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lua.Rpc.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Rpc.Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  // int64 rpc_id = 3;
  if (this->rpc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rpc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lua.Rpc.Request)
  return target;
}

size_t Rpc_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lua.Rpc.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int64 rpc_id = 3;
  if (this->rpc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rpc_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpc_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lua.Rpc.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpc_Request* source =
      ::google::protobuf::DynamicCastToGenerated<Rpc_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lua.Rpc.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lua.Rpc.Request)
    MergeFrom(*source);
  }
}

void Rpc_Request::MergeFrom(const Rpc_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lua.Rpc.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.rpc_id() != 0) {
    set_rpc_id(from.rpc_id());
  }
}

void Rpc_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lua.Rpc.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc_Request::CopyFrom(const Rpc_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lua.Rpc.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc_Request::IsInitialized() const {
  return true;
}

void Rpc_Request::Swap(Rpc_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc_Request::InternalSwap(Rpc_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(rpc_id_, other->rpc_id_);
}

::google::protobuf::Metadata Rpc_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rpc_Response::InitAsDefaultInstance() {
}
class Rpc_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rpc_Response::kNameFieldNumber;
const int Rpc_Response::kUserIdFieldNumber;
const int Rpc_Response::kRpcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rpc_Response::Rpc_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lua.Rpc.Response)
}
Rpc_Response::Rpc_Response(const Rpc_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rpc_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(rpc_id_));
  // @@protoc_insertion_point(copy_constructor:lua.Rpc.Response)
}

void Rpc_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rpc_Response_test_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpc_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(rpc_id_));
}

Rpc_Response::~Rpc_Response() {
  // @@protoc_insertion_point(destructor:lua.Rpc.Response)
  SharedDtor();
}

void Rpc_Response::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rpc_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpc_Response& Rpc_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rpc_Response_test_2eproto.base);
  return *internal_default_instance();
}


void Rpc_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:lua.Rpc.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpc_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(rpc_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rpc_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rpc_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lua.Rpc.Response.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 rpc_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rpc_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rpc_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lua.Rpc.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lua.Rpc.Response.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rpc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rpc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lua.Rpc.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lua.Rpc.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rpc_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lua.Rpc.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Rpc.Response.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // int64 rpc_id = 3;
  if (this->rpc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rpc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lua.Rpc.Response)
}

::google::protobuf::uint8* Rpc_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lua.Rpc.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lua.Rpc.Response.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  // int64 rpc_id = 3;
  if (this->rpc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rpc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lua.Rpc.Response)
  return target;
}

size_t Rpc_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lua.Rpc.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int64 rpc_id = 3;
  if (this->rpc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rpc_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpc_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lua.Rpc.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpc_Response* source =
      ::google::protobuf::DynamicCastToGenerated<Rpc_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lua.Rpc.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lua.Rpc.Response)
    MergeFrom(*source);
  }
}

void Rpc_Response::MergeFrom(const Rpc_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lua.Rpc.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.rpc_id() != 0) {
    set_rpc_id(from.rpc_id());
  }
}

void Rpc_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lua.Rpc.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc_Response::CopyFrom(const Rpc_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lua.Rpc.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc_Response::IsInitialized() const {
  return true;
}

void Rpc_Response::Swap(Rpc_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc_Response::InternalSwap(Rpc_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(rpc_id_, other->rpc_id_);
}

::google::protobuf::Metadata Rpc_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rpc::InitAsDefaultInstance() {
}
class Rpc::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rpc::Rpc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lua.Rpc)
}
Rpc::Rpc(const Rpc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lua.Rpc)
}

void Rpc::SharedCtor() {
}

Rpc::~Rpc() {
  // @@protoc_insertion_point(destructor:lua.Rpc)
  SharedDtor();
}

void Rpc::SharedDtor() {
}

void Rpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpc& Rpc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rpc_test_2eproto.base);
  return *internal_default_instance();
}


void Rpc::Clear() {
// @@protoc_insertion_point(message_clear_start:lua.Rpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rpc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rpc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lua.Rpc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lua.Rpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lua.Rpc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lua.Rpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lua.Rpc)
}

::google::protobuf::uint8* Rpc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lua.Rpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lua.Rpc)
  return target;
}

size_t Rpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lua.Rpc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lua.Rpc)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpc* source =
      ::google::protobuf::DynamicCastToGenerated<Rpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lua.Rpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lua.Rpc)
    MergeFrom(*source);
  }
}

void Rpc::MergeFrom(const Rpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lua.Rpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lua.Rpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc::CopyFrom(const Rpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lua.Rpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc::IsInitialized() const {
  return true;
}

void Rpc::Swap(Rpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc::InternalSwap(Rpc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rpc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lua
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::lua::Test* Arena::CreateMaybeMessage< ::lua::Test >(Arena* arena) {
  return Arena::CreateInternal< ::lua::Test >(arena);
}
template<> PROTOBUF_NOINLINE ::lua::Test1* Arena::CreateMaybeMessage< ::lua::Test1 >(Arena* arena) {
  return Arena::CreateInternal< ::lua::Test1 >(arena);
}
template<> PROTOBUF_NOINLINE ::lua::Rpc_Request_Call_Notice* Arena::CreateMaybeMessage< ::lua::Rpc_Request_Call_Notice >(Arena* arena) {
  return Arena::CreateInternal< ::lua::Rpc_Request_Call_Notice >(arena);
}
template<> PROTOBUF_NOINLINE ::lua::Rpc_Request_Call* Arena::CreateMaybeMessage< ::lua::Rpc_Request_Call >(Arena* arena) {
  return Arena::CreateInternal< ::lua::Rpc_Request_Call >(arena);
}
template<> PROTOBUF_NOINLINE ::lua::Rpc_Request* Arena::CreateMaybeMessage< ::lua::Rpc_Request >(Arena* arena) {
  return Arena::CreateInternal< ::lua::Rpc_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::lua::Rpc_Response* Arena::CreateMaybeMessage< ::lua::Rpc_Response >(Arena* arena) {
  return Arena::CreateInternal< ::lua::Rpc_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::lua::Rpc* Arena::CreateMaybeMessage< ::lua::Rpc >(Arena* arena) {
  return Arena::CreateInternal< ::lua::Rpc >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
