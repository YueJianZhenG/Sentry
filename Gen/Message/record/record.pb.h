// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record/record.proto

#ifndef PROTOBUF_INCLUDED_record_2frecord_2eproto
#define PROTOBUF_INCLUDED_record_2frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_record_2frecord_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_record_2frecord_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_record_2frecord_2eproto();
namespace record {
class data;
class dataDefaultTypeInternal;
extern dataDefaultTypeInternal _data_default_instance_;
}  // namespace record
namespace google {
namespace protobuf {
template<> ::record::data* Arena::CreateMaybeMessage<::record::data>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace record {

// ===================================================================

class data :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.data) */ {
 public:
  data();
  virtual ~data();

  data(const data& from);

  inline data& operator=(const data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  data(data&& from) noexcept
    : data() {
    *this = ::std::move(from);
  }

  inline data& operator=(data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const data* internal_default_instance() {
    return reinterpret_cast<const data*>(
               &_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(data* other);
  friend void swap(data& a, data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline data* New() const final {
    return CreateMaybeMessage<data>(nullptr);
  }

  data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const data& from);
  void MergeFrom(const data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string json = 2;
  void clear_json();
  static const int kJsonFieldNumber = 2;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:record.data)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// data

// string tab = 1;
inline void data::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& data::tab() const {
  // @@protoc_insertion_point(field_get:record.data.tab)
  return tab_.GetNoArena();
}
inline void data::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.data.tab)
}
#if LANG_CXX11
inline void data::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.data.tab)
}
#endif
inline void data::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.data.tab)
}
inline void data::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.data.tab)
}
inline ::std::string* data::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:record.data.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* data::release_tab() {
  // @@protoc_insertion_point(field_release:record.data.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void data::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:record.data.tab)
}

// string json = 2;
inline void data::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& data::json() const {
  // @@protoc_insertion_point(field_get:record.data.json)
  return json_.GetNoArena();
}
inline void data::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.data.json)
}
#if LANG_CXX11
inline void data::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.data.json)
}
#endif
inline void data::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.data.json)
}
inline void data::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.data.json)
}
inline ::std::string* data::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:record.data.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* data::release_json() {
  // @@protoc_insertion_point(field_release:record.data.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void data::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:record.data.json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace record

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_record_2frecord_2eproto
