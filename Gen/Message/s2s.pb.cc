// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#include "s2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace s2s {
class mysql_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_create> _instance;
} _mysql_create_default_instance_;
class mysql_addDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_add> _instance;
} _mysql_add_default_instance_;
class mysql_saveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_save> _instance;
} _mysql_save_default_instance_;
class mysql_queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_query> _instance;
} _mysql_query_default_instance_;
class mysql_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_remove> _instance;
} _mysql_remove_default_instance_;
class mysql_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_update> _instance;
} _mysql_update_default_instance_;
class mysql_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_response> _instance;
} _mysql_response_default_instance_;
class mysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql> _instance;
} _mysql_default_instance_;
class mongo_insertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_insert> _instance;
} _mongo_insert_default_instance_;
class mongo_query_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_query_request> _instance;
} _mongo_query_request_default_instance_;
class mongo_query_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_query_response> _instance;
} _mongo_query_response_default_instance_;
class mongo_queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_query> _instance;
} _mongo_query_default_instance_;
class mongo_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_remove> _instance;
} _mongo_remove_default_instance_;
class mongo_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_update> _instance;
} _mongo_update_default_instance_;
class mongo_add_counter_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_add_counter_request> _instance;
} _mongo_add_counter_request_default_instance_;
class mongo_add_counter_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_add_counter_response> _instance;
} _mongo_add_counter_response_default_instance_;
class mongo_add_counterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_add_counter> _instance;
} _mongo_add_counter_default_instance_;
class mongoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo> _instance;
} _mongo_default_instance_;
class allot_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<allot_response> _instance;
} _allot_response_default_instance_;
class allot_saveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<allot_save> _instance;
} _allot_save_default_instance_;
class allotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<allot> _instance;
} _allot_default_instance_;
class broadcast_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<broadcast_request> _instance;
} _broadcast_request_default_instance_;
class broadcast_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<broadcast_response> _instance;
} _broadcast_response_default_instance_;
class broadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<broadcast> _instance;
} _broadcast_default_instance_;
class client_callDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<client_call> _instance;
} _client_call_default_instance_;
class clientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<client> _instance;
} _client_default_instance_;
}  // namespace s2s
static void InitDefaultsmysql_create_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_create_default_instance_;
    new (ptr) ::s2s::mysql_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_create_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_create_s2s_2eproto}, {}};

static void InitDefaultsmysql_add_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_add_default_instance_;
    new (ptr) ::s2s::mysql_add();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql_add::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mysql_add_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmysql_add_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsmysql_save_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_save_default_instance_;
    new (ptr) ::s2s::mysql_save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql_save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mysql_save_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmysql_save_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsmysql_query_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_query_default_instance_;
    new (ptr) ::s2s::mysql_query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql_query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_query_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_query_s2s_2eproto}, {}};

static void InitDefaultsmysql_remove_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_remove_default_instance_;
    new (ptr) ::s2s::mysql_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_remove_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_remove_s2s_2eproto}, {}};

static void InitDefaultsmysql_update_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_update_default_instance_;
    new (ptr) ::s2s::mysql_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_update_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_update_s2s_2eproto}, {}};

static void InitDefaultsmysql_response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_response_default_instance_;
    new (ptr) ::s2s::mysql_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_response_s2s_2eproto}, {}};

static void InitDefaultsmysql_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mysql_default_instance_;
    new (ptr) ::s2s::mysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mysql::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_s2s_2eproto}, {}};

static void InitDefaultsmongo_insert_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_insert_default_instance_;
    new (ptr) ::s2s::mongo_insert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_insert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_insert_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_insert_s2s_2eproto}, {}};

static void InitDefaultsmongo_query_request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_query_request_default_instance_;
    new (ptr) ::s2s::mongo_query_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_query_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_query_request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_query_request_s2s_2eproto}, {}};

static void InitDefaultsmongo_query_response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_query_response_default_instance_;
    new (ptr) ::s2s::mongo_query_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_query_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_query_response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_query_response_s2s_2eproto}, {}};

static void InitDefaultsmongo_query_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_query_default_instance_;
    new (ptr) ::s2s::mongo_query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_query_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_query_s2s_2eproto}, {}};

static void InitDefaultsmongo_remove_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_remove_default_instance_;
    new (ptr) ::s2s::mongo_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_remove_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_remove_s2s_2eproto}, {}};

static void InitDefaultsmongo_update_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_update_default_instance_;
    new (ptr) ::s2s::mongo_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_update_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_update_s2s_2eproto}, {}};

static void InitDefaultsmongo_add_counter_request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_add_counter_request_default_instance_;
    new (ptr) ::s2s::mongo_add_counter_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_add_counter_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_add_counter_request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_add_counter_request_s2s_2eproto}, {}};

static void InitDefaultsmongo_add_counter_response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_add_counter_response_default_instance_;
    new (ptr) ::s2s::mongo_add_counter_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_add_counter_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_add_counter_response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_add_counter_response_s2s_2eproto}, {}};

static void InitDefaultsmongo_add_counter_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_add_counter_default_instance_;
    new (ptr) ::s2s::mongo_add_counter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo_add_counter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_add_counter_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_add_counter_s2s_2eproto}, {}};

static void InitDefaultsmongo_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_mongo_default_instance_;
    new (ptr) ::s2s::mongo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::mongo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_s2s_2eproto}, {}};

static void InitDefaultsallot_response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_allot_response_default_instance_;
    new (ptr) ::s2s::allot_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::allot_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_allot_response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsallot_response_s2s_2eproto}, {}};

static void InitDefaultsallot_save_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_allot_save_default_instance_;
    new (ptr) ::s2s::allot_save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::allot_save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_allot_save_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsallot_save_s2s_2eproto}, {}};

static void InitDefaultsallot_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_allot_default_instance_;
    new (ptr) ::s2s::allot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::allot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_allot_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsallot_s2s_2eproto}, {}};

static void InitDefaultsbroadcast_request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_broadcast_request_default_instance_;
    new (ptr) ::s2s::broadcast_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::broadcast_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_broadcast_request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsbroadcast_request_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsbroadcast_response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_broadcast_response_default_instance_;
    new (ptr) ::s2s::broadcast_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::broadcast_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_broadcast_response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbroadcast_response_s2s_2eproto}, {}};

static void InitDefaultsbroadcast_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_broadcast_default_instance_;
    new (ptr) ::s2s::broadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::broadcast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_broadcast_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbroadcast_s2s_2eproto}, {}};

static void InitDefaultsclient_call_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_client_call_default_instance_;
    new (ptr) ::s2s::client_call();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::client_call::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_client_call_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsclient_call_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsclient_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_client_default_instance_;
    new (ptr) ::s2s::client();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::client::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_client_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsclient_s2s_2eproto}, {}};

void InitDefaults_s2s_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_create_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_add_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_save_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_query_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_remove_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_update_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_insert_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_query_request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_query_response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_query_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_remove_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_update_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_add_counter_request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_add_counter_response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_add_counter_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_allot_response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_allot_save_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_allot_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_broadcast_request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_broadcast_response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_broadcast_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_client_call_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_client_s2s_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_s2s_2eproto[26];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_s2s_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_s2s_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_s2s_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_create, db_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_create, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_create, proto_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_create, keys_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_create, indexs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_add, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_add, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_add, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_save, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_save, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_save, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_query, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_query, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_query, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_remove, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_remove, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_remove, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_update, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_update, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_update, update_json_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_update, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_response, error_),
  PROTOBUF_FIELD_OFFSET(::s2s::mysql_response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_insert, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_insert, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_query_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_query_request, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_query_request, json_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_query_request, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_query_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_query_response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_remove, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_remove, json_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_remove, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_update, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_update, select_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_update, update_),
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_update, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_add_counter_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_add_counter_request, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_add_counter_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_add_counter_response, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo_add_counter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::mongo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_response, token_),
  PROTOBUF_FIELD_OFFSET(::s2s::allot_response, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_save, service_),
  PROTOBUF_FIELD_OFFSET(::s2s::allot_save, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::allot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::broadcast_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::broadcast_request, func_),
  PROTOBUF_FIELD_OFFSET(::s2s::broadcast_request, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::broadcast_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::broadcast_response, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::client_call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::client_call, func_),
  PROTOBUF_FIELD_OFFSET(::s2s::client_call, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::s2s::mysql_create)},
  { 10, -1, sizeof(::s2s::mysql_add)},
  { 18, -1, sizeof(::s2s::mysql_save)},
  { 26, -1, sizeof(::s2s::mysql_query)},
  { 34, -1, sizeof(::s2s::mysql_remove)},
  { 42, -1, sizeof(::s2s::mysql_update)},
  { 51, -1, sizeof(::s2s::mysql_response)},
  { 58, -1, sizeof(::s2s::mysql)},
  { 63, -1, sizeof(::s2s::mongo_insert)},
  { 70, -1, sizeof(::s2s::mongo_query_request)},
  { 78, -1, sizeof(::s2s::mongo_query_response)},
  { 84, -1, sizeof(::s2s::mongo_query)},
  { 89, -1, sizeof(::s2s::mongo_remove)},
  { 97, -1, sizeof(::s2s::mongo_update)},
  { 106, -1, sizeof(::s2s::mongo_add_counter_request)},
  { 112, -1, sizeof(::s2s::mongo_add_counter_response)},
  { 118, -1, sizeof(::s2s::mongo_add_counter)},
  { 123, -1, sizeof(::s2s::mongo)},
  { 128, -1, sizeof(::s2s::allot_response)},
  { 135, -1, sizeof(::s2s::allot_save)},
  { 142, -1, sizeof(::s2s::allot)},
  { 147, -1, sizeof(::s2s::broadcast_request)},
  { 154, -1, sizeof(::s2s::broadcast_response)},
  { 160, -1, sizeof(::s2s::broadcast)},
  { 165, -1, sizeof(::s2s::client_call)},
  { 172, -1, sizeof(::s2s::client)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_add_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mysql_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_insert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_query_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_query_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_add_counter_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_add_counter_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_add_counter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_mongo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_allot_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_allot_save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_allot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_broadcast_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_broadcast_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_broadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_client_call_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_client_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_s2s_2eproto = {
  {}, AddDescriptors_s2s_2eproto, "s2s.proto", schemas,
  file_default_instances, TableStruct_s2s_2eproto::offsets,
  file_level_metadata_s2s_2eproto, 26, file_level_enum_descriptors_s2s_2eproto, file_level_service_descriptors_s2s_2eproto,
};

const char descriptor_table_protodef_s2s_2eproto[] =
  "\n\ts2s.proto\022\003s2s\032\031google/protobuf/any.pr"
  "oto\"\327\003\n\005mysql\032N\n\006create\022\n\n\002db\030\001 \001(\t\022\013\n\003t"
  "ab\030\002 \001(\t\022\r\n\005proto\030\003 \001(\t\022\014\n\004keys\030\004 \003(\t\022\016\n"
  "\006indexs\030\005 \003(\t\032F\n\003add\022\014\n\004flag\030\001 \001(\003\022\r\n\005ta"
  "ble\030\002 \001(\t\022\"\n\004data\030\003 \001(\0132\024.google.protobu"
  "f.Any\032G\n\004save\022\014\n\004flag\030\001 \001(\003\022\r\n\005table\030\002 \001"
  "(\t\022\"\n\004data\030\003 \001(\0132\024.google.protobuf.Any\0328"
  "\n\005query\022\014\n\004flag\030\001 \001(\003\022\r\n\005table\030\002 \001(\t\022\022\n\n"
  "where_json\030\003 \001(\t\0329\n\006remove\022\014\n\004flag\030\001 \001(\003"
  "\022\r\n\005table\030\002 \001(\t\022\022\n\nwhere_json\030\003 \001(\t\032N\n\006u"
  "pdate\022\014\n\004flag\030\001 \001(\003\022\r\n\005table\030\002 \001(\t\022\023\n\013up"
  "date_json\030\003 \001(\t\022\022\n\nwhere_json\030\004 \001(\t\032(\n\010r"
  "esponse\022\r\n\005error\030\001 \001(\t\022\r\n\005jsons\030\002 \003(\t\"\277\002"
  "\n\005mongo\032#\n\006insert\022\013\n\003tab\030\001 \001(\t\022\014\n\004json\030\002"
  " \001(\t\032W\n\005query\0323\n\007request\022\013\n\003tab\030\001 \001(\t\022\014\n"
  "\004json\030\002 \001(\t\022\r\n\005limit\030\003 \001(\005\032\031\n\010response\022\r"
  "\n\005jsons\030\001 \003(\t\0322\n\006remove\022\013\n\003tab\030\001 \001(\t\022\014\n\004"
  "json\030\002 \001(\t\022\r\n\005limit\030\003 \001(\005\032B\n\006update\022\013\n\003t"
  "ab\030\001 \001(\t\022\016\n\006select\030\002 \001(\t\022\016\n\006update\030\003 \001(\t"
  "\022\013\n\003tag\030\004 \001(\t\032@\n\013add_counter\032\026\n\007request\022"
  "\013\n\003key\030\001 \001(\t\032\031\n\010response\022\r\n\005value\030\001 \001(\003\""
  "]\n\005allot\032*\n\010response\022\r\n\005token\030\001 \001(\t\022\017\n\007a"
  "ddress\030\002 \001(\t\032(\n\004save\022\017\n\007service\030\001 \001(\t\022\017\n"
  "\007address\030\002 \001(\t\"c\n\tbroadcast\032;\n\007request\022\014"
  "\n\004func\030\001 \001(\t\022\"\n\004data\030\002 \001(\0132\024.google.prot"
  "obuf.Any\032\031\n\010response\022\r\n\005count\030\001 \001(\005\"B\n\006c"
  "lient\0328\n\004call\022\014\n\004func\030\001 \001(\t\022\"\n\004data\030\002 \001("
  "\0132\024.google.protobuf.Anyb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_s2s_2eproto = {
  false, InitDefaults_s2s_2eproto, 
  descriptor_table_protodef_s2s_2eproto,
  "s2s.proto", &assign_descriptors_table_s2s_2eproto, 1111,
};

void AddDescriptors_s2s_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2fany_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_s2s_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_s2s_2eproto = []() { AddDescriptors_s2s_2eproto(); return true; }();
namespace s2s {

// ===================================================================

void mysql_create::InitAsDefaultInstance() {
}
class mysql_create::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_create::kDbFieldNumber;
const int mysql_create::kTabFieldNumber;
const int mysql_create::kProtoFieldNumber;
const int mysql_create::kKeysFieldNumber;
const int mysql_create::kIndexsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_create::mysql_create()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql.create)
}
mysql_create::mysql_create(const mysql_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_),
      indexs_(from.indexs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proto().size() > 0) {
    proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.mysql.create)
}

void mysql_create::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_create_s2s_2eproto.base);
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mysql_create::~mysql_create() {
  // @@protoc_insertion_point(destructor:s2s.mysql.create)
  SharedDtor();
}

void mysql_create::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_create& mysql_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_create_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql_create::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  indexs_.Clear();
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_create::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_create*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string db = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.create.db");
        object = msg->mutable_db();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string tab = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.create.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string proto = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.create.proto");
        object = msg->mutable_proto();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string keys = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.mysql.create.keys");
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated string indexs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.mysql.create.indexs");
          object = msg->add_indexs();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql.create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string db = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.create.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tab = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.create.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proto = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto().data(), static_cast<int>(this->proto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.create.proto"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.create.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string indexs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_indexs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->indexs(this->indexs_size() - 1).data(),
            static_cast<int>(this->indexs(this->indexs_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.create.indexs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql.create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql.create)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db(), output);
  }

  // string tab = 2;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tab(), output);
  }

  // string proto = 3;
  if (this->proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.proto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proto(), output);
  }

  // repeated string keys = 4;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keys(i), output);
  }

  // repeated string indexs = 5;
  for (int i = 0, n = this->indexs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indexs(i).data(), static_cast<int>(this->indexs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.indexs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->indexs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql.create)
}

::google::protobuf::uint8* mysql_create::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db(), target);
  }

  // string tab = 2;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tab(), target);
  }

  // string proto = 3;
  if (this->proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.proto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proto(), target);
  }

  // repeated string keys = 4;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->keys(i), target);
  }

  // repeated string indexs = 5;
  for (int i = 0, n = this->indexs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indexs(i).data(), static_cast<int>(this->indexs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.create.indexs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->indexs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql.create)
  return target;
}

size_t mysql_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql.create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string indexs = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->indexs_size());
  for (int i = 0, n = this->indexs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->indexs(i));
  }

  // string db = 1;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string tab = 2;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string proto = 3;
  if (this->proto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proto());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql.create)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_create* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql.create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql.create)
    MergeFrom(*source);
  }
}

void mysql_create::MergeFrom(const mysql_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql.create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  indexs_.MergeFrom(from.indexs_);
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.proto().size() > 0) {

    proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
}

void mysql_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_create::CopyFrom(const mysql_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_create::IsInitialized() const {
  return true;
}

void mysql_create::Swap(mysql_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_create::InternalSwap(mysql_create* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  indexs_.InternalSwap(CastToBase(&other->indexs_));
  db_.Swap(&other->db_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proto_.Swap(&other->proto_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mysql_create::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_add::InitAsDefaultInstance() {
  ::s2s::_mysql_add_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class mysql_add::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const mysql_add* msg);
};

const ::google::protobuf::Any&
mysql_add::HasBitSetters::data(const mysql_add* msg) {
  return *msg->data_;
}
void mysql_add::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_add::kFlagFieldNumber;
const int mysql_add::kTableFieldNumber;
const int mysql_add::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_add::mysql_add()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql.add)
}
mysql_add::mysql_add(const mysql_add& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.mysql.add)
}

void mysql_add::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_add_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&data_)) + sizeof(flag_));
}

mysql_add::~mysql_add() {
  // @@protoc_insertion_point(destructor:s2s.mysql.add)
  SharedDtor();
}

void mysql_add::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void mysql_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_add& mysql_add::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_add_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql_add::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_add::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_add*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.add.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql.add)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.add.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql.add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql.add)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.add.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql.add)
}

::google::protobuf::uint8* mysql_add::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.add.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql.add)
  return target;
}

size_t mysql_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql.add)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_add::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql.add)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_add* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql.add)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql.add)
    MergeFrom(*source);
  }
}

void mysql_add::MergeFrom(const mysql_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql.add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_add::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_add::CopyFrom(const mysql_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_add::IsInitialized() const {
  return true;
}

void mysql_add::Swap(mysql_add* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_add::InternalSwap(mysql_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_add::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_save::InitAsDefaultInstance() {
  ::s2s::_mysql_save_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class mysql_save::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const mysql_save* msg);
};

const ::google::protobuf::Any&
mysql_save::HasBitSetters::data(const mysql_save* msg) {
  return *msg->data_;
}
void mysql_save::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_save::kFlagFieldNumber;
const int mysql_save::kTableFieldNumber;
const int mysql_save::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_save::mysql_save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql.save)
}
mysql_save::mysql_save(const mysql_save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.mysql.save)
}

void mysql_save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_save_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&data_)) + sizeof(flag_));
}

mysql_save::~mysql_save() {
  // @@protoc_insertion_point(destructor:s2s.mysql.save)
  SharedDtor();
}

void mysql_save::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void mysql_save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_save& mysql_save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_save_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql_save::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.save.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql.save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.save.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql.save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql.save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.save.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql.save)
}

::google::protobuf::uint8* mysql_save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.save.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql.save)
  return target;
}

size_t mysql_save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql.save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql.save)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_save* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql.save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql.save)
    MergeFrom(*source);
  }
}

void mysql_save::MergeFrom(const mysql_save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql.save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_save::CopyFrom(const mysql_save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_save::IsInitialized() const {
  return true;
}

void mysql_save::Swap(mysql_save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_save::InternalSwap(mysql_save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_query::InitAsDefaultInstance() {
}
class mysql_query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_query::kFlagFieldNumber;
const int mysql_query::kTableFieldNumber;
const int mysql_query::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_query::mysql_query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql.query)
}
mysql_query::mysql_query(const mysql_query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.mysql.query)
}

void mysql_query::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_query_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
}

mysql_query::~mysql_query() {
  // @@protoc_insertion_point(destructor:s2s.mysql.query)
  SharedDtor();
}

void mysql_query::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_query& mysql_query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_query_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql_query::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.query.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.query.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql.query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.query.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.query.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql.query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.query.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.query.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql.query)
}

::google::protobuf::uint8* mysql_query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.query.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.query.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql.query)
  return target;
}

size_t mysql_query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql.query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql.query)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_query* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql.query)
    MergeFrom(*source);
  }
}

void mysql_query::MergeFrom(const mysql_query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_query::CopyFrom(const mysql_query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_query::IsInitialized() const {
  return true;
}

void mysql_query::Swap(mysql_query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_query::InternalSwap(mysql_query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_remove::InitAsDefaultInstance() {
}
class mysql_remove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_remove::kFlagFieldNumber;
const int mysql_remove::kTableFieldNumber;
const int mysql_remove::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_remove::mysql_remove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql.remove)
}
mysql_remove::mysql_remove(const mysql_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.mysql.remove)
}

void mysql_remove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_remove_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
}

mysql_remove::~mysql_remove() {
  // @@protoc_insertion_point(destructor:s2s.mysql.remove)
  SharedDtor();
}

void mysql_remove::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_remove& mysql_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_remove_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_remove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.remove.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.remove.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql.remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.remove.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.remove.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql.remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql.remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.remove.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.remove.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql.remove)
}

::google::protobuf::uint8* mysql_remove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.remove.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.remove.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql.remove)
  return target;
}

size_t mysql_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql.remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql.remove)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_remove* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_remove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql.remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql.remove)
    MergeFrom(*source);
  }
}

void mysql_remove::MergeFrom(const mysql_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql.remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_remove::CopyFrom(const mysql_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_remove::IsInitialized() const {
  return true;
}

void mysql_remove::Swap(mysql_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_remove::InternalSwap(mysql_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_update::InitAsDefaultInstance() {
}
class mysql_update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_update::kFlagFieldNumber;
const int mysql_update::kTableFieldNumber;
const int mysql_update::kUpdateJsonFieldNumber;
const int mysql_update::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_update::mysql_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql.update)
}
mysql_update::mysql_update(const mysql_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_json().size() > 0) {
    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.mysql.update)
}

void mysql_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_update_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
}

mysql_update::~mysql_update() {
  // @@protoc_insertion_point(destructor:s2s.mysql.update)
  SharedDtor();
}

void mysql_update::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_update& mysql_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_update_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql_update::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.update.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.update.update_json");
        object = msg->mutable_update_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.update.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.update.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update_json().data(), static_cast<int>(this->update_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.update.update_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.update.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.update.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.update.update_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update_json(), output);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.update.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql.update)
}

::google::protobuf::uint8* mysql_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.update.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.update.update_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_json(), target);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.update.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql.update)
  return target;
}

size_t mysql_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update_json());
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql.update)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_update* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql.update)
    MergeFrom(*source);
  }
}

void mysql_update::MergeFrom(const mysql_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.update_json().size() > 0) {

    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_update::CopyFrom(const mysql_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_update::IsInitialized() const {
  return true;
}

void mysql_update::Swap(mysql_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_update::InternalSwap(mysql_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_json_.Swap(&other->update_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_response::InitAsDefaultInstance() {
}
class mysql_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_response::kErrorFieldNumber;
const int mysql_response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_response::mysql_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql.response)
}
mysql_response::mysql_response(const mysql_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.mysql.response)
}

void mysql_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_response_s2s_2eproto.base);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mysql_response::~mysql_response() {
  // @@protoc_insertion_point(destructor:s2s.mysql.response)
  SharedDtor();
}

void mysql_response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_response& mysql_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_response_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql_response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mysql.response.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string jsons = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.mysql.response.jsons");
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.response.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string jsons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jsons()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsons(this->jsons_size() - 1).data(),
            static_cast<int>(this->jsons(this->jsons_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mysql.response.jsons"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // repeated string jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.response.jsons");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql.response)
}

::google::protobuf::uint8* mysql_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // repeated string jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mysql.response.jsons");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql.response)
  return target;
}

size_t mysql_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string jsons = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jsons(i));
  }

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_response* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql.response)
    MergeFrom(*source);
  }
}

void mysql_response::MergeFrom(const mysql_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void mysql_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_response::CopyFrom(const mysql_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_response::IsInitialized() const {
  return true;
}

void mysql_response::Swap(mysql_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_response::InternalSwap(mysql_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mysql_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql::InitAsDefaultInstance() {
}
class mysql::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql::mysql()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mysql)
}
mysql::mysql(const mysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.mysql)
}

void mysql::SharedCtor() {
}

mysql::~mysql() {
  // @@protoc_insertion_point(destructor:s2s.mysql)
  SharedDtor();
}

void mysql::SharedDtor() {
}

void mysql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql& mysql::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_s2s_2eproto.base);
  return *internal_default_instance();
}


void mysql::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mysql)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mysql)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mysql)
}

::google::protobuf::uint8* mysql::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mysql)
  return target;
}

size_t mysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mysql)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mysql)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql* source =
      ::google::protobuf::DynamicCastToGenerated<mysql>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mysql)
    MergeFrom(*source);
  }
}

void mysql::MergeFrom(const mysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql::CopyFrom(const mysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql::IsInitialized() const {
  return true;
}

void mysql::Swap(mysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql::InternalSwap(mysql* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mysql::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_insert::InitAsDefaultInstance() {
}
class mongo_insert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_insert::kTabFieldNumber;
const int mongo_insert::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_insert::mongo_insert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.insert)
}
mongo_insert::mongo_insert(const mongo_insert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.insert)
}

void mongo_insert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_insert_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_insert::~mongo_insert() {
  // @@protoc_insertion_point(destructor:s2s.mongo.insert)
  SharedDtor();
}

void mongo_insert::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_insert& mongo_insert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_insert_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_insert::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_insert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_insert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.insert.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.insert.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.insert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.insert.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.insert.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.insert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.insert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.insert.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.insert.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.insert)
}

::google::protobuf::uint8* mongo_insert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.insert.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.insert.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.insert)
  return target;
}

size_t mongo_insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.insert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_insert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_insert* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.insert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.insert)
    MergeFrom(*source);
  }
}

void mongo_insert::MergeFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void mongo_insert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_insert::CopyFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_insert::IsInitialized() const {
  return true;
}

void mongo_insert::Swap(mongo_insert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_insert::InternalSwap(mongo_insert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_insert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_query_request::InitAsDefaultInstance() {
}
class mongo_query_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_query_request::kTabFieldNumber;
const int mongo_query_request::kJsonFieldNumber;
const int mongo_query_request::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_query_request::mongo_query_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.query.request)
}
mongo_query_request::mongo_query_request(const mongo_query_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.query.request)
}

void mongo_query_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_query_request_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mongo_query_request::~mongo_query_request() {
  // @@protoc_insertion_point(destructor:s2s.mongo.query.request)
  SharedDtor();
}

void mongo_query_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_query_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_query_request& mongo_query_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_query_request_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_query_request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_query_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_query_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.query.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.query.request.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_query_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.query.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.query.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.query.request.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.query.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.query.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_query_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.query.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.query.request.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.query.request)
}

::google::protobuf::uint8* mongo_query_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.query.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.query.request.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.query.request)
  return target;
}

size_t mongo_query_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.query.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_query_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_query_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_query_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.query.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.query.request)
    MergeFrom(*source);
  }
}

void mongo_query_request::MergeFrom(const mongo_query_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mongo_query_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_query_request::CopyFrom(const mongo_query_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_query_request::IsInitialized() const {
  return true;
}

void mongo_query_request::Swap(mongo_query_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_query_request::InternalSwap(mongo_query_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mongo_query_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_query_response::InitAsDefaultInstance() {
}
class mongo_query_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_query_response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_query_response::mongo_query_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.query.response)
}
mongo_query_response::mongo_query_response(const mongo_query_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.query.response)
}

void mongo_query_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_query_response_s2s_2eproto.base);
}

mongo_query_response::~mongo_query_response() {
  // @@protoc_insertion_point(destructor:s2s.mongo.query.response)
  SharedDtor();
}

void mongo_query_response::SharedDtor() {
}

void mongo_query_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_query_response& mongo_query_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_query_response_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_query_response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_query_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_query_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string jsons = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.mongo.query.response.jsons");
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_query_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.query.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string jsons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jsons()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsons(this->jsons_size() - 1).data(),
            static_cast<int>(this->jsons(this->jsons_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.query.response.jsons"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.query.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.query.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_query_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.query.response.jsons");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.query.response)
}

::google::protobuf::uint8* mongo_query_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.query.response.jsons");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.query.response)
  return target;
}

size_t mongo_query_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.query.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string jsons = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jsons(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_query_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_query_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_query_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.query.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.query.response)
    MergeFrom(*source);
  }
}

void mongo_query_response::MergeFrom(const mongo_query_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
}

void mongo_query_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_query_response::CopyFrom(const mongo_query_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_query_response::IsInitialized() const {
  return true;
}

void mongo_query_response::Swap(mongo_query_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_query_response::InternalSwap(mongo_query_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
}

::google::protobuf::Metadata mongo_query_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_query::InitAsDefaultInstance() {
}
class mongo_query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_query::mongo_query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.query)
}
mongo_query::mongo_query(const mongo_query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.query)
}

void mongo_query::SharedCtor() {
}

mongo_query::~mongo_query() {
  // @@protoc_insertion_point(destructor:s2s.mongo.query)
  SharedDtor();
}

void mongo_query::SharedDtor() {
}

void mongo_query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_query& mongo_query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_query_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_query::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.query)
}

::google::protobuf::uint8* mongo_query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.query)
  return target;
}

size_t mongo_query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.query)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_query* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.query)
    MergeFrom(*source);
  }
}

void mongo_query::MergeFrom(const mongo_query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_query::CopyFrom(const mongo_query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_query::IsInitialized() const {
  return true;
}

void mongo_query::Swap(mongo_query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_query::InternalSwap(mongo_query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_remove::InitAsDefaultInstance() {
}
class mongo_remove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_remove::kTabFieldNumber;
const int mongo_remove::kJsonFieldNumber;
const int mongo_remove::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_remove::mongo_remove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.remove)
}
mongo_remove::mongo_remove(const mongo_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.remove)
}

void mongo_remove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_remove_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mongo_remove::~mongo_remove() {
  // @@protoc_insertion_point(destructor:s2s.mongo.remove)
  SharedDtor();
}

void mongo_remove::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_remove& mongo_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_remove_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_remove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.remove.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.remove.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.remove.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.remove.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.remove.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.remove.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.remove)
}

::google::protobuf::uint8* mongo_remove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.remove.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.remove.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.remove)
  return target;
}

size_t mongo_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_remove* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_remove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.remove)
    MergeFrom(*source);
  }
}

void mongo_remove::MergeFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mongo_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_remove::CopyFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_remove::IsInitialized() const {
  return true;
}

void mongo_remove::Swap(mongo_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_remove::InternalSwap(mongo_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mongo_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_update::InitAsDefaultInstance() {
}
class mongo_update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_update::kTabFieldNumber;
const int mongo_update::kSelectFieldNumber;
const int mongo_update::kUpdateFieldNumber;
const int mongo_update::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_update::mongo_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.update)
}
mongo_update::mongo_update(const mongo_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  select_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.select().size() > 0) {
    select_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.select_);
  }
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update().size() > 0) {
    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.update)
}

void mongo_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_update_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_update::~mongo_update() {
  // @@protoc_insertion_point(destructor:s2s.mongo.update)
  SharedDtor();
}

void mongo_update::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_update& mongo_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_update_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_update::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.update.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string select = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.update.select");
        object = msg->mutable_select();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.update.update");
        object = msg->mutable_update();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string tag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.update.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.update.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string select = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_select()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->select().data(), static_cast<int>(this->select().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.update.select"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update().data(), static_cast<int>(this->update().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.update.update"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.update.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string select = 2;
  if (this->select().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select().data(), static_cast<int>(this->select().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.select");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->select(), output);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.update");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update(), output);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.update)
}

::google::protobuf::uint8* mongo_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string select = 2;
  if (this->select().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select().data(), static_cast<int>(this->select().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.select");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->select(), target);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.update");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update(), target);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.update.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.update)
  return target;
}

size_t mongo_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string select = 2;
  if (this->select().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->select());
  }

  // string update = 3;
  if (this->update().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update());
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_update* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.update)
    MergeFrom(*source);
  }
}

void mongo_update::MergeFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.select().size() > 0) {

    select_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.select_);
  }
  if (from.update().size() > 0) {

    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void mongo_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_update::CopyFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_update::IsInitialized() const {
  return true;
}

void mongo_update::Swap(mongo_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_update::InternalSwap(mongo_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  select_.Swap(&other->select_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_.Swap(&other->update_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_add_counter_request::InitAsDefaultInstance() {
}
class mongo_add_counter_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_add_counter_request::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_add_counter_request::mongo_add_counter_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.add_counter.request)
}
mongo_add_counter_request::mongo_add_counter_request(const mongo_add_counter_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.add_counter.request)
}

void mongo_add_counter_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_add_counter_request_s2s_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_add_counter_request::~mongo_add_counter_request() {
  // @@protoc_insertion_point(destructor:s2s.mongo.add_counter.request)
  SharedDtor();
}

void mongo_add_counter_request::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_add_counter_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_add_counter_request& mongo_add_counter_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_add_counter_request_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_add_counter_request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.add_counter.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_add_counter_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_add_counter_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.mongo.add_counter.request.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_add_counter_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.add_counter.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.mongo.add_counter.request.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.add_counter.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.add_counter.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_add_counter_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.add_counter.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.add_counter.request.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.add_counter.request)
}

::google::protobuf::uint8* mongo_add_counter_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.add_counter.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.mongo.add_counter.request.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.add_counter.request)
  return target;
}

size_t mongo_add_counter_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.add_counter.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_add_counter_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.add_counter.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_add_counter_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_add_counter_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.add_counter.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.add_counter.request)
    MergeFrom(*source);
  }
}

void mongo_add_counter_request::MergeFrom(const mongo_add_counter_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.add_counter.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void mongo_add_counter_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.add_counter.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_add_counter_request::CopyFrom(const mongo_add_counter_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.add_counter.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_add_counter_request::IsInitialized() const {
  return true;
}

void mongo_add_counter_request::Swap(mongo_add_counter_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_add_counter_request::InternalSwap(mongo_add_counter_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_add_counter_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_add_counter_response::InitAsDefaultInstance() {
}
class mongo_add_counter_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_add_counter_response::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_add_counter_response::mongo_add_counter_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.add_counter.response)
}
mongo_add_counter_response::mongo_add_counter_response(const mongo_add_counter_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.add_counter.response)
}

void mongo_add_counter_response::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

mongo_add_counter_response::~mongo_add_counter_response() {
  // @@protoc_insertion_point(destructor:s2s.mongo.add_counter.response)
  SharedDtor();
}

void mongo_add_counter_response::SharedDtor() {
}

void mongo_add_counter_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_add_counter_response& mongo_add_counter_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_add_counter_response_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_add_counter_response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.add_counter.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_add_counter_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_add_counter_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_add_counter_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.add_counter.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.add_counter.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.add_counter.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_add_counter_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.add_counter.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.add_counter.response)
}

::google::protobuf::uint8* mongo_add_counter_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.add_counter.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.add_counter.response)
  return target;
}

size_t mongo_add_counter_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.add_counter.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_add_counter_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.add_counter.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_add_counter_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_add_counter_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.add_counter.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.add_counter.response)
    MergeFrom(*source);
  }
}

void mongo_add_counter_response::MergeFrom(const mongo_add_counter_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.add_counter.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void mongo_add_counter_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.add_counter.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_add_counter_response::CopyFrom(const mongo_add_counter_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.add_counter.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_add_counter_response::IsInitialized() const {
  return true;
}

void mongo_add_counter_response::Swap(mongo_add_counter_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_add_counter_response::InternalSwap(mongo_add_counter_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata mongo_add_counter_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_add_counter::InitAsDefaultInstance() {
}
class mongo_add_counter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_add_counter::mongo_add_counter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo.add_counter)
}
mongo_add_counter::mongo_add_counter(const mongo_add_counter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.mongo.add_counter)
}

void mongo_add_counter::SharedCtor() {
}

mongo_add_counter::~mongo_add_counter() {
  // @@protoc_insertion_point(destructor:s2s.mongo.add_counter)
  SharedDtor();
}

void mongo_add_counter::SharedDtor() {
}

void mongo_add_counter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_add_counter& mongo_add_counter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_add_counter_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo_add_counter::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo.add_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_add_counter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_add_counter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_add_counter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo.add_counter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo.add_counter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo.add_counter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_add_counter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo.add_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo.add_counter)
}

::google::protobuf::uint8* mongo_add_counter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo.add_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo.add_counter)
  return target;
}

size_t mongo_add_counter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo.add_counter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_add_counter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo.add_counter)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_add_counter* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_add_counter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo.add_counter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo.add_counter)
    MergeFrom(*source);
  }
}

void mongo_add_counter::MergeFrom(const mongo_add_counter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo.add_counter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_add_counter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo.add_counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_add_counter::CopyFrom(const mongo_add_counter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo.add_counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_add_counter::IsInitialized() const {
  return true;
}

void mongo_add_counter::Swap(mongo_add_counter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_add_counter::InternalSwap(mongo_add_counter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_add_counter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo::InitAsDefaultInstance() {
}
class mongo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo::mongo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.mongo)
}
mongo::mongo(const mongo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.mongo)
}

void mongo::SharedCtor() {
}

mongo::~mongo() {
  // @@protoc_insertion_point(destructor:s2s.mongo)
  SharedDtor();
}

void mongo::SharedDtor() {
}

void mongo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo& mongo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_s2s_2eproto.base);
  return *internal_default_instance();
}


void mongo::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.mongo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.mongo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.mongo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.mongo)
}

::google::protobuf::uint8* mongo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.mongo)
  return target;
}

size_t mongo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.mongo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo* source =
      ::google::protobuf::DynamicCastToGenerated<mongo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.mongo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.mongo)
    MergeFrom(*source);
  }
}

void mongo::MergeFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo::CopyFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo::IsInitialized() const {
  return true;
}

void mongo::Swap(mongo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo::InternalSwap(mongo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void allot_response::InitAsDefaultInstance() {
}
class allot_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allot_response::kTokenFieldNumber;
const int allot_response::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allot_response::allot_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.allot.response)
}
allot_response::allot_response(const allot_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.allot.response)
}

void allot_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_allot_response_s2s_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

allot_response::~allot_response() {
  // @@protoc_insertion_point(destructor:s2s.allot.response)
  SharedDtor();
}

void allot_response::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void allot_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allot_response& allot_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_allot_response_s2s_2eproto.base);
  return *internal_default_instance();
}


void allot_response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.allot.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* allot_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<allot_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.allot.response.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.allot.response.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool allot_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.allot.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.allot.response.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.allot.response.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.allot.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.allot.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void allot_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.allot.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.response.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.response.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.allot.response)
}

::google::protobuf::uint8* allot_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.allot.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.response.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.response.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.allot.response)
  return target;
}

size_t allot_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.allot.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allot_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.allot.response)
  GOOGLE_DCHECK_NE(&from, this);
  const allot_response* source =
      ::google::protobuf::DynamicCastToGenerated<allot_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.allot.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.allot.response)
    MergeFrom(*source);
  }
}

void allot_response::MergeFrom(const allot_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.allot.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void allot_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.allot.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allot_response::CopyFrom(const allot_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.allot.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allot_response::IsInitialized() const {
  return true;
}

void allot_response::Swap(allot_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allot_response::InternalSwap(allot_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata allot_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void allot_save::InitAsDefaultInstance() {
}
class allot_save::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allot_save::kServiceFieldNumber;
const int allot_save::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allot_save::allot_save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.allot.save)
}
allot_save::allot_save(const allot_save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.allot.save)
}

void allot_save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_allot_save_s2s_2eproto.base);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

allot_save::~allot_save() {
  // @@protoc_insertion_point(destructor:s2s.allot.save)
  SharedDtor();
}

void allot_save::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void allot_save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allot_save& allot_save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_allot_save_s2s_2eproto.base);
  return *internal_default_instance();
}


void allot_save::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.allot.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* allot_save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<allot_save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string service = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.allot.save.service");
        object = msg->mutable_service();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.allot.save.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool allot_save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.allot.save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), static_cast<int>(this->service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.allot.save.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.allot.save.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.allot.save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.allot.save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void allot_save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.allot.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.allot.save)
}

::google::protobuf::uint8* allot_save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.allot.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.allot.save)
  return target;
}

size_t allot_save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.allot.save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allot_save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.allot.save)
  GOOGLE_DCHECK_NE(&from, this);
  const allot_save* source =
      ::google::protobuf::DynamicCastToGenerated<allot_save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.allot.save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.allot.save)
    MergeFrom(*source);
  }
}

void allot_save::MergeFrom(const allot_save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.allot.save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void allot_save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.allot.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allot_save::CopyFrom(const allot_save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.allot.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allot_save::IsInitialized() const {
  return true;
}

void allot_save::Swap(allot_save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allot_save::InternalSwap(allot_save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata allot_save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void allot::InitAsDefaultInstance() {
}
class allot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allot::allot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.allot)
}
allot::allot(const allot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.allot)
}

void allot::SharedCtor() {
}

allot::~allot() {
  // @@protoc_insertion_point(destructor:s2s.allot)
  SharedDtor();
}

void allot::SharedDtor() {
}

void allot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allot& allot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_allot_s2s_2eproto.base);
  return *internal_default_instance();
}


void allot::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* allot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<allot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool allot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.allot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.allot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.allot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void allot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.allot)
}

::google::protobuf::uint8* allot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.allot)
  return target;
}

size_t allot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.allot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.allot)
  GOOGLE_DCHECK_NE(&from, this);
  const allot* source =
      ::google::protobuf::DynamicCastToGenerated<allot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.allot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.allot)
    MergeFrom(*source);
  }
}

void allot::MergeFrom(const allot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.allot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void allot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.allot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allot::CopyFrom(const allot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.allot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allot::IsInitialized() const {
  return true;
}

void allot::Swap(allot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allot::InternalSwap(allot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata allot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void broadcast_request::InitAsDefaultInstance() {
  ::s2s::_broadcast_request_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class broadcast_request::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const broadcast_request* msg);
};

const ::google::protobuf::Any&
broadcast_request::HasBitSetters::data(const broadcast_request* msg) {
  return *msg->data_;
}
void broadcast_request::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int broadcast_request::kFuncFieldNumber;
const int broadcast_request::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

broadcast_request::broadcast_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.broadcast.request)
}
broadcast_request::broadcast_request(const broadcast_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.func().size() > 0) {
    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:s2s.broadcast.request)
}

void broadcast_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_broadcast_request_s2s_2eproto.base);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

broadcast_request::~broadcast_request() {
  // @@protoc_insertion_point(destructor:s2s.broadcast.request)
  SharedDtor();
}

void broadcast_request::SharedDtor() {
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void broadcast_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const broadcast_request& broadcast_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_broadcast_request_s2s_2eproto.base);
  return *internal_default_instance();
}


void broadcast_request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.broadcast.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* broadcast_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<broadcast_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string func = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.broadcast.request.func");
        object = msg->mutable_func();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool broadcast_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.broadcast.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string func = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->func().data(), static_cast<int>(this->func().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.broadcast.request.func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.broadcast.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.broadcast.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void broadcast_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.broadcast.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.broadcast.request.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->func(), output);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.broadcast.request)
}

::google::protobuf::uint8* broadcast_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.broadcast.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.broadcast.request.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.broadcast.request)
  return target;
}

size_t broadcast_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.broadcast.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void broadcast_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.broadcast.request)
  GOOGLE_DCHECK_NE(&from, this);
  const broadcast_request* source =
      ::google::protobuf::DynamicCastToGenerated<broadcast_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.broadcast.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.broadcast.request)
    MergeFrom(*source);
  }
}

void broadcast_request::MergeFrom(const broadcast_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.broadcast.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.func().size() > 0) {

    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
}

void broadcast_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.broadcast.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_request::CopyFrom(const broadcast_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.broadcast.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_request::IsInitialized() const {
  return true;
}

void broadcast_request::Swap(broadcast_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void broadcast_request::InternalSwap(broadcast_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  func_.Swap(&other->func_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::google::protobuf::Metadata broadcast_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void broadcast_response::InitAsDefaultInstance() {
}
class broadcast_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int broadcast_response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

broadcast_response::broadcast_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.broadcast.response)
}
broadcast_response::broadcast_response(const broadcast_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:s2s.broadcast.response)
}

void broadcast_response::SharedCtor() {
  count_ = 0;
}

broadcast_response::~broadcast_response() {
  // @@protoc_insertion_point(destructor:s2s.broadcast.response)
  SharedDtor();
}

void broadcast_response::SharedDtor() {
}

void broadcast_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const broadcast_response& broadcast_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_broadcast_response_s2s_2eproto.base);
  return *internal_default_instance();
}


void broadcast_response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.broadcast.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* broadcast_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<broadcast_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool broadcast_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.broadcast.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.broadcast.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.broadcast.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void broadcast_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.broadcast.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.broadcast.response)
}

::google::protobuf::uint8* broadcast_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.broadcast.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.broadcast.response)
  return target;
}

size_t broadcast_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.broadcast.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void broadcast_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.broadcast.response)
  GOOGLE_DCHECK_NE(&from, this);
  const broadcast_response* source =
      ::google::protobuf::DynamicCastToGenerated<broadcast_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.broadcast.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.broadcast.response)
    MergeFrom(*source);
  }
}

void broadcast_response::MergeFrom(const broadcast_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.broadcast.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void broadcast_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.broadcast.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_response::CopyFrom(const broadcast_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.broadcast.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_response::IsInitialized() const {
  return true;
}

void broadcast_response::Swap(broadcast_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void broadcast_response::InternalSwap(broadcast_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata broadcast_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void broadcast::InitAsDefaultInstance() {
}
class broadcast::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

broadcast::broadcast()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.broadcast)
}
broadcast::broadcast(const broadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.broadcast)
}

void broadcast::SharedCtor() {
}

broadcast::~broadcast() {
  // @@protoc_insertion_point(destructor:s2s.broadcast)
  SharedDtor();
}

void broadcast::SharedDtor() {
}

void broadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const broadcast& broadcast::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_broadcast_s2s_2eproto.base);
  return *internal_default_instance();
}


void broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* broadcast::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<broadcast*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.broadcast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.broadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.broadcast)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.broadcast)
}

::google::protobuf::uint8* broadcast::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.broadcast)
  return target;
}

size_t broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.broadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void broadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const broadcast* source =
      ::google::protobuf::DynamicCastToGenerated<broadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.broadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.broadcast)
    MergeFrom(*source);
  }
}

void broadcast::MergeFrom(const broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void broadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast::CopyFrom(const broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast::IsInitialized() const {
  return true;
}

void broadcast::Swap(broadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void broadcast::InternalSwap(broadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata broadcast::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void client_call::InitAsDefaultInstance() {
  ::s2s::_client_call_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class client_call::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const client_call* msg);
};

const ::google::protobuf::Any&
client_call::HasBitSetters::data(const client_call* msg) {
  return *msg->data_;
}
void client_call::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int client_call::kFuncFieldNumber;
const int client_call::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

client_call::client_call()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.client.call)
}
client_call::client_call(const client_call& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.func().size() > 0) {
    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:s2s.client.call)
}

void client_call::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_client_call_s2s_2eproto.base);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

client_call::~client_call() {
  // @@protoc_insertion_point(destructor:s2s.client.call)
  SharedDtor();
}

void client_call::SharedDtor() {
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void client_call::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const client_call& client_call::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_client_call_s2s_2eproto.base);
  return *internal_default_instance();
}


void client_call::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.client.call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* client_call::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<client_call*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string func = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.client.call.func");
        object = msg->mutable_func();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool client_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.client.call)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string func = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->func().data(), static_cast<int>(this->func().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.client.call.func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.client.call)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.client.call)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void client_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.client.call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.client.call.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->func(), output);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.client.call)
}

::google::protobuf::uint8* client_call::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.client.call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.client.call.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.client.call)
  return target;
}

size_t client_call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.client.call)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void client_call::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.client.call)
  GOOGLE_DCHECK_NE(&from, this);
  const client_call* source =
      ::google::protobuf::DynamicCastToGenerated<client_call>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.client.call)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.client.call)
    MergeFrom(*source);
  }
}

void client_call::MergeFrom(const client_call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.client.call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.func().size() > 0) {

    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
}

void client_call::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.client.call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_call::CopyFrom(const client_call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.client.call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_call::IsInitialized() const {
  return true;
}

void client_call::Swap(client_call* other) {
  if (other == this) return;
  InternalSwap(other);
}
void client_call::InternalSwap(client_call* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  func_.Swap(&other->func_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::google::protobuf::Metadata client_call::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void client::InitAsDefaultInstance() {
}
class client::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

client::client()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.client)
}
client::client(const client& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.client)
}

void client::SharedCtor() {
}

client::~client() {
  // @@protoc_insertion_point(destructor:s2s.client)
  SharedDtor();
}

void client::SharedDtor() {
}

void client::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const client& client::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_client_s2s_2eproto.base);
  return *internal_default_instance();
}


void client::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.client)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* client::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<client*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.client)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.client)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.client)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.client)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.client)
}

::google::protobuf::uint8* client::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.client)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.client)
  return target;
}

size_t client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.client)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void client::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.client)
  GOOGLE_DCHECK_NE(&from, this);
  const client* source =
      ::google::protobuf::DynamicCastToGenerated<client>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.client)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.client)
    MergeFrom(*source);
  }
}

void client::MergeFrom(const client& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.client)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void client::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client::CopyFrom(const client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client::IsInitialized() const {
  return true;
}

void client::Swap(client* other) {
  if (other == this) return;
  InternalSwap(other);
}
void client::InternalSwap(client* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata client::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace s2s
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::s2s::mysql_create* Arena::CreateMaybeMessage< ::s2s::mysql_create >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql_create >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mysql_add* Arena::CreateMaybeMessage< ::s2s::mysql_add >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql_add >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mysql_save* Arena::CreateMaybeMessage< ::s2s::mysql_save >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql_save >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mysql_query* Arena::CreateMaybeMessage< ::s2s::mysql_query >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql_query >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mysql_remove* Arena::CreateMaybeMessage< ::s2s::mysql_remove >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mysql_update* Arena::CreateMaybeMessage< ::s2s::mysql_update >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql_update >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mysql_response* Arena::CreateMaybeMessage< ::s2s::mysql_response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql_response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mysql* Arena::CreateMaybeMessage< ::s2s::mysql >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mysql >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_insert* Arena::CreateMaybeMessage< ::s2s::mongo_insert >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_insert >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_query_request* Arena::CreateMaybeMessage< ::s2s::mongo_query_request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_query_request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_query_response* Arena::CreateMaybeMessage< ::s2s::mongo_query_response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_query_response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_query* Arena::CreateMaybeMessage< ::s2s::mongo_query >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_query >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_remove* Arena::CreateMaybeMessage< ::s2s::mongo_remove >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_update* Arena::CreateMaybeMessage< ::s2s::mongo_update >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_update >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_add_counter_request* Arena::CreateMaybeMessage< ::s2s::mongo_add_counter_request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_add_counter_request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_add_counter_response* Arena::CreateMaybeMessage< ::s2s::mongo_add_counter_response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_add_counter_response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo_add_counter* Arena::CreateMaybeMessage< ::s2s::mongo_add_counter >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo_add_counter >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::mongo* Arena::CreateMaybeMessage< ::s2s::mongo >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::mongo >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::allot_response* Arena::CreateMaybeMessage< ::s2s::allot_response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::allot_response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::allot_save* Arena::CreateMaybeMessage< ::s2s::allot_save >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::allot_save >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::allot* Arena::CreateMaybeMessage< ::s2s::allot >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::allot >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::broadcast_request* Arena::CreateMaybeMessage< ::s2s::broadcast_request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::broadcast_request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::broadcast_response* Arena::CreateMaybeMessage< ::s2s::broadcast_response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::broadcast_response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::broadcast* Arena::CreateMaybeMessage< ::s2s::broadcast >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::broadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::client_call* Arena::CreateMaybeMessage< ::s2s::client_call >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::client_call >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::client* Arena::CreateMaybeMessage< ::s2s::client >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::client >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
