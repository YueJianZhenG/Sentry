// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#include "s2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace s2s {
class Mysql_CreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql_Create> _instance;
} _Mysql_Create_default_instance_;
class Mysql_AddDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql_Add> _instance;
} _Mysql_Add_default_instance_;
class Mysql_SaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql_Save> _instance;
} _Mysql_Save_default_instance_;
class Mysql_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql_Query> _instance;
} _Mysql_Query_default_instance_;
class Mysql_DeleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql_Delete> _instance;
} _Mysql_Delete_default_instance_;
class Mysql_UpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql_Update> _instance;
} _Mysql_Update_default_instance_;
class Mysql_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql_Response> _instance;
} _Mysql_Response_default_instance_;
class MysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mysql> _instance;
} _Mysql_default_instance_;
class Mongo_InsertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_Insert> _instance;
} _Mongo_Insert_default_instance_;
class Mongo_Query_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_Query_Request> _instance;
} _Mongo_Query_Request_default_instance_;
class Mongo_Query_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_Query_Response> _instance;
} _Mongo_Query_Response_default_instance_;
class Mongo_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_Query> _instance;
} _Mongo_Query_default_instance_;
class Mongo_DeleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_Delete> _instance;
} _Mongo_Delete_default_instance_;
class Mongo_UpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_Update> _instance;
} _Mongo_Update_default_instance_;
class Mongo_AddCounter_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_AddCounter_Request> _instance;
} _Mongo_AddCounter_Request_default_instance_;
class Mongo_AddCounter_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_AddCounter_Response> _instance;
} _Mongo_AddCounter_Response_default_instance_;
class Mongo_AddCounterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo_AddCounter> _instance;
} _Mongo_AddCounter_default_instance_;
class MongoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mongo> _instance;
} _Mongo_default_instance_;
class Allot_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Allot_Response> _instance;
} _Allot_Response_default_instance_;
class Allot_SaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Allot_Save> _instance;
} _Allot_Save_default_instance_;
class AllotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Allot> _instance;
} _Allot_default_instance_;
class GateBroadCast_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GateBroadCast_Request> _instance;
} _GateBroadCast_Request_default_instance_;
class GateBroadCast_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GateBroadCast_Response> _instance;
} _GateBroadCast_Response_default_instance_;
class GateBroadCastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GateBroadCast> _instance;
} _GateBroadCast_default_instance_;
class CallClient_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CallClient_Request> _instance;
} _CallClient_Request_default_instance_;
class CallClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CallClient> _instance;
} _CallClient_default_instance_;
}  // namespace s2s
static void InitDefaultsMysql_Create_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_Create_default_instance_;
    new (ptr) ::s2s::Mysql_Create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql_Create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mysql_Create_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysql_Create_s2s_2eproto}, {}};

static void InitDefaultsMysql_Add_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_Add_default_instance_;
    new (ptr) ::s2s::Mysql_Add();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql_Add::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Mysql_Add_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMysql_Add_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsMysql_Save_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_Save_default_instance_;
    new (ptr) ::s2s::Mysql_Save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql_Save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Mysql_Save_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMysql_Save_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsMysql_Query_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_Query_default_instance_;
    new (ptr) ::s2s::Mysql_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mysql_Query_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysql_Query_s2s_2eproto}, {}};

static void InitDefaultsMysql_Delete_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_Delete_default_instance_;
    new (ptr) ::s2s::Mysql_Delete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql_Delete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mysql_Delete_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysql_Delete_s2s_2eproto}, {}};

static void InitDefaultsMysql_Update_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_Update_default_instance_;
    new (ptr) ::s2s::Mysql_Update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql_Update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mysql_Update_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysql_Update_s2s_2eproto}, {}};

static void InitDefaultsMysql_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_Response_default_instance_;
    new (ptr) ::s2s::Mysql_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mysql_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysql_Response_s2s_2eproto}, {}};

static void InitDefaultsMysql_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mysql_default_instance_;
    new (ptr) ::s2s::Mysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mysql::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mysql_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysql_s2s_2eproto}, {}};

static void InitDefaultsMongo_Insert_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_Insert_default_instance_;
    new (ptr) ::s2s::Mongo_Insert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_Insert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_Insert_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_Insert_s2s_2eproto}, {}};

static void InitDefaultsMongo_Query_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_Query_Request_default_instance_;
    new (ptr) ::s2s::Mongo_Query_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_Query_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_Query_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_Query_Request_s2s_2eproto}, {}};

static void InitDefaultsMongo_Query_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_Query_Response_default_instance_;
    new (ptr) ::s2s::Mongo_Query_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_Query_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_Query_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_Query_Response_s2s_2eproto}, {}};

static void InitDefaultsMongo_Query_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_Query_default_instance_;
    new (ptr) ::s2s::Mongo_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_Query_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_Query_s2s_2eproto}, {}};

static void InitDefaultsMongo_Delete_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_Delete_default_instance_;
    new (ptr) ::s2s::Mongo_Delete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_Delete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_Delete_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_Delete_s2s_2eproto}, {}};

static void InitDefaultsMongo_Update_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_Update_default_instance_;
    new (ptr) ::s2s::Mongo_Update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_Update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_Update_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_Update_s2s_2eproto}, {}};

static void InitDefaultsMongo_AddCounter_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_AddCounter_Request_default_instance_;
    new (ptr) ::s2s::Mongo_AddCounter_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_AddCounter_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_AddCounter_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_AddCounter_Request_s2s_2eproto}, {}};

static void InitDefaultsMongo_AddCounter_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_AddCounter_Response_default_instance_;
    new (ptr) ::s2s::Mongo_AddCounter_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_AddCounter_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_AddCounter_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_AddCounter_Response_s2s_2eproto}, {}};

static void InitDefaultsMongo_AddCounter_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_AddCounter_default_instance_;
    new (ptr) ::s2s::Mongo_AddCounter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo_AddCounter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_AddCounter_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_AddCounter_s2s_2eproto}, {}};

static void InitDefaultsMongo_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Mongo_default_instance_;
    new (ptr) ::s2s::Mongo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Mongo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mongo_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongo_s2s_2eproto}, {}};

static void InitDefaultsAllot_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Allot_Response_default_instance_;
    new (ptr) ::s2s::Allot_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Allot_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Allot_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllot_Response_s2s_2eproto}, {}};

static void InitDefaultsAllot_Save_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Allot_Save_default_instance_;
    new (ptr) ::s2s::Allot_Save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Allot_Save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Allot_Save_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllot_Save_s2s_2eproto}, {}};

static void InitDefaultsAllot_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_Allot_default_instance_;
    new (ptr) ::s2s::Allot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::Allot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Allot_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllot_s2s_2eproto}, {}};

static void InitDefaultsGateBroadCast_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_GateBroadCast_Request_default_instance_;
    new (ptr) ::s2s::GateBroadCast_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::GateBroadCast_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GateBroadCast_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGateBroadCast_Request_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsGateBroadCast_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_GateBroadCast_Response_default_instance_;
    new (ptr) ::s2s::GateBroadCast_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::GateBroadCast_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GateBroadCast_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGateBroadCast_Response_s2s_2eproto}, {}};

static void InitDefaultsGateBroadCast_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_GateBroadCast_default_instance_;
    new (ptr) ::s2s::GateBroadCast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::GateBroadCast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GateBroadCast_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGateBroadCast_s2s_2eproto}, {}};

static void InitDefaultsCallClient_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_CallClient_Request_default_instance_;
    new (ptr) ::s2s::CallClient_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::CallClient_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CallClient_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCallClient_Request_s2s_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsCallClient_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_CallClient_default_instance_;
    new (ptr) ::s2s::CallClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::CallClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CallClient_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCallClient_s2s_2eproto}, {}};

void InitDefaults_s2s_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_Create_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_Add_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_Save_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_Query_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_Delete_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_Update_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mysql_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_Insert_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_Query_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_Query_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_Query_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_Delete_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_Update_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_AddCounter_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_AddCounter_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_AddCounter_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mongo_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Allot_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Allot_Save_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Allot_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GateBroadCast_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GateBroadCast_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GateBroadCast_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CallClient_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CallClient_s2s_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_s2s_2eproto[26];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_s2s_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_s2s_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_s2s_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Create, db_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Create, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Create, proto_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Create, keys_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Create, indexs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Add, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Add, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Add, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Save, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Save, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Save, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Query, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Query, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Query, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Delete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Delete, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Delete, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Delete, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Update, flag_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Update, table_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Update, update_json_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Update, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Response, error_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql_Response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Insert, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Insert, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Query_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Query_Request, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Query_Request, json_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Query_Request, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Query_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Query_Response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Delete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Delete, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Delete, json_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Delete, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Update, tab_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Update, select_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Update, update_),
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_Update, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_AddCounter_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_AddCounter_Request, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_AddCounter_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_AddCounter_Response, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo_AddCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Mongo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Allot_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Allot_Response, token_),
  PROTOBUF_FIELD_OFFSET(::s2s::Allot_Response, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Allot_Save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::Allot_Save, service_),
  PROTOBUF_FIELD_OFFSET(::s2s::Allot_Save, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::Allot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::GateBroadCast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::GateBroadCast_Request, func_),
  PROTOBUF_FIELD_OFFSET(::s2s::GateBroadCast_Request, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::GateBroadCast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::GateBroadCast_Response, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::GateBroadCast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::CallClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::CallClient_Request, func_),
  PROTOBUF_FIELD_OFFSET(::s2s::CallClient_Request, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::CallClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::s2s::Mysql_Create)},
  { 10, -1, sizeof(::s2s::Mysql_Add)},
  { 18, -1, sizeof(::s2s::Mysql_Save)},
  { 26, -1, sizeof(::s2s::Mysql_Query)},
  { 34, -1, sizeof(::s2s::Mysql_Delete)},
  { 42, -1, sizeof(::s2s::Mysql_Update)},
  { 51, -1, sizeof(::s2s::Mysql_Response)},
  { 58, -1, sizeof(::s2s::Mysql)},
  { 63, -1, sizeof(::s2s::Mongo_Insert)},
  { 70, -1, sizeof(::s2s::Mongo_Query_Request)},
  { 78, -1, sizeof(::s2s::Mongo_Query_Response)},
  { 84, -1, sizeof(::s2s::Mongo_Query)},
  { 89, -1, sizeof(::s2s::Mongo_Delete)},
  { 97, -1, sizeof(::s2s::Mongo_Update)},
  { 106, -1, sizeof(::s2s::Mongo_AddCounter_Request)},
  { 112, -1, sizeof(::s2s::Mongo_AddCounter_Response)},
  { 118, -1, sizeof(::s2s::Mongo_AddCounter)},
  { 123, -1, sizeof(::s2s::Mongo)},
  { 128, -1, sizeof(::s2s::Allot_Response)},
  { 135, -1, sizeof(::s2s::Allot_Save)},
  { 142, -1, sizeof(::s2s::Allot)},
  { 147, -1, sizeof(::s2s::GateBroadCast_Request)},
  { 154, -1, sizeof(::s2s::GateBroadCast_Response)},
  { 160, -1, sizeof(::s2s::GateBroadCast)},
  { 165, -1, sizeof(::s2s::CallClient_Request)},
  { 172, -1, sizeof(::s2s::CallClient)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_Create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_Add_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_Save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_Delete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mysql_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_Insert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_Query_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_Query_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_Delete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_AddCounter_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_AddCounter_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_AddCounter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Mongo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Allot_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Allot_Save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_Allot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_GateBroadCast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_GateBroadCast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_GateBroadCast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_CallClient_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_CallClient_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_s2s_2eproto = {
  {}, AddDescriptors_s2s_2eproto, "s2s.proto", schemas,
  file_default_instances, TableStruct_s2s_2eproto::offsets,
  file_level_metadata_s2s_2eproto, 26, file_level_enum_descriptors_s2s_2eproto, file_level_service_descriptors_s2s_2eproto,
};

const char descriptor_table_protodef_s2s_2eproto[] =
  "\n\ts2s.proto\022\003s2s\032\031google/protobuf/any.pr"
  "oto\"\327\003\n\005Mysql\032N\n\006Create\022\n\n\002db\030\001 \001(\t\022\013\n\003t"
  "ab\030\002 \001(\t\022\r\n\005proto\030\003 \001(\t\022\014\n\004keys\030\004 \003(\t\022\016\n"
  "\006indexs\030\005 \003(\t\032F\n\003Add\022\014\n\004flag\030\001 \001(\003\022\r\n\005ta"
  "ble\030\002 \001(\t\022\"\n\004data\030\003 \001(\0132\024.google.protobu"
  "f.Any\032G\n\004Save\022\014\n\004flag\030\001 \001(\003\022\r\n\005table\030\002 \001"
  "(\t\022\"\n\004data\030\003 \001(\0132\024.google.protobuf.Any\0328"
  "\n\005Query\022\014\n\004flag\030\001 \001(\003\022\r\n\005table\030\002 \001(\t\022\022\n\n"
  "where_json\030\003 \001(\t\0329\n\006Delete\022\014\n\004flag\030\001 \001(\003"
  "\022\r\n\005table\030\002 \001(\t\022\022\n\nwhere_json\030\003 \001(\t\032N\n\006U"
  "pdate\022\014\n\004flag\030\001 \001(\003\022\r\n\005table\030\002 \001(\t\022\023\n\013up"
  "date_json\030\003 \001(\t\022\022\n\nwhere_json\030\004 \001(\t\032(\n\010R"
  "esponse\022\r\n\005error\030\001 \001(\t\022\r\n\005jsons\030\002 \003(\t\"\276\002"
  "\n\005Mongo\032#\n\006Insert\022\013\n\003tab\030\001 \001(\t\022\014\n\004json\030\002"
  " \001(\t\032W\n\005Query\0323\n\007Request\022\013\n\003tab\030\001 \001(\t\022\014\n"
  "\004json\030\002 \001(\t\022\r\n\005limit\030\003 \001(\005\032\031\n\010Response\022\r"
  "\n\005jsons\030\001 \003(\t\0322\n\006Delete\022\013\n\003tab\030\001 \001(\t\022\014\n\004"
  "json\030\002 \001(\t\022\r\n\005limit\030\003 \001(\005\032B\n\006Update\022\013\n\003t"
  "ab\030\001 \001(\t\022\016\n\006select\030\002 \001(\t\022\016\n\006update\030\003 \001(\t"
  "\022\013\n\003tag\030\004 \001(\t\032\?\n\nAddCounter\032\026\n\007Request\022\013"
  "\n\003key\030\001 \001(\t\032\031\n\010Response\022\r\n\005value\030\001 \001(\003\"]"
  "\n\005Allot\032*\n\010Response\022\r\n\005token\030\001 \001(\t\022\017\n\007ad"
  "dress\030\002 \001(\t\032(\n\004Save\022\017\n\007service\030\001 \001(\t\022\017\n\007"
  "address\030\002 \001(\t\"g\n\rGateBroadCast\032;\n\007Reques"
  "t\022\014\n\004func\030\001 \001(\t\022\"\n\004data\030\002 \001(\0132\024.google.p"
  "rotobuf.Any\032\031\n\010Response\022\r\n\005count\030\001 \001(\005\"I"
  "\n\nCallClient\032;\n\007Request\022\014\n\004func\030\001 \001(\t\022\"\n"
  "\004data\030\002 \001(\0132\024.google.protobuf.Anyb\006proto"
  "3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_s2s_2eproto = {
  false, InitDefaults_s2s_2eproto, 
  descriptor_table_protodef_s2s_2eproto,
  "s2s.proto", &assign_descriptors_table_s2s_2eproto, 1121,
};

void AddDescriptors_s2s_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2fany_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_s2s_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_s2s_2eproto = []() { AddDescriptors_s2s_2eproto(); return true; }();
namespace s2s {

// ===================================================================

void Mysql_Create::InitAsDefaultInstance() {
}
class Mysql_Create::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mysql_Create::kDbFieldNumber;
const int Mysql_Create::kTabFieldNumber;
const int Mysql_Create::kProtoFieldNumber;
const int Mysql_Create::kKeysFieldNumber;
const int Mysql_Create::kIndexsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql_Create::Mysql_Create()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql.Create)
}
Mysql_Create::Mysql_Create(const Mysql_Create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_),
      indexs_(from.indexs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proto().size() > 0) {
    proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql.Create)
}

void Mysql_Create::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mysql_Create_s2s_2eproto.base);
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mysql_Create::~Mysql_Create() {
  // @@protoc_insertion_point(destructor:s2s.Mysql.Create)
  SharedDtor();
}

void Mysql_Create::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mysql_Create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql_Create& Mysql_Create::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_Create_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql_Create::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql.Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  indexs_.Clear();
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql_Create::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql_Create*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string db = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Create.db");
        object = msg->mutable_db();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string tab = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Create.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string proto = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Create.proto");
        object = msg->mutable_proto();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string keys = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.Mysql.Create.keys");
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated string indexs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.Mysql.Create.indexs");
          object = msg->add_indexs();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql_Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql.Create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string db = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Create.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tab = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Create.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proto = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto().data(), static_cast<int>(this->proto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Create.proto"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Create.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string indexs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_indexs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->indexs(this->indexs_size() - 1).data(),
            static_cast<int>(this->indexs(this->indexs_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Create.indexs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql.Create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql.Create)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql_Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql.Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db(), output);
  }

  // string tab = 2;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tab(), output);
  }

  // string proto = 3;
  if (this->proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.proto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proto(), output);
  }

  // repeated string keys = 4;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keys(i), output);
  }

  // repeated string indexs = 5;
  for (int i = 0, n = this->indexs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indexs(i).data(), static_cast<int>(this->indexs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.indexs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->indexs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql.Create)
}

::google::protobuf::uint8* Mysql_Create::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql.Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db(), target);
  }

  // string tab = 2;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tab(), target);
  }

  // string proto = 3;
  if (this->proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.proto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proto(), target);
  }

  // repeated string keys = 4;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->keys(i), target);
  }

  // repeated string indexs = 5;
  for (int i = 0, n = this->indexs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indexs(i).data(), static_cast<int>(this->indexs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Create.indexs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->indexs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql.Create)
  return target;
}

size_t Mysql_Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql.Create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string indexs = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->indexs_size());
  for (int i = 0, n = this->indexs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->indexs(i));
  }

  // string db = 1;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string tab = 2;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string proto = 3;
  if (this->proto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proto());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql_Create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql.Create)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql_Create* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql_Create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql.Create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql.Create)
    MergeFrom(*source);
  }
}

void Mysql_Create::MergeFrom(const Mysql_Create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql.Create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  indexs_.MergeFrom(from.indexs_);
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.proto().size() > 0) {

    proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
}

void Mysql_Create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql.Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql_Create::CopyFrom(const Mysql_Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql.Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql_Create::IsInitialized() const {
  return true;
}

void Mysql_Create::Swap(Mysql_Create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql_Create::InternalSwap(Mysql_Create* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  indexs_.InternalSwap(CastToBase(&other->indexs_));
  db_.Swap(&other->db_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proto_.Swap(&other->proto_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Mysql_Create::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mysql_Add::InitAsDefaultInstance() {
  ::s2s::_Mysql_Add_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class Mysql_Add::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const Mysql_Add* msg);
};

const ::google::protobuf::Any&
Mysql_Add::HasBitSetters::data(const Mysql_Add* msg) {
  return *msg->data_;
}
void Mysql_Add::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mysql_Add::kFlagFieldNumber;
const int Mysql_Add::kTableFieldNumber;
const int Mysql_Add::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql_Add::Mysql_Add()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql.Add)
}
Mysql_Add::Mysql_Add(const Mysql_Add& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql.Add)
}

void Mysql_Add::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mysql_Add_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&data_)) + sizeof(flag_));
}

Mysql_Add::~Mysql_Add() {
  // @@protoc_insertion_point(destructor:s2s.Mysql.Add)
  SharedDtor();
}

void Mysql_Add::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void Mysql_Add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql_Add& Mysql_Add::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_Add_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql_Add::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql.Add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql_Add::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql_Add*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Add.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql_Add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql.Add)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Add.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql.Add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql.Add)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql_Add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql.Add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Add.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql.Add)
}

::google::protobuf::uint8* Mysql_Add::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql.Add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Add.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql.Add)
  return target;
}

size_t Mysql_Add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql.Add)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql_Add::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql.Add)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql_Add* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql_Add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql.Add)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql.Add)
    MergeFrom(*source);
  }
}

void Mysql_Add::MergeFrom(const Mysql_Add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql.Add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Mysql_Add::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql.Add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql_Add::CopyFrom(const Mysql_Add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql.Add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql_Add::IsInitialized() const {
  return true;
}

void Mysql_Add::Swap(Mysql_Add* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql_Add::InternalSwap(Mysql_Add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata Mysql_Add::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mysql_Save::InitAsDefaultInstance() {
  ::s2s::_Mysql_Save_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class Mysql_Save::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const Mysql_Save* msg);
};

const ::google::protobuf::Any&
Mysql_Save::HasBitSetters::data(const Mysql_Save* msg) {
  return *msg->data_;
}
void Mysql_Save::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mysql_Save::kFlagFieldNumber;
const int Mysql_Save::kTableFieldNumber;
const int Mysql_Save::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql_Save::Mysql_Save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql.Save)
}
Mysql_Save::Mysql_Save(const Mysql_Save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql.Save)
}

void Mysql_Save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mysql_Save_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&data_)) + sizeof(flag_));
}

Mysql_Save::~Mysql_Save() {
  // @@protoc_insertion_point(destructor:s2s.Mysql.Save)
  SharedDtor();
}

void Mysql_Save::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void Mysql_Save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql_Save& Mysql_Save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_Save_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql_Save::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql_Save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql_Save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Save.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql_Save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql.Save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Save.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql.Save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql.Save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql_Save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Save.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql.Save)
}

::google::protobuf::uint8* Mysql_Save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Save.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql.Save)
  return target;
}

size_t Mysql_Save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql.Save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql_Save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql.Save)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql_Save* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql_Save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql.Save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql.Save)
    MergeFrom(*source);
  }
}

void Mysql_Save::MergeFrom(const Mysql_Save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql.Save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Mysql_Save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql_Save::CopyFrom(const Mysql_Save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql_Save::IsInitialized() const {
  return true;
}

void Mysql_Save::Swap(Mysql_Save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql_Save::InternalSwap(Mysql_Save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata Mysql_Save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mysql_Query::InitAsDefaultInstance() {
}
class Mysql_Query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mysql_Query::kFlagFieldNumber;
const int Mysql_Query::kTableFieldNumber;
const int Mysql_Query::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql_Query::Mysql_Query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql.Query)
}
Mysql_Query::Mysql_Query(const Mysql_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql.Query)
}

void Mysql_Query::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mysql_Query_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
}

Mysql_Query::~Mysql_Query() {
  // @@protoc_insertion_point(destructor:s2s.Mysql.Query)
  SharedDtor();
}

void Mysql_Query::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mysql_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql_Query& Mysql_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_Query_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql_Query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql_Query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Query.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Query.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Query.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Query.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql.Query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Query.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Query.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql.Query)
}

::google::protobuf::uint8* Mysql_Query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Query.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Query.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql.Query)
  return target;
}

size_t Mysql_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql_Query* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql_Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql.Query)
    MergeFrom(*source);
  }
}

void Mysql_Query::MergeFrom(const Mysql_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Mysql_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql_Query::CopyFrom(const Mysql_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql_Query::IsInitialized() const {
  return true;
}

void Mysql_Query::Swap(Mysql_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql_Query::InternalSwap(Mysql_Query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata Mysql_Query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mysql_Delete::InitAsDefaultInstance() {
}
class Mysql_Delete::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mysql_Delete::kFlagFieldNumber;
const int Mysql_Delete::kTableFieldNumber;
const int Mysql_Delete::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql_Delete::Mysql_Delete()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql.Delete)
}
Mysql_Delete::Mysql_Delete(const Mysql_Delete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql.Delete)
}

void Mysql_Delete::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mysql_Delete_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
}

Mysql_Delete::~Mysql_Delete() {
  // @@protoc_insertion_point(destructor:s2s.Mysql.Delete)
  SharedDtor();
}

void Mysql_Delete::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mysql_Delete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql_Delete& Mysql_Delete::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_Delete_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql_Delete::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql_Delete::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql_Delete*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Delete.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Delete.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql_Delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql.Delete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Delete.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Delete.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql.Delete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql.Delete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql_Delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Delete.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Delete.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql.Delete)
}

::google::protobuf::uint8* Mysql_Delete::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Delete.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Delete.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql.Delete)
  return target;
}

size_t Mysql_Delete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql.Delete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql_Delete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql.Delete)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql_Delete* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql_Delete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql.Delete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql.Delete)
    MergeFrom(*source);
  }
}

void Mysql_Delete::MergeFrom(const Mysql_Delete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql.Delete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Mysql_Delete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql.Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql_Delete::CopyFrom(const Mysql_Delete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql.Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql_Delete::IsInitialized() const {
  return true;
}

void Mysql_Delete::Swap(Mysql_Delete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql_Delete::InternalSwap(Mysql_Delete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata Mysql_Delete::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mysql_Update::InitAsDefaultInstance() {
}
class Mysql_Update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mysql_Update::kFlagFieldNumber;
const int Mysql_Update::kTableFieldNumber;
const int Mysql_Update::kUpdateJsonFieldNumber;
const int Mysql_Update::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql_Update::Mysql_Update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql.Update)
}
Mysql_Update::Mysql_Update(const Mysql_Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_json().size() > 0) {
    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql.Update)
}

void Mysql_Update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mysql_Update_s2s_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
}

Mysql_Update::~Mysql_Update() {
  // @@protoc_insertion_point(destructor:s2s.Mysql.Update)
  SharedDtor();
}

void Mysql_Update::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mysql_Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql_Update& Mysql_Update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_Update_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql_Update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql_Update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Update.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Update.update_json");
        object = msg->mutable_update_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Update.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql.Update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Update.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update_json().data(), static_cast<int>(this->update_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Update.update_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Update.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql.Update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Update.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Update.update_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update_json(), output);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Update.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql.Update)
}

::google::protobuf::uint8* Mysql_Update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Update.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Update.update_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_json(), target);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Update.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql.Update)
  return target;
}

size_t Mysql_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql.Update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update_json());
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int64 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql_Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql_Update* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql_Update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql.Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql.Update)
    MergeFrom(*source);
  }
}

void Mysql_Update::MergeFrom(const Mysql_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.update_json().size() > 0) {

    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void Mysql_Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql_Update::CopyFrom(const Mysql_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql_Update::IsInitialized() const {
  return true;
}

void Mysql_Update::Swap(Mysql_Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql_Update::InternalSwap(Mysql_Update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_json_.Swap(&other->update_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata Mysql_Update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mysql_Response::InitAsDefaultInstance() {
}
class Mysql_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mysql_Response::kErrorFieldNumber;
const int Mysql_Response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql_Response::Mysql_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql.Response)
}
Mysql_Response::Mysql_Response(const Mysql_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql.Response)
}

void Mysql_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mysql_Response_s2s_2eproto.base);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mysql_Response::~Mysql_Response() {
  // @@protoc_insertion_point(destructor:s2s.Mysql.Response)
  SharedDtor();
}

void Mysql_Response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mysql_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql_Response& Mysql_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mysql.Response.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string jsons = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.Mysql.Response.jsons");
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Response.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string jsons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jsons()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsons(this->jsons_size() - 1).data(),
            static_cast<int>(this->jsons(this->jsons_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mysql.Response.jsons"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // repeated string jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Response.jsons");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql.Response)
}

::google::protobuf::uint8* Mysql_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // repeated string jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mysql.Response.jsons");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql.Response)
  return target;
}

size_t Mysql_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string jsons = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jsons(i));
  }

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql_Response* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql.Response)
    MergeFrom(*source);
  }
}

void Mysql_Response::MergeFrom(const Mysql_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void Mysql_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql_Response::CopyFrom(const Mysql_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql_Response::IsInitialized() const {
  return true;
}

void Mysql_Response::Swap(Mysql_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql_Response::InternalSwap(Mysql_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Mysql_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mysql::InitAsDefaultInstance() {
}
class Mysql::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mysql::Mysql()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mysql)
}
Mysql::Mysql(const Mysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.Mysql)
}

void Mysql::SharedCtor() {
}

Mysql::~Mysql() {
  // @@protoc_insertion_point(destructor:s2s.Mysql)
  SharedDtor();
}

void Mysql::SharedDtor() {
}

void Mysql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mysql& Mysql::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mysql_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mysql::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mysql::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mysql*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mysql)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mysql)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mysql)
}

::google::protobuf::uint8* Mysql::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mysql)
  return target;
}

size_t Mysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mysql)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mysql)
  GOOGLE_DCHECK_NE(&from, this);
  const Mysql* source =
      ::google::protobuf::DynamicCastToGenerated<Mysql>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mysql)
    MergeFrom(*source);
  }
}

void Mysql::MergeFrom(const Mysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Mysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mysql::CopyFrom(const Mysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mysql::IsInitialized() const {
  return true;
}

void Mysql::Swap(Mysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mysql::InternalSwap(Mysql* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mysql::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_Insert::InitAsDefaultInstance() {
}
class Mongo_Insert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mongo_Insert::kTabFieldNumber;
const int Mongo_Insert::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_Insert::Mongo_Insert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.Insert)
}
Mongo_Insert::Mongo_Insert(const Mongo_Insert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.Insert)
}

void Mongo_Insert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mongo_Insert_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mongo_Insert::~Mongo_Insert() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.Insert)
  SharedDtor();
}

void Mongo_Insert::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mongo_Insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_Insert& Mongo_Insert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_Insert_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_Insert::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.Insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_Insert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_Insert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Insert.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Insert.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_Insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.Insert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Insert.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Insert.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.Insert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.Insert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_Insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.Insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Insert.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Insert.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.Insert)
}

::google::protobuf::uint8* Mongo_Insert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.Insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Insert.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Insert.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.Insert)
  return target;
}

size_t Mongo_Insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.Insert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_Insert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.Insert)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_Insert* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_Insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.Insert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.Insert)
    MergeFrom(*source);
  }
}

void Mongo_Insert::MergeFrom(const Mongo_Insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.Insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void Mongo_Insert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.Insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_Insert::CopyFrom(const Mongo_Insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.Insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_Insert::IsInitialized() const {
  return true;
}

void Mongo_Insert::Swap(Mongo_Insert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_Insert::InternalSwap(Mongo_Insert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Mongo_Insert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_Query_Request::InitAsDefaultInstance() {
}
class Mongo_Query_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mongo_Query_Request::kTabFieldNumber;
const int Mongo_Query_Request::kJsonFieldNumber;
const int Mongo_Query_Request::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_Query_Request::Mongo_Query_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.Query.Request)
}
Mongo_Query_Request::Mongo_Query_Request(const Mongo_Query_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.Query.Request)
}

void Mongo_Query_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mongo_Query_Request_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

Mongo_Query_Request::~Mongo_Query_Request() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.Query.Request)
  SharedDtor();
}

void Mongo_Query_Request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mongo_Query_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_Query_Request& Mongo_Query_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_Query_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_Query_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.Query.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_Query_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_Query_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Query.Request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Query.Request.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_Query_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.Query.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Query.Request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Query.Request.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.Query.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.Query.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_Query_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.Query.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Query.Request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Query.Request.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.Query.Request)
}

::google::protobuf::uint8* Mongo_Query_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.Query.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Query.Request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Query.Request.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.Query.Request)
  return target;
}

size_t Mongo_Query_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.Query.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_Query_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.Query.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_Query_Request* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_Query_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.Query.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.Query.Request)
    MergeFrom(*source);
  }
}

void Mongo_Query_Request::MergeFrom(const Mongo_Query_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.Query.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void Mongo_Query_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.Query.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_Query_Request::CopyFrom(const Mongo_Query_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.Query.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_Query_Request::IsInitialized() const {
  return true;
}

void Mongo_Query_Request::Swap(Mongo_Query_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_Query_Request::InternalSwap(Mongo_Query_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata Mongo_Query_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_Query_Response::InitAsDefaultInstance() {
}
class Mongo_Query_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mongo_Query_Response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_Query_Response::Mongo_Query_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.Query.Response)
}
Mongo_Query_Response::Mongo_Query_Response(const Mongo_Query_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.Query.Response)
}

void Mongo_Query_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mongo_Query_Response_s2s_2eproto.base);
}

Mongo_Query_Response::~Mongo_Query_Response() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.Query.Response)
  SharedDtor();
}

void Mongo_Query_Response::SharedDtor() {
}

void Mongo_Query_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_Query_Response& Mongo_Query_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_Query_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_Query_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.Query.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_Query_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_Query_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string jsons = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.Mongo.Query.Response.jsons");
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_Query_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.Query.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string jsons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jsons()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsons(this->jsons_size() - 1).data(),
            static_cast<int>(this->jsons(this->jsons_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Query.Response.jsons"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.Query.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.Query.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_Query_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.Query.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Query.Response.jsons");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.Query.Response)
}

::google::protobuf::uint8* Mongo_Query_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.Query.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Query.Response.jsons");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.Query.Response)
  return target;
}

size_t Mongo_Query_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.Query.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string jsons = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jsons(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_Query_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.Query.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_Query_Response* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_Query_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.Query.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.Query.Response)
    MergeFrom(*source);
  }
}

void Mongo_Query_Response::MergeFrom(const Mongo_Query_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.Query.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
}

void Mongo_Query_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.Query.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_Query_Response::CopyFrom(const Mongo_Query_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.Query.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_Query_Response::IsInitialized() const {
  return true;
}

void Mongo_Query_Response::Swap(Mongo_Query_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_Query_Response::InternalSwap(Mongo_Query_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
}

::google::protobuf::Metadata Mongo_Query_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_Query::InitAsDefaultInstance() {
}
class Mongo_Query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_Query::Mongo_Query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.Query)
}
Mongo_Query::Mongo_Query(const Mongo_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.Query)
}

void Mongo_Query::SharedCtor() {
}

Mongo_Query::~Mongo_Query() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.Query)
  SharedDtor();
}

void Mongo_Query::SharedDtor() {
}

void Mongo_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_Query& Mongo_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_Query_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_Query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_Query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.Query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.Query)
}

::google::protobuf::uint8* Mongo_Query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.Query)
  return target;
}

size_t Mongo_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_Query* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.Query)
    MergeFrom(*source);
  }
}

void Mongo_Query::MergeFrom(const Mongo_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Mongo_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_Query::CopyFrom(const Mongo_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_Query::IsInitialized() const {
  return true;
}

void Mongo_Query::Swap(Mongo_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_Query::InternalSwap(Mongo_Query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mongo_Query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_Delete::InitAsDefaultInstance() {
}
class Mongo_Delete::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mongo_Delete::kTabFieldNumber;
const int Mongo_Delete::kJsonFieldNumber;
const int Mongo_Delete::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_Delete::Mongo_Delete()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.Delete)
}
Mongo_Delete::Mongo_Delete(const Mongo_Delete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.Delete)
}

void Mongo_Delete::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mongo_Delete_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

Mongo_Delete::~Mongo_Delete() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.Delete)
  SharedDtor();
}

void Mongo_Delete::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mongo_Delete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_Delete& Mongo_Delete::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_Delete_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_Delete::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_Delete::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_Delete*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Delete.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Delete.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_Delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.Delete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Delete.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Delete.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.Delete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.Delete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_Delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Delete.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Delete.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.Delete)
}

::google::protobuf::uint8* Mongo_Delete::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Delete.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Delete.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.Delete)
  return target;
}

size_t Mongo_Delete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.Delete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_Delete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.Delete)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_Delete* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_Delete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.Delete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.Delete)
    MergeFrom(*source);
  }
}

void Mongo_Delete::MergeFrom(const Mongo_Delete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.Delete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void Mongo_Delete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_Delete::CopyFrom(const Mongo_Delete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_Delete::IsInitialized() const {
  return true;
}

void Mongo_Delete::Swap(Mongo_Delete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_Delete::InternalSwap(Mongo_Delete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata Mongo_Delete::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_Update::InitAsDefaultInstance() {
}
class Mongo_Update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mongo_Update::kTabFieldNumber;
const int Mongo_Update::kSelectFieldNumber;
const int Mongo_Update::kUpdateFieldNumber;
const int Mongo_Update::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_Update::Mongo_Update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.Update)
}
Mongo_Update::Mongo_Update(const Mongo_Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  select_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.select().size() > 0) {
    select_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.select_);
  }
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update().size() > 0) {
    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.Update)
}

void Mongo_Update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mongo_Update_s2s_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mongo_Update::~Mongo_Update() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.Update)
  SharedDtor();
}

void Mongo_Update::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mongo_Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_Update& Mongo_Update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_Update_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_Update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_Update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Update.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string select = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Update.select");
        object = msg->mutable_select();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Update.update");
        object = msg->mutable_update();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string tag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.Update.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.Update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Update.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string select = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_select()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->select().data(), static_cast<int>(this->select().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Update.select"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update().data(), static_cast<int>(this->update().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Update.update"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.Update.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.Update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string select = 2;
  if (this->select().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select().data(), static_cast<int>(this->select().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.select");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->select(), output);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.update");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update(), output);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.Update)
}

::google::protobuf::uint8* Mongo_Update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string select = 2;
  if (this->select().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select().data(), static_cast<int>(this->select().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.select");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->select(), target);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.update");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update(), target);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.Update.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.Update)
  return target;
}

size_t Mongo_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.Update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string select = 2;
  if (this->select().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->select());
  }

  // string update = 3;
  if (this->update().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update());
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_Update* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_Update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.Update)
    MergeFrom(*source);
  }
}

void Mongo_Update::MergeFrom(const Mongo_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.select().size() > 0) {

    select_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.select_);
  }
  if (from.update().size() > 0) {

    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void Mongo_Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_Update::CopyFrom(const Mongo_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_Update::IsInitialized() const {
  return true;
}

void Mongo_Update::Swap(Mongo_Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_Update::InternalSwap(Mongo_Update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  select_.Swap(&other->select_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_.Swap(&other->update_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Mongo_Update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_AddCounter_Request::InitAsDefaultInstance() {
}
class Mongo_AddCounter_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mongo_AddCounter_Request::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_AddCounter_Request::Mongo_AddCounter_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.AddCounter.Request)
}
Mongo_AddCounter_Request::Mongo_AddCounter_Request(const Mongo_AddCounter_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.AddCounter.Request)
}

void Mongo_AddCounter_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mongo_AddCounter_Request_s2s_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mongo_AddCounter_Request::~Mongo_AddCounter_Request() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.AddCounter.Request)
  SharedDtor();
}

void Mongo_AddCounter_Request::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mongo_AddCounter_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_AddCounter_Request& Mongo_AddCounter_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_AddCounter_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_AddCounter_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.AddCounter.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_AddCounter_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_AddCounter_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Mongo.AddCounter.Request.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_AddCounter_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.AddCounter.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Mongo.AddCounter.Request.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.AddCounter.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.AddCounter.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_AddCounter_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.AddCounter.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.AddCounter.Request.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.AddCounter.Request)
}

::google::protobuf::uint8* Mongo_AddCounter_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.AddCounter.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Mongo.AddCounter.Request.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.AddCounter.Request)
  return target;
}

size_t Mongo_AddCounter_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.AddCounter.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_AddCounter_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.AddCounter.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_AddCounter_Request* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_AddCounter_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.AddCounter.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.AddCounter.Request)
    MergeFrom(*source);
  }
}

void Mongo_AddCounter_Request::MergeFrom(const Mongo_AddCounter_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.AddCounter.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void Mongo_AddCounter_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.AddCounter.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_AddCounter_Request::CopyFrom(const Mongo_AddCounter_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.AddCounter.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_AddCounter_Request::IsInitialized() const {
  return true;
}

void Mongo_AddCounter_Request::Swap(Mongo_AddCounter_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_AddCounter_Request::InternalSwap(Mongo_AddCounter_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Mongo_AddCounter_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_AddCounter_Response::InitAsDefaultInstance() {
}
class Mongo_AddCounter_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mongo_AddCounter_Response::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_AddCounter_Response::Mongo_AddCounter_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.AddCounter.Response)
}
Mongo_AddCounter_Response::Mongo_AddCounter_Response(const Mongo_AddCounter_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.AddCounter.Response)
}

void Mongo_AddCounter_Response::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

Mongo_AddCounter_Response::~Mongo_AddCounter_Response() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.AddCounter.Response)
  SharedDtor();
}

void Mongo_AddCounter_Response::SharedDtor() {
}

void Mongo_AddCounter_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_AddCounter_Response& Mongo_AddCounter_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_AddCounter_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_AddCounter_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.AddCounter.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_AddCounter_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_AddCounter_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_AddCounter_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.AddCounter.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.AddCounter.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.AddCounter.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_AddCounter_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.AddCounter.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.AddCounter.Response)
}

::google::protobuf::uint8* Mongo_AddCounter_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.AddCounter.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.AddCounter.Response)
  return target;
}

size_t Mongo_AddCounter_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.AddCounter.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_AddCounter_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.AddCounter.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_AddCounter_Response* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_AddCounter_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.AddCounter.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.AddCounter.Response)
    MergeFrom(*source);
  }
}

void Mongo_AddCounter_Response::MergeFrom(const Mongo_AddCounter_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.AddCounter.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Mongo_AddCounter_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.AddCounter.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_AddCounter_Response::CopyFrom(const Mongo_AddCounter_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.AddCounter.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_AddCounter_Response::IsInitialized() const {
  return true;
}

void Mongo_AddCounter_Response::Swap(Mongo_AddCounter_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_AddCounter_Response::InternalSwap(Mongo_AddCounter_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Mongo_AddCounter_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo_AddCounter::InitAsDefaultInstance() {
}
class Mongo_AddCounter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo_AddCounter::Mongo_AddCounter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo.AddCounter)
}
Mongo_AddCounter::Mongo_AddCounter(const Mongo_AddCounter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo.AddCounter)
}

void Mongo_AddCounter::SharedCtor() {
}

Mongo_AddCounter::~Mongo_AddCounter() {
  // @@protoc_insertion_point(destructor:s2s.Mongo.AddCounter)
  SharedDtor();
}

void Mongo_AddCounter::SharedDtor() {
}

void Mongo_AddCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo_AddCounter& Mongo_AddCounter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_AddCounter_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo_AddCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo.AddCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo_AddCounter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo_AddCounter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo_AddCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo.AddCounter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo.AddCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo.AddCounter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo_AddCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo.AddCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo.AddCounter)
}

::google::protobuf::uint8* Mongo_AddCounter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo.AddCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo.AddCounter)
  return target;
}

size_t Mongo_AddCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo.AddCounter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo_AddCounter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo.AddCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo_AddCounter* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo_AddCounter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo.AddCounter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo.AddCounter)
    MergeFrom(*source);
  }
}

void Mongo_AddCounter::MergeFrom(const Mongo_AddCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo.AddCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Mongo_AddCounter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo.AddCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo_AddCounter::CopyFrom(const Mongo_AddCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo.AddCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo_AddCounter::IsInitialized() const {
  return true;
}

void Mongo_AddCounter::Swap(Mongo_AddCounter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo_AddCounter::InternalSwap(Mongo_AddCounter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mongo_AddCounter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mongo::InitAsDefaultInstance() {
}
class Mongo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mongo::Mongo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Mongo)
}
Mongo::Mongo(const Mongo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.Mongo)
}

void Mongo::SharedCtor() {
}

Mongo::~Mongo() {
  // @@protoc_insertion_point(destructor:s2s.Mongo)
  SharedDtor();
}

void Mongo::SharedDtor() {
}

void Mongo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mongo& Mongo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mongo_s2s_2eproto.base);
  return *internal_default_instance();
}


void Mongo::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mongo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mongo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mongo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Mongo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Mongo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Mongo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mongo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Mongo)
}

::google::protobuf::uint8* Mongo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Mongo)
  return target;
}

size_t Mongo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Mongo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mongo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Mongo)
  GOOGLE_DCHECK_NE(&from, this);
  const Mongo* source =
      ::google::protobuf::DynamicCastToGenerated<Mongo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Mongo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Mongo)
    MergeFrom(*source);
  }
}

void Mongo::MergeFrom(const Mongo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Mongo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Mongo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mongo::CopyFrom(const Mongo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo::IsInitialized() const {
  return true;
}

void Mongo::Swap(Mongo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mongo::InternalSwap(Mongo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mongo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Allot_Response::InitAsDefaultInstance() {
}
class Allot_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Allot_Response::kTokenFieldNumber;
const int Allot_Response::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Allot_Response::Allot_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Allot.Response)
}
Allot_Response::Allot_Response(const Allot_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.Allot.Response)
}

void Allot_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Allot_Response_s2s_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Allot_Response::~Allot_Response() {
  // @@protoc_insertion_point(destructor:s2s.Allot.Response)
  SharedDtor();
}

void Allot_Response::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Allot_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Allot_Response& Allot_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Allot_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void Allot_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Allot.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Allot_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Allot_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Allot.Response.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Allot.Response.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Allot_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Allot.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Allot.Response.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Allot.Response.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Allot.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Allot.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Allot_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Allot.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Response.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Response.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Allot.Response)
}

::google::protobuf::uint8* Allot_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Allot.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Response.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Response.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Allot.Response)
  return target;
}

size_t Allot_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Allot.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Allot_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Allot.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Allot_Response* source =
      ::google::protobuf::DynamicCastToGenerated<Allot_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Allot.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Allot.Response)
    MergeFrom(*source);
  }
}

void Allot_Response::MergeFrom(const Allot_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Allot.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Allot_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Allot.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Allot_Response::CopyFrom(const Allot_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Allot.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Allot_Response::IsInitialized() const {
  return true;
}

void Allot_Response::Swap(Allot_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Allot_Response::InternalSwap(Allot_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Allot_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Allot_Save::InitAsDefaultInstance() {
}
class Allot_Save::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Allot_Save::kServiceFieldNumber;
const int Allot_Save::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Allot_Save::Allot_Save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Allot.Save)
}
Allot_Save::Allot_Save(const Allot_Save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.Allot.Save)
}

void Allot_Save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Allot_Save_s2s_2eproto.base);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Allot_Save::~Allot_Save() {
  // @@protoc_insertion_point(destructor:s2s.Allot.Save)
  SharedDtor();
}

void Allot_Save::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Allot_Save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Allot_Save& Allot_Save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Allot_Save_s2s_2eproto.base);
  return *internal_default_instance();
}


void Allot_Save::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Allot.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Allot_Save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Allot_Save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string service = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Allot.Save.service");
        object = msg->mutable_service();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.Allot.Save.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Allot_Save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Allot.Save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), static_cast<int>(this->service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Allot.Save.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.Allot.Save.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Allot.Save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Allot.Save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Allot_Save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Allot.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Save.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Save.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Allot.Save)
}

::google::protobuf::uint8* Allot_Save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Allot.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Save.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.Allot.Save.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Allot.Save)
  return target;
}

size_t Allot_Save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Allot.Save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Allot_Save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Allot.Save)
  GOOGLE_DCHECK_NE(&from, this);
  const Allot_Save* source =
      ::google::protobuf::DynamicCastToGenerated<Allot_Save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Allot.Save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Allot.Save)
    MergeFrom(*source);
  }
}

void Allot_Save::MergeFrom(const Allot_Save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Allot.Save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Allot_Save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Allot.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Allot_Save::CopyFrom(const Allot_Save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Allot.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Allot_Save::IsInitialized() const {
  return true;
}

void Allot_Save::Swap(Allot_Save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Allot_Save::InternalSwap(Allot_Save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Allot_Save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Allot::InitAsDefaultInstance() {
}
class Allot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Allot::Allot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.Allot)
}
Allot::Allot(const Allot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.Allot)
}

void Allot::SharedCtor() {
}

Allot::~Allot() {
  // @@protoc_insertion_point(destructor:s2s.Allot)
  SharedDtor();
}

void Allot::SharedDtor() {
}

void Allot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Allot& Allot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Allot_s2s_2eproto.base);
  return *internal_default_instance();
}


void Allot::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.Allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Allot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Allot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Allot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.Allot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.Allot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.Allot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Allot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.Allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.Allot)
}

::google::protobuf::uint8* Allot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.Allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.Allot)
  return target;
}

size_t Allot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.Allot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Allot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.Allot)
  GOOGLE_DCHECK_NE(&from, this);
  const Allot* source =
      ::google::protobuf::DynamicCastToGenerated<Allot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.Allot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.Allot)
    MergeFrom(*source);
  }
}

void Allot::MergeFrom(const Allot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.Allot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Allot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.Allot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Allot::CopyFrom(const Allot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.Allot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Allot::IsInitialized() const {
  return true;
}

void Allot::Swap(Allot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Allot::InternalSwap(Allot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Allot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GateBroadCast_Request::InitAsDefaultInstance() {
  ::s2s::_GateBroadCast_Request_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class GateBroadCast_Request::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const GateBroadCast_Request* msg);
};

const ::google::protobuf::Any&
GateBroadCast_Request::HasBitSetters::data(const GateBroadCast_Request* msg) {
  return *msg->data_;
}
void GateBroadCast_Request::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateBroadCast_Request::kFuncFieldNumber;
const int GateBroadCast_Request::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateBroadCast_Request::GateBroadCast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.GateBroadCast.Request)
}
GateBroadCast_Request::GateBroadCast_Request(const GateBroadCast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.func().size() > 0) {
    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:s2s.GateBroadCast.Request)
}

void GateBroadCast_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GateBroadCast_Request_s2s_2eproto.base);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

GateBroadCast_Request::~GateBroadCast_Request() {
  // @@protoc_insertion_point(destructor:s2s.GateBroadCast.Request)
  SharedDtor();
}

void GateBroadCast_Request::SharedDtor() {
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void GateBroadCast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateBroadCast_Request& GateBroadCast_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GateBroadCast_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void GateBroadCast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.GateBroadCast.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GateBroadCast_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GateBroadCast_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string func = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.GateBroadCast.Request.func");
        object = msg->mutable_func();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GateBroadCast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.GateBroadCast.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string func = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->func().data(), static_cast<int>(this->func().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.GateBroadCast.Request.func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.GateBroadCast.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.GateBroadCast.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GateBroadCast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.GateBroadCast.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.GateBroadCast.Request.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->func(), output);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.GateBroadCast.Request)
}

::google::protobuf::uint8* GateBroadCast_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.GateBroadCast.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.GateBroadCast.Request.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.GateBroadCast.Request)
  return target;
}

size_t GateBroadCast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.GateBroadCast.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateBroadCast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.GateBroadCast.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const GateBroadCast_Request* source =
      ::google::protobuf::DynamicCastToGenerated<GateBroadCast_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.GateBroadCast.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.GateBroadCast.Request)
    MergeFrom(*source);
  }
}

void GateBroadCast_Request::MergeFrom(const GateBroadCast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.GateBroadCast.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.func().size() > 0) {

    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
}

void GateBroadCast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.GateBroadCast.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateBroadCast_Request::CopyFrom(const GateBroadCast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.GateBroadCast.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateBroadCast_Request::IsInitialized() const {
  return true;
}

void GateBroadCast_Request::Swap(GateBroadCast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateBroadCast_Request::InternalSwap(GateBroadCast_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  func_.Swap(&other->func_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::google::protobuf::Metadata GateBroadCast_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GateBroadCast_Response::InitAsDefaultInstance() {
}
class GateBroadCast_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateBroadCast_Response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateBroadCast_Response::GateBroadCast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.GateBroadCast.Response)
}
GateBroadCast_Response::GateBroadCast_Response(const GateBroadCast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:s2s.GateBroadCast.Response)
}

void GateBroadCast_Response::SharedCtor() {
  count_ = 0;
}

GateBroadCast_Response::~GateBroadCast_Response() {
  // @@protoc_insertion_point(destructor:s2s.GateBroadCast.Response)
  SharedDtor();
}

void GateBroadCast_Response::SharedDtor() {
}

void GateBroadCast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateBroadCast_Response& GateBroadCast_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GateBroadCast_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void GateBroadCast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.GateBroadCast.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GateBroadCast_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GateBroadCast_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GateBroadCast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.GateBroadCast.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.GateBroadCast.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.GateBroadCast.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GateBroadCast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.GateBroadCast.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.GateBroadCast.Response)
}

::google::protobuf::uint8* GateBroadCast_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.GateBroadCast.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.GateBroadCast.Response)
  return target;
}

size_t GateBroadCast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.GateBroadCast.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateBroadCast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.GateBroadCast.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const GateBroadCast_Response* source =
      ::google::protobuf::DynamicCastToGenerated<GateBroadCast_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.GateBroadCast.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.GateBroadCast.Response)
    MergeFrom(*source);
  }
}

void GateBroadCast_Response::MergeFrom(const GateBroadCast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.GateBroadCast.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void GateBroadCast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.GateBroadCast.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateBroadCast_Response::CopyFrom(const GateBroadCast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.GateBroadCast.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateBroadCast_Response::IsInitialized() const {
  return true;
}

void GateBroadCast_Response::Swap(GateBroadCast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateBroadCast_Response::InternalSwap(GateBroadCast_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata GateBroadCast_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GateBroadCast::InitAsDefaultInstance() {
}
class GateBroadCast::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateBroadCast::GateBroadCast()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.GateBroadCast)
}
GateBroadCast::GateBroadCast(const GateBroadCast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.GateBroadCast)
}

void GateBroadCast::SharedCtor() {
}

GateBroadCast::~GateBroadCast() {
  // @@protoc_insertion_point(destructor:s2s.GateBroadCast)
  SharedDtor();
}

void GateBroadCast::SharedDtor() {
}

void GateBroadCast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateBroadCast& GateBroadCast::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GateBroadCast_s2s_2eproto.base);
  return *internal_default_instance();
}


void GateBroadCast::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.GateBroadCast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GateBroadCast::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GateBroadCast*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GateBroadCast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.GateBroadCast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.GateBroadCast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.GateBroadCast)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GateBroadCast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.GateBroadCast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.GateBroadCast)
}

::google::protobuf::uint8* GateBroadCast::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.GateBroadCast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.GateBroadCast)
  return target;
}

size_t GateBroadCast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.GateBroadCast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateBroadCast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.GateBroadCast)
  GOOGLE_DCHECK_NE(&from, this);
  const GateBroadCast* source =
      ::google::protobuf::DynamicCastToGenerated<GateBroadCast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.GateBroadCast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.GateBroadCast)
    MergeFrom(*source);
  }
}

void GateBroadCast::MergeFrom(const GateBroadCast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.GateBroadCast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GateBroadCast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.GateBroadCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateBroadCast::CopyFrom(const GateBroadCast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.GateBroadCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateBroadCast::IsInitialized() const {
  return true;
}

void GateBroadCast::Swap(GateBroadCast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateBroadCast::InternalSwap(GateBroadCast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GateBroadCast::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CallClient_Request::InitAsDefaultInstance() {
  ::s2s::_CallClient_Request_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class CallClient_Request::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const CallClient_Request* msg);
};

const ::google::protobuf::Any&
CallClient_Request::HasBitSetters::data(const CallClient_Request* msg) {
  return *msg->data_;
}
void CallClient_Request::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallClient_Request::kFuncFieldNumber;
const int CallClient_Request::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallClient_Request::CallClient_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.CallClient.Request)
}
CallClient_Request::CallClient_Request(const CallClient_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.func().size() > 0) {
    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:s2s.CallClient.Request)
}

void CallClient_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CallClient_Request_s2s_2eproto.base);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

CallClient_Request::~CallClient_Request() {
  // @@protoc_insertion_point(destructor:s2s.CallClient.Request)
  SharedDtor();
}

void CallClient_Request::SharedDtor() {
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void CallClient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallClient_Request& CallClient_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CallClient_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void CallClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.CallClient.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallClient_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CallClient_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string func = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.CallClient.Request.func");
        object = msg->mutable_func();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallClient_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.CallClient.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string func = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->func().data(), static_cast<int>(this->func().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.CallClient.Request.func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.CallClient.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.CallClient.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallClient_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.CallClient.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.CallClient.Request.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->func(), output);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.CallClient.Request)
}

::google::protobuf::uint8* CallClient_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.CallClient.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.CallClient.Request.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.CallClient.Request)
  return target;
}

size_t CallClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.CallClient.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string func = 1;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallClient_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.CallClient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CallClient_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CallClient_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.CallClient.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.CallClient.Request)
    MergeFrom(*source);
  }
}

void CallClient_Request::MergeFrom(const CallClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.CallClient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.func().size() > 0) {

    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
}

void CallClient_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.CallClient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallClient_Request::CopyFrom(const CallClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.CallClient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallClient_Request::IsInitialized() const {
  return true;
}

void CallClient_Request::Swap(CallClient_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallClient_Request::InternalSwap(CallClient_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  func_.Swap(&other->func_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::google::protobuf::Metadata CallClient_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CallClient::InitAsDefaultInstance() {
}
class CallClient::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallClient::CallClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.CallClient)
}
CallClient::CallClient(const CallClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.CallClient)
}

void CallClient::SharedCtor() {
}

CallClient::~CallClient() {
  // @@protoc_insertion_point(destructor:s2s.CallClient)
  SharedDtor();
}

void CallClient::SharedDtor() {
}

void CallClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallClient& CallClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CallClient_s2s_2eproto.base);
  return *internal_default_instance();
}


void CallClient::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.CallClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CallClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.CallClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.CallClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.CallClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.CallClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.CallClient)
}

::google::protobuf::uint8* CallClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.CallClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.CallClient)
  return target;
}

size_t CallClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.CallClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.CallClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CallClient* source =
      ::google::protobuf::DynamicCastToGenerated<CallClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.CallClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.CallClient)
    MergeFrom(*source);
  }
}

void CallClient::MergeFrom(const CallClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.CallClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CallClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.CallClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallClient::CopyFrom(const CallClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.CallClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallClient::IsInitialized() const {
  return true;
}

void CallClient::Swap(CallClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallClient::InternalSwap(CallClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CallClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace s2s
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::s2s::Mysql_Create* Arena::CreateMaybeMessage< ::s2s::Mysql_Create >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql_Create >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mysql_Add* Arena::CreateMaybeMessage< ::s2s::Mysql_Add >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql_Add >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mysql_Save* Arena::CreateMaybeMessage< ::s2s::Mysql_Save >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql_Save >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mysql_Query* Arena::CreateMaybeMessage< ::s2s::Mysql_Query >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql_Query >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mysql_Delete* Arena::CreateMaybeMessage< ::s2s::Mysql_Delete >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql_Delete >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mysql_Update* Arena::CreateMaybeMessage< ::s2s::Mysql_Update >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql_Update >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mysql_Response* Arena::CreateMaybeMessage< ::s2s::Mysql_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mysql* Arena::CreateMaybeMessage< ::s2s::Mysql >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mysql >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_Insert* Arena::CreateMaybeMessage< ::s2s::Mongo_Insert >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_Insert >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_Query_Request* Arena::CreateMaybeMessage< ::s2s::Mongo_Query_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_Query_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_Query_Response* Arena::CreateMaybeMessage< ::s2s::Mongo_Query_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_Query_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_Query* Arena::CreateMaybeMessage< ::s2s::Mongo_Query >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_Query >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_Delete* Arena::CreateMaybeMessage< ::s2s::Mongo_Delete >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_Delete >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_Update* Arena::CreateMaybeMessage< ::s2s::Mongo_Update >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_Update >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_AddCounter_Request* Arena::CreateMaybeMessage< ::s2s::Mongo_AddCounter_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_AddCounter_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_AddCounter_Response* Arena::CreateMaybeMessage< ::s2s::Mongo_AddCounter_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_AddCounter_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo_AddCounter* Arena::CreateMaybeMessage< ::s2s::Mongo_AddCounter >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo_AddCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Mongo* Arena::CreateMaybeMessage< ::s2s::Mongo >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Mongo >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Allot_Response* Arena::CreateMaybeMessage< ::s2s::Allot_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Allot_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Allot_Save* Arena::CreateMaybeMessage< ::s2s::Allot_Save >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Allot_Save >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::Allot* Arena::CreateMaybeMessage< ::s2s::Allot >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::Allot >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::GateBroadCast_Request* Arena::CreateMaybeMessage< ::s2s::GateBroadCast_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::GateBroadCast_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::GateBroadCast_Response* Arena::CreateMaybeMessage< ::s2s::GateBroadCast_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::GateBroadCast_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::GateBroadCast* Arena::CreateMaybeMessage< ::s2s::GateBroadCast >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::GateBroadCast >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::CallClient_Request* Arena::CreateMaybeMessage< ::s2s::CallClient_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::CallClient_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::CallClient* Arena::CreateMaybeMessage< ::s2s::CallClient >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::CallClient >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
