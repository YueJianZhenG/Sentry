// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com.proto

#ifndef PROTOBUF_INCLUDED_com_2eproto
#define PROTOBUF_INCLUDED_com_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_com_2eproto();
namespace com {
class array;
class arrayDefaultTypeInternal;
extern arrayDefaultTypeInternal _array_default_instance_;
class array_any;
class array_anyDefaultTypeInternal;
extern array_anyDefaultTypeInternal _array_any_default_instance_;
class array_float32;
class array_float32DefaultTypeInternal;
extern array_float32DefaultTypeInternal _array_float32_default_instance_;
class array_float64;
class array_float64DefaultTypeInternal;
extern array_float64DefaultTypeInternal _array_float64_default_instance_;
class array_int32;
class array_int32DefaultTypeInternal;
extern array_int32DefaultTypeInternal _array_int32_default_instance_;
class array_int64;
class array_int64DefaultTypeInternal;
extern array_int64DefaultTypeInternal _array_int64_default_instance_;
class array_string;
class array_stringDefaultTypeInternal;
extern array_stringDefaultTypeInternal _array_string_default_instance_;
class http;
class httpDefaultTypeInternal;
extern httpDefaultTypeInternal _http_default_instance_;
class http_data;
class http_dataDefaultTypeInternal;
extern http_dataDefaultTypeInternal _http_data_default_instance_;
class http_data_HeadEntry_DoNotUse;
class http_data_HeadEntry_DoNotUseDefaultTypeInternal;
extern http_data_HeadEntry_DoNotUseDefaultTypeInternal _http_data_HeadEntry_DoNotUse_default_instance_;
class type;
class typeDefaultTypeInternal;
extern typeDefaultTypeInternal _type_default_instance_;
class type_float32;
class type_float32DefaultTypeInternal;
extern type_float32DefaultTypeInternal _type_float32_default_instance_;
class type_float64;
class type_float64DefaultTypeInternal;
extern type_float64DefaultTypeInternal _type_float64_default_instance_;
class type_int32;
class type_int32DefaultTypeInternal;
extern type_int32DefaultTypeInternal _type_int32_default_instance_;
class type_int64;
class type_int64DefaultTypeInternal;
extern type_int64DefaultTypeInternal _type_int64_default_instance_;
class type_json;
class type_jsonDefaultTypeInternal;
extern type_jsonDefaultTypeInternal _type_json_default_instance_;
class type_string;
class type_stringDefaultTypeInternal;
extern type_stringDefaultTypeInternal _type_string_default_instance_;
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::array* Arena::CreateMaybeMessage<::com::array>(Arena*);
template<> ::com::array_any* Arena::CreateMaybeMessage<::com::array_any>(Arena*);
template<> ::com::array_float32* Arena::CreateMaybeMessage<::com::array_float32>(Arena*);
template<> ::com::array_float64* Arena::CreateMaybeMessage<::com::array_float64>(Arena*);
template<> ::com::array_int32* Arena::CreateMaybeMessage<::com::array_int32>(Arena*);
template<> ::com::array_int64* Arena::CreateMaybeMessage<::com::array_int64>(Arena*);
template<> ::com::array_string* Arena::CreateMaybeMessage<::com::array_string>(Arena*);
template<> ::com::http* Arena::CreateMaybeMessage<::com::http>(Arena*);
template<> ::com::http_data* Arena::CreateMaybeMessage<::com::http_data>(Arena*);
template<> ::com::http_data_HeadEntry_DoNotUse* Arena::CreateMaybeMessage<::com::http_data_HeadEntry_DoNotUse>(Arena*);
template<> ::com::type* Arena::CreateMaybeMessage<::com::type>(Arena*);
template<> ::com::type_float32* Arena::CreateMaybeMessage<::com::type_float32>(Arena*);
template<> ::com::type_float64* Arena::CreateMaybeMessage<::com::type_float64>(Arena*);
template<> ::com::type_int32* Arena::CreateMaybeMessage<::com::type_int32>(Arena*);
template<> ::com::type_int64* Arena::CreateMaybeMessage<::com::type_int64>(Arena*);
template<> ::com::type_json* Arena::CreateMaybeMessage<::com::type_json>(Arena*);
template<> ::com::type_string* Arena::CreateMaybeMessage<::com::type_string>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {

// ===================================================================

class array_int32 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.array.int32) */ {
 public:
  array_int32();
  virtual ~array_int32();

  array_int32(const array_int32& from);

  inline array_int32& operator=(const array_int32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  array_int32(array_int32&& from) noexcept
    : array_int32() {
    *this = ::std::move(from);
  }

  inline array_int32& operator=(array_int32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const array_int32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const array_int32* internal_default_instance() {
    return reinterpret_cast<const array_int32*>(
               &_array_int32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(array_int32* other);
  friend void swap(array_int32& a, array_int32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline array_int32* New() const final {
    return CreateMaybeMessage<array_int32>(nullptr);
  }

  array_int32* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<array_int32>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const array_int32& from);
  void MergeFrom(const array_int32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(array_int32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::google::protobuf::int32 array(int index) const;
  void set_array(int index, ::google::protobuf::int32 value);
  void add_array(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:com.array.int32)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > array_;
  mutable std::atomic<int> _array_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class array_int64 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.array.int64) */ {
 public:
  array_int64();
  virtual ~array_int64();

  array_int64(const array_int64& from);

  inline array_int64& operator=(const array_int64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  array_int64(array_int64&& from) noexcept
    : array_int64() {
    *this = ::std::move(from);
  }

  inline array_int64& operator=(array_int64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const array_int64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const array_int64* internal_default_instance() {
    return reinterpret_cast<const array_int64*>(
               &_array_int64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(array_int64* other);
  friend void swap(array_int64& a, array_int64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline array_int64* New() const final {
    return CreateMaybeMessage<array_int64>(nullptr);
  }

  array_int64* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<array_int64>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const array_int64& from);
  void MergeFrom(const array_int64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(array_int64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::google::protobuf::int64 array(int index) const;
  void set_array(int index, ::google::protobuf::int64 value);
  void add_array(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:com.array.int64)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > array_;
  mutable std::atomic<int> _array_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class array_string :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.array.string) */ {
 public:
  array_string();
  virtual ~array_string();

  array_string(const array_string& from);

  inline array_string& operator=(const array_string& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  array_string(array_string&& from) noexcept
    : array_string() {
    *this = ::std::move(from);
  }

  inline array_string& operator=(array_string&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const array_string& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const array_string* internal_default_instance() {
    return reinterpret_cast<const array_string*>(
               &_array_string_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(array_string* other);
  friend void swap(array_string& a, array_string& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline array_string* New() const final {
    return CreateMaybeMessage<array_string>(nullptr);
  }

  array_string* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<array_string>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const array_string& from);
  void MergeFrom(const array_string& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(array_string* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  const ::std::string& array(int index) const;
  ::std::string* mutable_array(int index);
  void set_array(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_array(int index, ::std::string&& value);
  #endif
  void set_array(int index, const char* value);
  void set_array(int index, const char* value, size_t size);
  ::std::string* add_array();
  void add_array(const ::std::string& value);
  #if LANG_CXX11
  void add_array(::std::string&& value);
  #endif
  void add_array(const char* value);
  void add_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& array() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_array();

  // @@protoc_insertion_point(class_scope:com.array.string)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> array_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class array_float32 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.array.float32) */ {
 public:
  array_float32();
  virtual ~array_float32();

  array_float32(const array_float32& from);

  inline array_float32& operator=(const array_float32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  array_float32(array_float32&& from) noexcept
    : array_float32() {
    *this = ::std::move(from);
  }

  inline array_float32& operator=(array_float32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const array_float32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const array_float32* internal_default_instance() {
    return reinterpret_cast<const array_float32*>(
               &_array_float32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(array_float32* other);
  friend void swap(array_float32& a, array_float32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline array_float32* New() const final {
    return CreateMaybeMessage<array_float32>(nullptr);
  }

  array_float32* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<array_float32>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const array_float32& from);
  void MergeFrom(const array_float32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(array_float32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  float array(int index) const;
  void set_array(int index, float value);
  void add_array(float value);
  const ::google::protobuf::RepeatedField< float >&
      array() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:com.array.float32)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > array_;
  mutable std::atomic<int> _array_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class array_float64 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.array.float64) */ {
 public:
  array_float64();
  virtual ~array_float64();

  array_float64(const array_float64& from);

  inline array_float64& operator=(const array_float64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  array_float64(array_float64&& from) noexcept
    : array_float64() {
    *this = ::std::move(from);
  }

  inline array_float64& operator=(array_float64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const array_float64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const array_float64* internal_default_instance() {
    return reinterpret_cast<const array_float64*>(
               &_array_float64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(array_float64* other);
  friend void swap(array_float64& a, array_float64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline array_float64* New() const final {
    return CreateMaybeMessage<array_float64>(nullptr);
  }

  array_float64* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<array_float64>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const array_float64& from);
  void MergeFrom(const array_float64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(array_float64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  double array(int index) const;
  void set_array(int index, double value);
  void add_array(double value);
  const ::google::protobuf::RepeatedField< double >&
      array() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:com.array.float64)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > array_;
  mutable std::atomic<int> _array_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class array_any :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.array.any) */ {
 public:
  array_any();
  virtual ~array_any();

  array_any(const array_any& from);

  inline array_any& operator=(const array_any& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  array_any(array_any&& from) noexcept
    : array_any() {
    *this = ::std::move(from);
  }

  inline array_any& operator=(array_any&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const array_any& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const array_any* internal_default_instance() {
    return reinterpret_cast<const array_any*>(
               &_array_any_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(array_any* other);
  friend void swap(array_any& a, array_any& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline array_any* New() const final {
    return CreateMaybeMessage<array_any>(nullptr);
  }

  array_any* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<array_any>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const array_any& from);
  void MergeFrom(const array_any& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(array_any* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any array = 2;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 2;
  ::google::protobuf::Any* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_array();
  const ::google::protobuf::Any& array(int index) const;
  ::google::protobuf::Any* add_array();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      array() const;

  // @@protoc_insertion_point(class_scope:com.array.any)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > array_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class array :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.array) */ {
 public:
  array();
  virtual ~array();

  array(const array& from);

  inline array& operator=(const array& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  array(array&& from) noexcept
    : array() {
    *this = ::std::move(from);
  }

  inline array& operator=(array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const array* internal_default_instance() {
    return reinterpret_cast<const array*>(
               &_array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(array* other);
  friend void swap(array& a, array& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline array* New() const final {
    return CreateMaybeMessage<array>(nullptr);
  }

  array* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<array>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const array& from);
  void MergeFrom(const array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(array* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef array_int32 int32;
  typedef array_int64 int64;
  typedef array_string string;
  typedef array_float32 float32;
  typedef array_float64 float64;
  typedef array_any any;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.array)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class type_int32 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.type.int32) */ {
 public:
  type_int32();
  virtual ~type_int32();

  type_int32(const type_int32& from);

  inline type_int32& operator=(const type_int32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  type_int32(type_int32&& from) noexcept
    : type_int32() {
    *this = ::std::move(from);
  }

  inline type_int32& operator=(type_int32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const type_int32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const type_int32* internal_default_instance() {
    return reinterpret_cast<const type_int32*>(
               &_type_int32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(type_int32* other);
  friend void swap(type_int32& a, type_int32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline type_int32* New() const final {
    return CreateMaybeMessage<type_int32>(nullptr);
  }

  type_int32* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<type_int32>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const type_int32& from);
  void MergeFrom(const type_int32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(type_int32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.type.int32)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class type_int64 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.type.int64) */ {
 public:
  type_int64();
  virtual ~type_int64();

  type_int64(const type_int64& from);

  inline type_int64& operator=(const type_int64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  type_int64(type_int64&& from) noexcept
    : type_int64() {
    *this = ::std::move(from);
  }

  inline type_int64& operator=(type_int64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const type_int64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const type_int64* internal_default_instance() {
    return reinterpret_cast<const type_int64*>(
               &_type_int64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(type_int64* other);
  friend void swap(type_int64& a, type_int64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline type_int64* New() const final {
    return CreateMaybeMessage<type_int64>(nullptr);
  }

  type_int64* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<type_int64>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const type_int64& from);
  void MergeFrom(const type_int64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(type_int64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.type.int64)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class type_float32 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.type.float32) */ {
 public:
  type_float32();
  virtual ~type_float32();

  type_float32(const type_float32& from);

  inline type_float32& operator=(const type_float32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  type_float32(type_float32&& from) noexcept
    : type_float32() {
    *this = ::std::move(from);
  }

  inline type_float32& operator=(type_float32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const type_float32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const type_float32* internal_default_instance() {
    return reinterpret_cast<const type_float32*>(
               &_type_float32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(type_float32* other);
  friend void swap(type_float32& a, type_float32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline type_float32* New() const final {
    return CreateMaybeMessage<type_float32>(nullptr);
  }

  type_float32* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<type_float32>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const type_float32& from);
  void MergeFrom(const type_float32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(type_float32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:com.type.float32)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class type_float64 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.type.float64) */ {
 public:
  type_float64();
  virtual ~type_float64();

  type_float64(const type_float64& from);

  inline type_float64& operator=(const type_float64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  type_float64(type_float64&& from) noexcept
    : type_float64() {
    *this = ::std::move(from);
  }

  inline type_float64& operator=(type_float64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const type_float64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const type_float64* internal_default_instance() {
    return reinterpret_cast<const type_float64*>(
               &_type_float64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(type_float64* other);
  friend void swap(type_float64& a, type_float64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline type_float64* New() const final {
    return CreateMaybeMessage<type_float64>(nullptr);
  }

  type_float64* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<type_float64>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const type_float64& from);
  void MergeFrom(const type_float64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(type_float64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:com.type.float64)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class type_json :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.type.json) */ {
 public:
  type_json();
  virtual ~type_json();

  type_json(const type_json& from);

  inline type_json& operator=(const type_json& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  type_json(type_json&& from) noexcept
    : type_json() {
    *this = ::std::move(from);
  }

  inline type_json& operator=(type_json&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const type_json& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const type_json* internal_default_instance() {
    return reinterpret_cast<const type_json*>(
               &_type_json_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(type_json* other);
  friend void swap(type_json& a, type_json& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline type_json* New() const final {
    return CreateMaybeMessage<type_json>(nullptr);
  }

  type_json* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<type_json>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const type_json& from);
  void MergeFrom(const type_json& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(type_json* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:com.type.json)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class type_string :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.type.string) */ {
 public:
  type_string();
  virtual ~type_string();

  type_string(const type_string& from);

  inline type_string& operator=(const type_string& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  type_string(type_string&& from) noexcept
    : type_string() {
    *this = ::std::move(from);
  }

  inline type_string& operator=(type_string&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const type_string& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const type_string* internal_default_instance() {
    return reinterpret_cast<const type_string*>(
               &_type_string_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(type_string* other);
  friend void swap(type_string& a, type_string& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline type_string* New() const final {
    return CreateMaybeMessage<type_string>(nullptr);
  }

  type_string* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<type_string>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const type_string& from);
  void MergeFrom(const type_string& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(type_string* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str = 1;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:com.type.string)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class type :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.type) */ {
 public:
  type();
  virtual ~type();

  type(const type& from);

  inline type& operator=(const type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  type(type&& from) noexcept
    : type() {
    *this = ::std::move(from);
  }

  inline type& operator=(type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const type* internal_default_instance() {
    return reinterpret_cast<const type*>(
               &_type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(type* other);
  friend void swap(type& a, type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline type* New() const final {
    return CreateMaybeMessage<type>(nullptr);
  }

  type* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<type>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const type& from);
  void MergeFrom(const type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(type* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef type_int32 int32;
  typedef type_int64 int64;
  typedef type_float32 float32;
  typedef type_float64 float64;
  typedef type_json json;
  typedef type_string string;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.type)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class http_data_HeadEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<http_data_HeadEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<http_data_HeadEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  http_data_HeadEntry_DoNotUse();
  http_data_HeadEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const http_data_HeadEntry_DoNotUse& other);
  static const http_data_HeadEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const http_data_HeadEntry_DoNotUse*>(&_http_data_HeadEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class http_data :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.http.data) */ {
 public:
  http_data();
  virtual ~http_data();

  http_data(const http_data& from);

  inline http_data& operator=(const http_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  http_data(http_data&& from) noexcept
    : http_data() {
    *this = ::std::move(from);
  }

  inline http_data& operator=(http_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const http_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const http_data* internal_default_instance() {
    return reinterpret_cast<const http_data*>(
               &_http_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(http_data* other);
  friend void swap(http_data& a, http_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline http_data* New() const final {
    return CreateMaybeMessage<http_data>(nullptr);
  }

  http_data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<http_data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const http_data& from);
  void MergeFrom(const http_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(http_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> head = 6;
  int head_size() const;
  void clear_head();
  static const int kHeadFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      head() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_head();

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:com.http.data)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      http_data_HeadEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > head_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class http :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.http) */ {
 public:
  http();
  virtual ~http();

  http(const http& from);

  inline http& operator=(const http& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  http(http&& from) noexcept
    : http() {
    *this = ::std::move(from);
  }

  inline http& operator=(http&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const http& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const http* internal_default_instance() {
    return reinterpret_cast<const http*>(
               &_http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(http* other);
  friend void swap(http& a, http& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline http* New() const final {
    return CreateMaybeMessage<http>(nullptr);
  }

  http* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<http>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const http& from);
  void MergeFrom(const http& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(http* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef http_data data;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.http)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// array_int32

// repeated int32 array = 1;
inline int array_int32::array_size() const {
  return array_.size();
}
inline void array_int32::clear_array() {
  array_.Clear();
}
inline ::google::protobuf::int32 array_int32::array(int index) const {
  // @@protoc_insertion_point(field_get:com.array.int32.array)
  return array_.Get(index);
}
inline void array_int32::set_array(int index, ::google::protobuf::int32 value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.array.int32.array)
}
inline void array_int32::add_array(::google::protobuf::int32 value) {
  array_.Add(value);
  // @@protoc_insertion_point(field_add:com.array.int32.array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
array_int32::array() const {
  // @@protoc_insertion_point(field_list:com.array.int32.array)
  return array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
array_int32::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:com.array.int32.array)
  return &array_;
}

// -------------------------------------------------------------------

// array_int64

// repeated int64 array = 1;
inline int array_int64::array_size() const {
  return array_.size();
}
inline void array_int64::clear_array() {
  array_.Clear();
}
inline ::google::protobuf::int64 array_int64::array(int index) const {
  // @@protoc_insertion_point(field_get:com.array.int64.array)
  return array_.Get(index);
}
inline void array_int64::set_array(int index, ::google::protobuf::int64 value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.array.int64.array)
}
inline void array_int64::add_array(::google::protobuf::int64 value) {
  array_.Add(value);
  // @@protoc_insertion_point(field_add:com.array.int64.array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
array_int64::array() const {
  // @@protoc_insertion_point(field_list:com.array.int64.array)
  return array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
array_int64::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:com.array.int64.array)
  return &array_;
}

// -------------------------------------------------------------------

// array_string

// repeated string array = 1;
inline int array_string::array_size() const {
  return array_.size();
}
inline void array_string::clear_array() {
  array_.Clear();
}
inline const ::std::string& array_string::array(int index) const {
  // @@protoc_insertion_point(field_get:com.array.string.array)
  return array_.Get(index);
}
inline ::std::string* array_string::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:com.array.string.array)
  return array_.Mutable(index);
}
inline void array_string::set_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.array.string.array)
  array_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void array_string::set_array(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.array.string.array)
  array_.Mutable(index)->assign(std::move(value));
}
#endif
inline void array_string::set_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.array.string.array)
}
inline void array_string::set_array(int index, const char* value, size_t size) {
  array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.array.string.array)
}
inline ::std::string* array_string::add_array() {
  // @@protoc_insertion_point(field_add_mutable:com.array.string.array)
  return array_.Add();
}
inline void array_string::add_array(const ::std::string& value) {
  array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.array.string.array)
}
#if LANG_CXX11
inline void array_string::add_array(::std::string&& value) {
  array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.array.string.array)
}
#endif
inline void array_string::add_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.array.string.array)
}
inline void array_string::add_array(const char* value, size_t size) {
  array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.array.string.array)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
array_string::array() const {
  // @@protoc_insertion_point(field_list:com.array.string.array)
  return array_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
array_string::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:com.array.string.array)
  return &array_;
}

// -------------------------------------------------------------------

// array_float32

// repeated float array = 1;
inline int array_float32::array_size() const {
  return array_.size();
}
inline void array_float32::clear_array() {
  array_.Clear();
}
inline float array_float32::array(int index) const {
  // @@protoc_insertion_point(field_get:com.array.float32.array)
  return array_.Get(index);
}
inline void array_float32::set_array(int index, float value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.array.float32.array)
}
inline void array_float32::add_array(float value) {
  array_.Add(value);
  // @@protoc_insertion_point(field_add:com.array.float32.array)
}
inline const ::google::protobuf::RepeatedField< float >&
array_float32::array() const {
  // @@protoc_insertion_point(field_list:com.array.float32.array)
  return array_;
}
inline ::google::protobuf::RepeatedField< float >*
array_float32::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:com.array.float32.array)
  return &array_;
}

// -------------------------------------------------------------------

// array_float64

// repeated double array = 1;
inline int array_float64::array_size() const {
  return array_.size();
}
inline void array_float64::clear_array() {
  array_.Clear();
}
inline double array_float64::array(int index) const {
  // @@protoc_insertion_point(field_get:com.array.float64.array)
  return array_.Get(index);
}
inline void array_float64::set_array(int index, double value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.array.float64.array)
}
inline void array_float64::add_array(double value) {
  array_.Add(value);
  // @@protoc_insertion_point(field_add:com.array.float64.array)
}
inline const ::google::protobuf::RepeatedField< double >&
array_float64::array() const {
  // @@protoc_insertion_point(field_list:com.array.float64.array)
  return array_;
}
inline ::google::protobuf::RepeatedField< double >*
array_float64::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:com.array.float64.array)
  return &array_;
}

// -------------------------------------------------------------------

// array_any

// repeated .google.protobuf.Any array = 2;
inline int array_any::array_size() const {
  return array_.size();
}
inline ::google::protobuf::Any* array_any::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:com.array.any.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
array_any::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:com.array.any.array)
  return &array_;
}
inline const ::google::protobuf::Any& array_any::array(int index) const {
  // @@protoc_insertion_point(field_get:com.array.any.array)
  return array_.Get(index);
}
inline ::google::protobuf::Any* array_any::add_array() {
  // @@protoc_insertion_point(field_add:com.array.any.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
array_any::array() const {
  // @@protoc_insertion_point(field_list:com.array.any.array)
  return array_;
}

// -------------------------------------------------------------------

// array

// -------------------------------------------------------------------

// type_int32

// int32 value = 1;
inline void type_int32::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 type_int32::value() const {
  // @@protoc_insertion_point(field_get:com.type.int32.value)
  return value_;
}
inline void type_int32::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:com.type.int32.value)
}

// -------------------------------------------------------------------

// type_int64

// int64 value = 1;
inline void type_int64::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 type_int64::value() const {
  // @@protoc_insertion_point(field_get:com.type.int64.value)
  return value_;
}
inline void type_int64::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:com.type.int64.value)
}

// -------------------------------------------------------------------

// type_float32

// float value = 1;
inline void type_float32::clear_value() {
  value_ = 0;
}
inline float type_float32::value() const {
  // @@protoc_insertion_point(field_get:com.type.float32.value)
  return value_;
}
inline void type_float32::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:com.type.float32.value)
}

// -------------------------------------------------------------------

// type_float64

// double value = 1;
inline void type_float64::clear_value() {
  value_ = 0;
}
inline double type_float64::value() const {
  // @@protoc_insertion_point(field_get:com.type.float64.value)
  return value_;
}
inline void type_float64::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:com.type.float64.value)
}

// -------------------------------------------------------------------

// type_json

// string json = 1;
inline void type_json::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& type_json::json() const {
  // @@protoc_insertion_point(field_get:com.type.json.json)
  return json_.GetNoArena();
}
inline void type_json::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.type.json.json)
}
#if LANG_CXX11
inline void type_json::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.type.json.json)
}
#endif
inline void type_json::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.type.json.json)
}
inline void type_json::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.type.json.json)
}
inline ::std::string* type_json::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:com.type.json.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* type_json::release_json() {
  // @@protoc_insertion_point(field_release:com.type.json.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void type_json::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:com.type.json.json)
}

// -------------------------------------------------------------------

// type_string

// string str = 1;
inline void type_string::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& type_string::str() const {
  // @@protoc_insertion_point(field_get:com.type.string.str)
  return str_.GetNoArena();
}
inline void type_string::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.type.string.str)
}
#if LANG_CXX11
inline void type_string::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.type.string.str)
}
#endif
inline void type_string::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.type.string.str)
}
inline void type_string::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.type.string.str)
}
inline ::std::string* type_string::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:com.type.string.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* type_string::release_str() {
  // @@protoc_insertion_point(field_release:com.type.string.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void type_string::set_allocated_str(::std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:com.type.string.str)
}

// -------------------------------------------------------------------

// type

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// http_data

// string path = 1;
inline void http_data::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& http_data::path() const {
  // @@protoc_insertion_point(field_get:com.http.data.path)
  return path_.GetNoArena();
}
inline void http_data::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.http.data.path)
}
#if LANG_CXX11
inline void http_data::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.http.data.path)
}
#endif
inline void http_data::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.http.data.path)
}
inline void http_data::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.http.data.path)
}
inline ::std::string* http_data::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:com.http.data.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* http_data::release_path() {
  // @@protoc_insertion_point(field_release:com.http.data.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void http_data::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:com.http.data.path)
}

// string method = 2;
inline void http_data::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& http_data::method() const {
  // @@protoc_insertion_point(field_get:com.http.data.method)
  return method_.GetNoArena();
}
inline void http_data::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.http.data.method)
}
#if LANG_CXX11
inline void http_data::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.http.data.method)
}
#endif
inline void http_data::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.http.data.method)
}
inline void http_data::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.http.data.method)
}
inline ::std::string* http_data::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:com.http.data.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* http_data::release_method() {
  // @@protoc_insertion_point(field_release:com.http.data.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void http_data::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:com.http.data.method)
}

// string version = 3;
inline void http_data::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& http_data::version() const {
  // @@protoc_insertion_point(field_get:com.http.data.version)
  return version_.GetNoArena();
}
inline void http_data::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.http.data.version)
}
#if LANG_CXX11
inline void http_data::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.http.data.version)
}
#endif
inline void http_data::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.http.data.version)
}
inline void http_data::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.http.data.version)
}
inline ::std::string* http_data::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:com.http.data.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* http_data::release_version() {
  // @@protoc_insertion_point(field_release:com.http.data.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void http_data::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:com.http.data.version)
}

// string address = 4;
inline void http_data::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& http_data::address() const {
  // @@protoc_insertion_point(field_get:com.http.data.address)
  return address_.GetNoArena();
}
inline void http_data::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.http.data.address)
}
#if LANG_CXX11
inline void http_data::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.http.data.address)
}
#endif
inline void http_data::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.http.data.address)
}
inline void http_data::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.http.data.address)
}
inline ::std::string* http_data::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:com.http.data.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* http_data::release_address() {
  // @@protoc_insertion_point(field_release:com.http.data.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void http_data::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:com.http.data.address)
}

// string data = 5;
inline void http_data::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& http_data::data() const {
  // @@protoc_insertion_point(field_get:com.http.data.data)
  return data_.GetNoArena();
}
inline void http_data::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.http.data.data)
}
#if LANG_CXX11
inline void http_data::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.http.data.data)
}
#endif
inline void http_data::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.http.data.data)
}
inline void http_data::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.http.data.data)
}
inline ::std::string* http_data::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.http.data.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* http_data::release_data() {
  // @@protoc_insertion_point(field_release:com.http.data.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void http_data::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.http.data.data)
}

// map<string, string> head = 6;
inline int http_data::head_size() const {
  return head_.size();
}
inline void http_data::clear_head() {
  head_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
http_data::head() const {
  // @@protoc_insertion_point(field_map:com.http.data.head)
  return head_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
http_data::mutable_head() {
  // @@protoc_insertion_point(field_mutable_map:com.http.data.head)
  return head_.MutableMap();
}

// -------------------------------------------------------------------

// http

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_com_2eproto
