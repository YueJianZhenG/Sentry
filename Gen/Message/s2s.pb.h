// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#ifndef PROTOBUF_INCLUDED_s2s_2eproto
#define PROTOBUF_INCLUDED_s2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2eproto();
namespace s2s {
class allot;
class allotDefaultTypeInternal;
extern allotDefaultTypeInternal _allot_default_instance_;
class allot_response;
class allot_responseDefaultTypeInternal;
extern allot_responseDefaultTypeInternal _allot_response_default_instance_;
class allot_save;
class allot_saveDefaultTypeInternal;
extern allot_saveDefaultTypeInternal _allot_save_default_instance_;
class broadcast;
class broadcastDefaultTypeInternal;
extern broadcastDefaultTypeInternal _broadcast_default_instance_;
class broadcast_request;
class broadcast_requestDefaultTypeInternal;
extern broadcast_requestDefaultTypeInternal _broadcast_request_default_instance_;
class broadcast_response;
class broadcast_responseDefaultTypeInternal;
extern broadcast_responseDefaultTypeInternal _broadcast_response_default_instance_;
class client;
class clientDefaultTypeInternal;
extern clientDefaultTypeInternal _client_default_instance_;
class client_call;
class client_callDefaultTypeInternal;
extern client_callDefaultTypeInternal _client_call_default_instance_;
class node_info;
class node_infoDefaultTypeInternal;
extern node_infoDefaultTypeInternal _node_info_default_instance_;
}  // namespace s2s
namespace google {
namespace protobuf {
template<> ::s2s::allot* Arena::CreateMaybeMessage<::s2s::allot>(Arena*);
template<> ::s2s::allot_response* Arena::CreateMaybeMessage<::s2s::allot_response>(Arena*);
template<> ::s2s::allot_save* Arena::CreateMaybeMessage<::s2s::allot_save>(Arena*);
template<> ::s2s::broadcast* Arena::CreateMaybeMessage<::s2s::broadcast>(Arena*);
template<> ::s2s::broadcast_request* Arena::CreateMaybeMessage<::s2s::broadcast_request>(Arena*);
template<> ::s2s::broadcast_response* Arena::CreateMaybeMessage<::s2s::broadcast_response>(Arena*);
template<> ::s2s::client* Arena::CreateMaybeMessage<::s2s::client>(Arena*);
template<> ::s2s::client_call* Arena::CreateMaybeMessage<::s2s::client_call>(Arena*);
template<> ::s2s::node_info* Arena::CreateMaybeMessage<::s2s::node_info>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace s2s {

// ===================================================================

class allot_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.allot.response) */ {
 public:
  allot_response();
  virtual ~allot_response();

  allot_response(const allot_response& from);

  inline allot_response& operator=(const allot_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  allot_response(allot_response&& from) noexcept
    : allot_response() {
    *this = ::std::move(from);
  }

  inline allot_response& operator=(allot_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const allot_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allot_response* internal_default_instance() {
    return reinterpret_cast<const allot_response*>(
               &_allot_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(allot_response* other);
  friend void swap(allot_response& a, allot_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline allot_response* New() const final {
    return CreateMaybeMessage<allot_response>(nullptr);
  }

  allot_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<allot_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const allot_response& from);
  void MergeFrom(const allot_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allot_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:s2s.allot.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class allot_save :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.allot.save) */ {
 public:
  allot_save();
  virtual ~allot_save();

  allot_save(const allot_save& from);

  inline allot_save& operator=(const allot_save& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  allot_save(allot_save&& from) noexcept
    : allot_save() {
    *this = ::std::move(from);
  }

  inline allot_save& operator=(allot_save&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const allot_save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allot_save* internal_default_instance() {
    return reinterpret_cast<const allot_save*>(
               &_allot_save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(allot_save* other);
  friend void swap(allot_save& a, allot_save& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline allot_save* New() const final {
    return CreateMaybeMessage<allot_save>(nullptr);
  }

  allot_save* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<allot_save>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const allot_save& from);
  void MergeFrom(const allot_save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allot_save* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:s2s.allot.save)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class allot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.allot) */ {
 public:
  allot();
  virtual ~allot();

  allot(const allot& from);

  inline allot& operator=(const allot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  allot(allot&& from) noexcept
    : allot() {
    *this = ::std::move(from);
  }

  inline allot& operator=(allot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const allot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allot* internal_default_instance() {
    return reinterpret_cast<const allot*>(
               &_allot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(allot* other);
  friend void swap(allot& a, allot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline allot* New() const final {
    return CreateMaybeMessage<allot>(nullptr);
  }

  allot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<allot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const allot& from);
  void MergeFrom(const allot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef allot_response response;
  typedef allot_save save;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.allot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class node_info :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.node_info) */ {
 public:
  node_info();
  virtual ~node_info();

  node_info(const node_info& from);

  inline node_info& operator=(const node_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  node_info(node_info&& from) noexcept
    : node_info() {
    *this = ::std::move(from);
  }

  inline node_info& operator=(node_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const node_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const node_info* internal_default_instance() {
    return reinterpret_cast<const node_info*>(
               &_node_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(node_info* other);
  friend void swap(node_info& a, node_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline node_info* New() const final {
    return CreateMaybeMessage<node_info>(nullptr);
  }

  node_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<node_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const node_info& from);
  void MergeFrom(const node_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(node_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  const ::std::string& services(int index) const;
  ::std::string* mutable_services(int index);
  void set_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_services(int index, ::std::string&& value);
  #endif
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  ::std::string* add_services();
  void add_services(const ::std::string& value);
  #if LANG_CXX11
  void add_services(::std::string&& value);
  #endif
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_services();

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:s2s.node_info)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> services_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class broadcast_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.broadcast.request) */ {
 public:
  broadcast_request();
  virtual ~broadcast_request();

  broadcast_request(const broadcast_request& from);

  inline broadcast_request& operator=(const broadcast_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  broadcast_request(broadcast_request&& from) noexcept
    : broadcast_request() {
    *this = ::std::move(from);
  }

  inline broadcast_request& operator=(broadcast_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const broadcast_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const broadcast_request* internal_default_instance() {
    return reinterpret_cast<const broadcast_request*>(
               &_broadcast_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(broadcast_request* other);
  friend void swap(broadcast_request& a, broadcast_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline broadcast_request* New() const final {
    return CreateMaybeMessage<broadcast_request>(nullptr);
  }

  broadcast_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<broadcast_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const broadcast_request& from);
  void MergeFrom(const broadcast_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(broadcast_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string func = 1;
  void clear_func();
  static const int kFuncFieldNumber = 1;
  const ::std::string& func() const;
  void set_func(const ::std::string& value);
  #if LANG_CXX11
  void set_func(::std::string&& value);
  #endif
  void set_func(const char* value);
  void set_func(const char* value, size_t size);
  ::std::string* mutable_func();
  ::std::string* release_func();
  void set_allocated_func(::std::string* func);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.broadcast.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr func_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class broadcast_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.broadcast.response) */ {
 public:
  broadcast_response();
  virtual ~broadcast_response();

  broadcast_response(const broadcast_response& from);

  inline broadcast_response& operator=(const broadcast_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  broadcast_response(broadcast_response&& from) noexcept
    : broadcast_response() {
    *this = ::std::move(from);
  }

  inline broadcast_response& operator=(broadcast_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const broadcast_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const broadcast_response* internal_default_instance() {
    return reinterpret_cast<const broadcast_response*>(
               &_broadcast_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(broadcast_response* other);
  friend void swap(broadcast_response& a, broadcast_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline broadcast_response* New() const final {
    return CreateMaybeMessage<broadcast_response>(nullptr);
  }

  broadcast_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<broadcast_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const broadcast_response& from);
  void MergeFrom(const broadcast_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(broadcast_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.broadcast.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class broadcast :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.broadcast) */ {
 public:
  broadcast();
  virtual ~broadcast();

  broadcast(const broadcast& from);

  inline broadcast& operator=(const broadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  broadcast(broadcast&& from) noexcept
    : broadcast() {
    *this = ::std::move(from);
  }

  inline broadcast& operator=(broadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const broadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const broadcast* internal_default_instance() {
    return reinterpret_cast<const broadcast*>(
               &_broadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(broadcast* other);
  friend void swap(broadcast& a, broadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline broadcast* New() const final {
    return CreateMaybeMessage<broadcast>(nullptr);
  }

  broadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<broadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const broadcast& from);
  void MergeFrom(const broadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(broadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef broadcast_request request;
  typedef broadcast_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.broadcast)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class client_call :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.client.call) */ {
 public:
  client_call();
  virtual ~client_call();

  client_call(const client_call& from);

  inline client_call& operator=(const client_call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  client_call(client_call&& from) noexcept
    : client_call() {
    *this = ::std::move(from);
  }

  inline client_call& operator=(client_call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const client_call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const client_call* internal_default_instance() {
    return reinterpret_cast<const client_call*>(
               &_client_call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(client_call* other);
  friend void swap(client_call& a, client_call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline client_call* New() const final {
    return CreateMaybeMessage<client_call>(nullptr);
  }

  client_call* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<client_call>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const client_call& from);
  void MergeFrom(const client_call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string func = 1;
  void clear_func();
  static const int kFuncFieldNumber = 1;
  const ::std::string& func() const;
  void set_func(const ::std::string& value);
  #if LANG_CXX11
  void set_func(::std::string&& value);
  #endif
  void set_func(const char* value);
  void set_func(const char* value, size_t size);
  ::std::string* mutable_func();
  ::std::string* release_func();
  void set_allocated_func(::std::string* func);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.client.call)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr func_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class client :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.client) */ {
 public:
  client();
  virtual ~client();

  client(const client& from);

  inline client& operator=(const client& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  client(client&& from) noexcept
    : client() {
    *this = ::std::move(from);
  }

  inline client& operator=(client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const client* internal_default_instance() {
    return reinterpret_cast<const client*>(
               &_client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(client* other);
  friend void swap(client& a, client& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline client* New() const final {
    return CreateMaybeMessage<client>(nullptr);
  }

  client* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<client>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const client& from);
  void MergeFrom(const client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef client_call call;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.client)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// allot_response

// string token = 1;
inline void allot_response::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& allot_response::token() const {
  // @@protoc_insertion_point(field_get:s2s.allot.response.token)
  return token_.GetNoArena();
}
inline void allot_response::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.allot.response.token)
}
#if LANG_CXX11
inline void allot_response::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.allot.response.token)
}
#endif
inline void allot_response::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.allot.response.token)
}
inline void allot_response::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.allot.response.token)
}
inline ::std::string* allot_response::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:s2s.allot.response.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allot_response::release_token() {
  // @@protoc_insertion_point(field_release:s2s.allot.response.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allot_response::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:s2s.allot.response.token)
}

// string address = 2;
inline void allot_response::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& allot_response::address() const {
  // @@protoc_insertion_point(field_get:s2s.allot.response.address)
  return address_.GetNoArena();
}
inline void allot_response::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.allot.response.address)
}
#if LANG_CXX11
inline void allot_response::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.allot.response.address)
}
#endif
inline void allot_response::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.allot.response.address)
}
inline void allot_response::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.allot.response.address)
}
inline ::std::string* allot_response::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.allot.response.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allot_response::release_address() {
  // @@protoc_insertion_point(field_release:s2s.allot.response.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allot_response::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.allot.response.address)
}

// -------------------------------------------------------------------

// allot_save

// string service = 1;
inline void allot_save::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& allot_save::service() const {
  // @@protoc_insertion_point(field_get:s2s.allot.save.service)
  return service_.GetNoArena();
}
inline void allot_save::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.allot.save.service)
}
#if LANG_CXX11
inline void allot_save::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.allot.save.service)
}
#endif
inline void allot_save::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.allot.save.service)
}
inline void allot_save::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.allot.save.service)
}
inline ::std::string* allot_save::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:s2s.allot.save.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allot_save::release_service() {
  // @@protoc_insertion_point(field_release:s2s.allot.save.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allot_save::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:s2s.allot.save.service)
}

// string address = 2;
inline void allot_save::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& allot_save::address() const {
  // @@protoc_insertion_point(field_get:s2s.allot.save.address)
  return address_.GetNoArena();
}
inline void allot_save::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.allot.save.address)
}
#if LANG_CXX11
inline void allot_save::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.allot.save.address)
}
#endif
inline void allot_save::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.allot.save.address)
}
inline void allot_save::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.allot.save.address)
}
inline ::std::string* allot_save::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.allot.save.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allot_save::release_address() {
  // @@protoc_insertion_point(field_release:s2s.allot.save.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allot_save::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.allot.save.address)
}

// -------------------------------------------------------------------

// allot

// -------------------------------------------------------------------

// node_info

// string address = 1;
inline void node_info::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_info::address() const {
  // @@protoc_insertion_point(field_get:s2s.node_info.address)
  return address_.GetNoArena();
}
inline void node_info::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.node_info.address)
}
#if LANG_CXX11
inline void node_info::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.node_info.address)
}
#endif
inline void node_info::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.node_info.address)
}
inline void node_info::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.node_info.address)
}
inline ::std::string* node_info::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.node_info.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_info::release_address() {
  // @@protoc_insertion_point(field_release:s2s.node_info.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_info::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.node_info.address)
}

// repeated string services = 2;
inline int node_info::services_size() const {
  return services_.size();
}
inline void node_info::clear_services() {
  services_.Clear();
}
inline const ::std::string& node_info::services(int index) const {
  // @@protoc_insertion_point(field_get:s2s.node_info.services)
  return services_.Get(index);
}
inline ::std::string* node_info::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.node_info.services)
  return services_.Mutable(index);
}
inline void node_info::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.node_info.services)
  services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void node_info::set_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.node_info.services)
  services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void node_info::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.node_info.services)
}
inline void node_info::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.node_info.services)
}
inline ::std::string* node_info::add_services() {
  // @@protoc_insertion_point(field_add_mutable:s2s.node_info.services)
  return services_.Add();
}
inline void node_info::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.node_info.services)
}
#if LANG_CXX11
inline void node_info::add_services(::std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.node_info.services)
}
#endif
inline void node_info::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.node_info.services)
}
inline void node_info::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.node_info.services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
node_info::services() const {
  // @@protoc_insertion_point(field_list:s2s.node_info.services)
  return services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
node_info::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:s2s.node_info.services)
  return &services_;
}

// -------------------------------------------------------------------

// broadcast_request

// string func = 1;
inline void broadcast_request::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& broadcast_request::func() const {
  // @@protoc_insertion_point(field_get:s2s.broadcast.request.func)
  return func_.GetNoArena();
}
inline void broadcast_request::set_func(const ::std::string& value) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.broadcast.request.func)
}
#if LANG_CXX11
inline void broadcast_request::set_func(::std::string&& value) {
  
  func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.broadcast.request.func)
}
#endif
inline void broadcast_request::set_func(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.broadcast.request.func)
}
inline void broadcast_request::set_func(const char* value, size_t size) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.broadcast.request.func)
}
inline ::std::string* broadcast_request::mutable_func() {
  
  // @@protoc_insertion_point(field_mutable:s2s.broadcast.request.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* broadcast_request::release_func() {
  // @@protoc_insertion_point(field_release:s2s.broadcast.request.func)
  
  return func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void broadcast_request::set_allocated_func(::std::string* func) {
  if (func != nullptr) {
    
  } else {
    
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:s2s.broadcast.request.func)
}

// .google.protobuf.Any data = 2;
inline bool broadcast_request::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& broadcast_request::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.broadcast.request.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* broadcast_request::release_data() {
  // @@protoc_insertion_point(field_release:s2s.broadcast.request.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* broadcast_request::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.broadcast.request.data)
  return data_;
}
inline void broadcast_request::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.broadcast.request.data)
}

// -------------------------------------------------------------------

// broadcast_response

// int32 count = 1;
inline void broadcast_response::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 broadcast_response::count() const {
  // @@protoc_insertion_point(field_get:s2s.broadcast.response.count)
  return count_;
}
inline void broadcast_response::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:s2s.broadcast.response.count)
}

// -------------------------------------------------------------------

// broadcast

// -------------------------------------------------------------------

// client_call

// string func = 1;
inline void client_call::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& client_call::func() const {
  // @@protoc_insertion_point(field_get:s2s.client.call.func)
  return func_.GetNoArena();
}
inline void client_call::set_func(const ::std::string& value) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.client.call.func)
}
#if LANG_CXX11
inline void client_call::set_func(::std::string&& value) {
  
  func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.client.call.func)
}
#endif
inline void client_call::set_func(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.client.call.func)
}
inline void client_call::set_func(const char* value, size_t size) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.client.call.func)
}
inline ::std::string* client_call::mutable_func() {
  
  // @@protoc_insertion_point(field_mutable:s2s.client.call.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* client_call::release_func() {
  // @@protoc_insertion_point(field_release:s2s.client.call.func)
  
  return func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void client_call::set_allocated_func(::std::string* func) {
  if (func != nullptr) {
    
  } else {
    
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:s2s.client.call.func)
}

// .google.protobuf.Any data = 2;
inline bool client_call::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& client_call::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.client.call.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* client_call::release_data() {
  // @@protoc_insertion_point(field_release:s2s.client.call.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* client_call::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.client.call.data)
  return data_;
}
inline void client_call::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.client.call.data)
}

// -------------------------------------------------------------------

// client

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2eproto
