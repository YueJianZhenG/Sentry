// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#ifndef PROTOBUF_INCLUDED_s2s_2eproto
#define PROTOBUF_INCLUDED_s2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2eproto();
namespace s2s {
class Allot;
class AllotDefaultTypeInternal;
extern AllotDefaultTypeInternal _Allot_default_instance_;
class Allot_Response;
class Allot_ResponseDefaultTypeInternal;
extern Allot_ResponseDefaultTypeInternal _Allot_Response_default_instance_;
class Allot_Save;
class Allot_SaveDefaultTypeInternal;
extern Allot_SaveDefaultTypeInternal _Allot_Save_default_instance_;
class CallClient;
class CallClientDefaultTypeInternal;
extern CallClientDefaultTypeInternal _CallClient_default_instance_;
class CallClient_Request;
class CallClient_RequestDefaultTypeInternal;
extern CallClient_RequestDefaultTypeInternal _CallClient_Request_default_instance_;
class GateBroadCast;
class GateBroadCastDefaultTypeInternal;
extern GateBroadCastDefaultTypeInternal _GateBroadCast_default_instance_;
class GateBroadCast_Request;
class GateBroadCast_RequestDefaultTypeInternal;
extern GateBroadCast_RequestDefaultTypeInternal _GateBroadCast_Request_default_instance_;
class GateBroadCast_Response;
class GateBroadCast_ResponseDefaultTypeInternal;
extern GateBroadCast_ResponseDefaultTypeInternal _GateBroadCast_Response_default_instance_;
class Mongo;
class MongoDefaultTypeInternal;
extern MongoDefaultTypeInternal _Mongo_default_instance_;
class Mongo_Delete;
class Mongo_DeleteDefaultTypeInternal;
extern Mongo_DeleteDefaultTypeInternal _Mongo_Delete_default_instance_;
class Mongo_Insert;
class Mongo_InsertDefaultTypeInternal;
extern Mongo_InsertDefaultTypeInternal _Mongo_Insert_default_instance_;
class Mongo_Query;
class Mongo_QueryDefaultTypeInternal;
extern Mongo_QueryDefaultTypeInternal _Mongo_Query_default_instance_;
class Mongo_Query_Request;
class Mongo_Query_RequestDefaultTypeInternal;
extern Mongo_Query_RequestDefaultTypeInternal _Mongo_Query_Request_default_instance_;
class Mongo_Query_Response;
class Mongo_Query_ResponseDefaultTypeInternal;
extern Mongo_Query_ResponseDefaultTypeInternal _Mongo_Query_Response_default_instance_;
class Mongo_Update;
class Mongo_UpdateDefaultTypeInternal;
extern Mongo_UpdateDefaultTypeInternal _Mongo_Update_default_instance_;
class Mysql;
class MysqlDefaultTypeInternal;
extern MysqlDefaultTypeInternal _Mysql_default_instance_;
class Mysql_Add;
class Mysql_AddDefaultTypeInternal;
extern Mysql_AddDefaultTypeInternal _Mysql_Add_default_instance_;
class Mysql_Create;
class Mysql_CreateDefaultTypeInternal;
extern Mysql_CreateDefaultTypeInternal _Mysql_Create_default_instance_;
class Mysql_Delete;
class Mysql_DeleteDefaultTypeInternal;
extern Mysql_DeleteDefaultTypeInternal _Mysql_Delete_default_instance_;
class Mysql_Query;
class Mysql_QueryDefaultTypeInternal;
extern Mysql_QueryDefaultTypeInternal _Mysql_Query_default_instance_;
class Mysql_Response;
class Mysql_ResponseDefaultTypeInternal;
extern Mysql_ResponseDefaultTypeInternal _Mysql_Response_default_instance_;
class Mysql_Save;
class Mysql_SaveDefaultTypeInternal;
extern Mysql_SaveDefaultTypeInternal _Mysql_Save_default_instance_;
class Mysql_Update;
class Mysql_UpdateDefaultTypeInternal;
extern Mysql_UpdateDefaultTypeInternal _Mysql_Update_default_instance_;
}  // namespace s2s
namespace google {
namespace protobuf {
template<> ::s2s::Allot* Arena::CreateMaybeMessage<::s2s::Allot>(Arena*);
template<> ::s2s::Allot_Response* Arena::CreateMaybeMessage<::s2s::Allot_Response>(Arena*);
template<> ::s2s::Allot_Save* Arena::CreateMaybeMessage<::s2s::Allot_Save>(Arena*);
template<> ::s2s::CallClient* Arena::CreateMaybeMessage<::s2s::CallClient>(Arena*);
template<> ::s2s::CallClient_Request* Arena::CreateMaybeMessage<::s2s::CallClient_Request>(Arena*);
template<> ::s2s::GateBroadCast* Arena::CreateMaybeMessage<::s2s::GateBroadCast>(Arena*);
template<> ::s2s::GateBroadCast_Request* Arena::CreateMaybeMessage<::s2s::GateBroadCast_Request>(Arena*);
template<> ::s2s::GateBroadCast_Response* Arena::CreateMaybeMessage<::s2s::GateBroadCast_Response>(Arena*);
template<> ::s2s::Mongo* Arena::CreateMaybeMessage<::s2s::Mongo>(Arena*);
template<> ::s2s::Mongo_Delete* Arena::CreateMaybeMessage<::s2s::Mongo_Delete>(Arena*);
template<> ::s2s::Mongo_Insert* Arena::CreateMaybeMessage<::s2s::Mongo_Insert>(Arena*);
template<> ::s2s::Mongo_Query* Arena::CreateMaybeMessage<::s2s::Mongo_Query>(Arena*);
template<> ::s2s::Mongo_Query_Request* Arena::CreateMaybeMessage<::s2s::Mongo_Query_Request>(Arena*);
template<> ::s2s::Mongo_Query_Response* Arena::CreateMaybeMessage<::s2s::Mongo_Query_Response>(Arena*);
template<> ::s2s::Mongo_Update* Arena::CreateMaybeMessage<::s2s::Mongo_Update>(Arena*);
template<> ::s2s::Mysql* Arena::CreateMaybeMessage<::s2s::Mysql>(Arena*);
template<> ::s2s::Mysql_Add* Arena::CreateMaybeMessage<::s2s::Mysql_Add>(Arena*);
template<> ::s2s::Mysql_Create* Arena::CreateMaybeMessage<::s2s::Mysql_Create>(Arena*);
template<> ::s2s::Mysql_Delete* Arena::CreateMaybeMessage<::s2s::Mysql_Delete>(Arena*);
template<> ::s2s::Mysql_Query* Arena::CreateMaybeMessage<::s2s::Mysql_Query>(Arena*);
template<> ::s2s::Mysql_Response* Arena::CreateMaybeMessage<::s2s::Mysql_Response>(Arena*);
template<> ::s2s::Mysql_Save* Arena::CreateMaybeMessage<::s2s::Mysql_Save>(Arena*);
template<> ::s2s::Mysql_Update* Arena::CreateMaybeMessage<::s2s::Mysql_Update>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace s2s {

// ===================================================================

class Mysql_Create :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Create) */ {
 public:
  Mysql_Create();
  virtual ~Mysql_Create();

  Mysql_Create(const Mysql_Create& from);

  inline Mysql_Create& operator=(const Mysql_Create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Create(Mysql_Create&& from) noexcept
    : Mysql_Create() {
    *this = ::std::move(from);
  }

  inline Mysql_Create& operator=(Mysql_Create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Create* internal_default_instance() {
    return reinterpret_cast<const Mysql_Create*>(
               &_Mysql_Create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Mysql_Create* other);
  friend void swap(Mysql_Create& a, Mysql_Create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Create* New() const final {
    return CreateMaybeMessage<Mysql_Create>(nullptr);
  }

  Mysql_Create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Create& from);
  void MergeFrom(const Mysql_Create& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 4;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 4;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_keys();

  // repeated string indexs = 5;
  int indexs_size() const;
  void clear_indexs();
  static const int kIndexsFieldNumber = 5;
  const ::std::string& indexs(int index) const;
  ::std::string* mutable_indexs(int index);
  void set_indexs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_indexs(int index, ::std::string&& value);
  #endif
  void set_indexs(int index, const char* value);
  void set_indexs(int index, const char* value, size_t size);
  ::std::string* add_indexs();
  void add_indexs(const ::std::string& value);
  #if LANG_CXX11
  void add_indexs(::std::string&& value);
  #endif
  void add_indexs(const char* value);
  void add_indexs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& indexs() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_indexs();

  // string db = 1;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // string tab = 2;
  void clear_tab();
  static const int kTabFieldNumber = 2;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string proto = 3;
  void clear_proto();
  static const int kProtoFieldNumber = 3;
  const ::std::string& proto() const;
  void set_proto(const ::std::string& value);
  #if LANG_CXX11
  void set_proto(::std::string&& value);
  #endif
  void set_proto(const char* value);
  void set_proto(const char* value, size_t size);
  ::std::string* mutable_proto();
  ::std::string* release_proto();
  void set_allocated_proto(::std::string* proto);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Create)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> keys_;
  ::google::protobuf::RepeatedPtrField<::std::string> indexs_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr proto_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Add :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Add) */ {
 public:
  Mysql_Add();
  virtual ~Mysql_Add();

  Mysql_Add(const Mysql_Add& from);

  inline Mysql_Add& operator=(const Mysql_Add& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Add(Mysql_Add&& from) noexcept
    : Mysql_Add() {
    *this = ::std::move(from);
  }

  inline Mysql_Add& operator=(Mysql_Add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Add* internal_default_instance() {
    return reinterpret_cast<const Mysql_Add*>(
               &_Mysql_Add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Mysql_Add* other);
  friend void swap(Mysql_Add& a, Mysql_Add& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Add* New() const final {
    return CreateMaybeMessage<Mysql_Add>(nullptr);
  }

  Mysql_Add* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Add>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Add& from);
  void MergeFrom(const Mysql_Add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Add* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .google.protobuf.Any data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // int64 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int64 flag() const;
  void set_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Add)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::int64 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Save :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Save) */ {
 public:
  Mysql_Save();
  virtual ~Mysql_Save();

  Mysql_Save(const Mysql_Save& from);

  inline Mysql_Save& operator=(const Mysql_Save& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Save(Mysql_Save&& from) noexcept
    : Mysql_Save() {
    *this = ::std::move(from);
  }

  inline Mysql_Save& operator=(Mysql_Save&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Save* internal_default_instance() {
    return reinterpret_cast<const Mysql_Save*>(
               &_Mysql_Save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Mysql_Save* other);
  friend void swap(Mysql_Save& a, Mysql_Save& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Save* New() const final {
    return CreateMaybeMessage<Mysql_Save>(nullptr);
  }

  Mysql_Save* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Save>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Save& from);
  void MergeFrom(const Mysql_Save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Save* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .google.protobuf.Any data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // int64 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int64 flag() const;
  void set_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Save)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::int64 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Query :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Query) */ {
 public:
  Mysql_Query();
  virtual ~Mysql_Query();

  Mysql_Query(const Mysql_Query& from);

  inline Mysql_Query& operator=(const Mysql_Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Query(Mysql_Query&& from) noexcept
    : Mysql_Query() {
    *this = ::std::move(from);
  }

  inline Mysql_Query& operator=(Mysql_Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Query* internal_default_instance() {
    return reinterpret_cast<const Mysql_Query*>(
               &_Mysql_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Mysql_Query* other);
  friend void swap(Mysql_Query& a, Mysql_Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Query* New() const final {
    return CreateMaybeMessage<Mysql_Query>(nullptr);
  }

  Mysql_Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Query& from);
  void MergeFrom(const Mysql_Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where_json = 3;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 3;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // int64 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int64 flag() const;
  void set_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Query)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  ::google::protobuf::int64 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Delete :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Delete) */ {
 public:
  Mysql_Delete();
  virtual ~Mysql_Delete();

  Mysql_Delete(const Mysql_Delete& from);

  inline Mysql_Delete& operator=(const Mysql_Delete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Delete(Mysql_Delete&& from) noexcept
    : Mysql_Delete() {
    *this = ::std::move(from);
  }

  inline Mysql_Delete& operator=(Mysql_Delete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Delete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Delete* internal_default_instance() {
    return reinterpret_cast<const Mysql_Delete*>(
               &_Mysql_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Mysql_Delete* other);
  friend void swap(Mysql_Delete& a, Mysql_Delete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Delete* New() const final {
    return CreateMaybeMessage<Mysql_Delete>(nullptr);
  }

  Mysql_Delete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Delete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Delete& from);
  void MergeFrom(const Mysql_Delete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Delete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where_json = 3;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 3;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // int64 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int64 flag() const;
  void set_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Delete)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  ::google::protobuf::int64 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Update :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Update) */ {
 public:
  Mysql_Update();
  virtual ~Mysql_Update();

  Mysql_Update(const Mysql_Update& from);

  inline Mysql_Update& operator=(const Mysql_Update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Update(Mysql_Update&& from) noexcept
    : Mysql_Update() {
    *this = ::std::move(from);
  }

  inline Mysql_Update& operator=(Mysql_Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Update* internal_default_instance() {
    return reinterpret_cast<const Mysql_Update*>(
               &_Mysql_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Mysql_Update* other);
  friend void swap(Mysql_Update& a, Mysql_Update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Update* New() const final {
    return CreateMaybeMessage<Mysql_Update>(nullptr);
  }

  Mysql_Update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Update& from);
  void MergeFrom(const Mysql_Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string update_json = 3;
  void clear_update_json();
  static const int kUpdateJsonFieldNumber = 3;
  const ::std::string& update_json() const;
  void set_update_json(const ::std::string& value);
  #if LANG_CXX11
  void set_update_json(::std::string&& value);
  #endif
  void set_update_json(const char* value);
  void set_update_json(const char* value, size_t size);
  ::std::string* mutable_update_json();
  ::std::string* release_update_json();
  void set_allocated_update_json(::std::string* update_json);

  // string where_json = 4;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 4;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // int64 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int64 flag() const;
  void set_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Update)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr update_json_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  ::google::protobuf::int64 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Response) */ {
 public:
  Mysql_Response();
  virtual ~Mysql_Response();

  Mysql_Response(const Mysql_Response& from);

  inline Mysql_Response& operator=(const Mysql_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Response(Mysql_Response&& from) noexcept
    : Mysql_Response() {
    *this = ::std::move(from);
  }

  inline Mysql_Response& operator=(Mysql_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Response* internal_default_instance() {
    return reinterpret_cast<const Mysql_Response*>(
               &_Mysql_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Mysql_Response* other);
  friend void swap(Mysql_Response& a, Mysql_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Response* New() const final {
    return CreateMaybeMessage<Mysql_Response>(nullptr);
  }

  Mysql_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Response& from);
  void MergeFrom(const Mysql_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string jsons = 2;
  int jsons_size() const;
  void clear_jsons();
  static const int kJsonsFieldNumber = 2;
  const ::std::string& jsons(int index) const;
  ::std::string* mutable_jsons(int index);
  void set_jsons(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jsons(int index, ::std::string&& value);
  #endif
  void set_jsons(int index, const char* value);
  void set_jsons(int index, const char* value, size_t size);
  ::std::string* add_jsons();
  void add_jsons(const ::std::string& value);
  #if LANG_CXX11
  void add_jsons(::std::string&& value);
  #endif
  void add_jsons(const char* value);
  void add_jsons(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& jsons() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_jsons();

  // string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> jsons_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql) */ {
 public:
  Mysql();
  virtual ~Mysql();

  Mysql(const Mysql& from);

  inline Mysql& operator=(const Mysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql(Mysql&& from) noexcept
    : Mysql() {
    *this = ::std::move(from);
  }

  inline Mysql& operator=(Mysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql* internal_default_instance() {
    return reinterpret_cast<const Mysql*>(
               &_Mysql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Mysql* other);
  friend void swap(Mysql& a, Mysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql* New() const final {
    return CreateMaybeMessage<Mysql>(nullptr);
  }

  Mysql* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql& from);
  void MergeFrom(const Mysql& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mysql_Create Create;
  typedef Mysql_Add Add;
  typedef Mysql_Save Save;
  typedef Mysql_Query Query;
  typedef Mysql_Delete Delete;
  typedef Mysql_Update Update;
  typedef Mysql_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.Mysql)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mongo_Insert :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mongo.Insert) */ {
 public:
  Mongo_Insert();
  virtual ~Mongo_Insert();

  Mongo_Insert(const Mongo_Insert& from);

  inline Mongo_Insert& operator=(const Mongo_Insert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mongo_Insert(Mongo_Insert&& from) noexcept
    : Mongo_Insert() {
    *this = ::std::move(from);
  }

  inline Mongo_Insert& operator=(Mongo_Insert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mongo_Insert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mongo_Insert* internal_default_instance() {
    return reinterpret_cast<const Mongo_Insert*>(
               &_Mongo_Insert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Mongo_Insert* other);
  friend void swap(Mongo_Insert& a, Mongo_Insert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mongo_Insert* New() const final {
    return CreateMaybeMessage<Mongo_Insert>(nullptr);
  }

  Mongo_Insert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mongo_Insert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mongo_Insert& from);
  void MergeFrom(const Mongo_Insert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mongo_Insert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string json = 2;
  void clear_json();
  static const int kJsonFieldNumber = 2;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:s2s.Mongo.Insert)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mongo_Query_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mongo.Query.Request) */ {
 public:
  Mongo_Query_Request();
  virtual ~Mongo_Query_Request();

  Mongo_Query_Request(const Mongo_Query_Request& from);

  inline Mongo_Query_Request& operator=(const Mongo_Query_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mongo_Query_Request(Mongo_Query_Request&& from) noexcept
    : Mongo_Query_Request() {
    *this = ::std::move(from);
  }

  inline Mongo_Query_Request& operator=(Mongo_Query_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mongo_Query_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mongo_Query_Request* internal_default_instance() {
    return reinterpret_cast<const Mongo_Query_Request*>(
               &_Mongo_Query_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Mongo_Query_Request* other);
  friend void swap(Mongo_Query_Request& a, Mongo_Query_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mongo_Query_Request* New() const final {
    return CreateMaybeMessage<Mongo_Query_Request>(nullptr);
  }

  Mongo_Query_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mongo_Query_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mongo_Query_Request& from);
  void MergeFrom(const Mongo_Query_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mongo_Query_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string json = 2;
  void clear_json();
  static const int kJsonFieldNumber = 2;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.Mongo.Query.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mongo_Query_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mongo.Query.Response) */ {
 public:
  Mongo_Query_Response();
  virtual ~Mongo_Query_Response();

  Mongo_Query_Response(const Mongo_Query_Response& from);

  inline Mongo_Query_Response& operator=(const Mongo_Query_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mongo_Query_Response(Mongo_Query_Response&& from) noexcept
    : Mongo_Query_Response() {
    *this = ::std::move(from);
  }

  inline Mongo_Query_Response& operator=(Mongo_Query_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mongo_Query_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mongo_Query_Response* internal_default_instance() {
    return reinterpret_cast<const Mongo_Query_Response*>(
               &_Mongo_Query_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Mongo_Query_Response* other);
  friend void swap(Mongo_Query_Response& a, Mongo_Query_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mongo_Query_Response* New() const final {
    return CreateMaybeMessage<Mongo_Query_Response>(nullptr);
  }

  Mongo_Query_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mongo_Query_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mongo_Query_Response& from);
  void MergeFrom(const Mongo_Query_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mongo_Query_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string jsons = 1;
  int jsons_size() const;
  void clear_jsons();
  static const int kJsonsFieldNumber = 1;
  const ::std::string& jsons(int index) const;
  ::std::string* mutable_jsons(int index);
  void set_jsons(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jsons(int index, ::std::string&& value);
  #endif
  void set_jsons(int index, const char* value);
  void set_jsons(int index, const char* value, size_t size);
  ::std::string* add_jsons();
  void add_jsons(const ::std::string& value);
  #if LANG_CXX11
  void add_jsons(::std::string&& value);
  #endif
  void add_jsons(const char* value);
  void add_jsons(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& jsons() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_jsons();

  // @@protoc_insertion_point(class_scope:s2s.Mongo.Query.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> jsons_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mongo_Query :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mongo.Query) */ {
 public:
  Mongo_Query();
  virtual ~Mongo_Query();

  Mongo_Query(const Mongo_Query& from);

  inline Mongo_Query& operator=(const Mongo_Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mongo_Query(Mongo_Query&& from) noexcept
    : Mongo_Query() {
    *this = ::std::move(from);
  }

  inline Mongo_Query& operator=(Mongo_Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mongo_Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mongo_Query* internal_default_instance() {
    return reinterpret_cast<const Mongo_Query*>(
               &_Mongo_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Mongo_Query* other);
  friend void swap(Mongo_Query& a, Mongo_Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mongo_Query* New() const final {
    return CreateMaybeMessage<Mongo_Query>(nullptr);
  }

  Mongo_Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mongo_Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mongo_Query& from);
  void MergeFrom(const Mongo_Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mongo_Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mongo_Query_Request Request;
  typedef Mongo_Query_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.Mongo.Query)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mongo_Delete :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mongo.Delete) */ {
 public:
  Mongo_Delete();
  virtual ~Mongo_Delete();

  Mongo_Delete(const Mongo_Delete& from);

  inline Mongo_Delete& operator=(const Mongo_Delete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mongo_Delete(Mongo_Delete&& from) noexcept
    : Mongo_Delete() {
    *this = ::std::move(from);
  }

  inline Mongo_Delete& operator=(Mongo_Delete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mongo_Delete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mongo_Delete* internal_default_instance() {
    return reinterpret_cast<const Mongo_Delete*>(
               &_Mongo_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Mongo_Delete* other);
  friend void swap(Mongo_Delete& a, Mongo_Delete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mongo_Delete* New() const final {
    return CreateMaybeMessage<Mongo_Delete>(nullptr);
  }

  Mongo_Delete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mongo_Delete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mongo_Delete& from);
  void MergeFrom(const Mongo_Delete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mongo_Delete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string json = 2;
  void clear_json();
  static const int kJsonFieldNumber = 2;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.Mongo.Delete)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mongo_Update :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mongo.Update) */ {
 public:
  Mongo_Update();
  virtual ~Mongo_Update();

  Mongo_Update(const Mongo_Update& from);

  inline Mongo_Update& operator=(const Mongo_Update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mongo_Update(Mongo_Update&& from) noexcept
    : Mongo_Update() {
    *this = ::std::move(from);
  }

  inline Mongo_Update& operator=(Mongo_Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mongo_Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mongo_Update* internal_default_instance() {
    return reinterpret_cast<const Mongo_Update*>(
               &_Mongo_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Mongo_Update* other);
  friend void swap(Mongo_Update& a, Mongo_Update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mongo_Update* New() const final {
    return CreateMaybeMessage<Mongo_Update>(nullptr);
  }

  Mongo_Update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mongo_Update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mongo_Update& from);
  void MergeFrom(const Mongo_Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mongo_Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string select = 2;
  void clear_select();
  static const int kSelectFieldNumber = 2;
  const ::std::string& select() const;
  void set_select(const ::std::string& value);
  #if LANG_CXX11
  void set_select(::std::string&& value);
  #endif
  void set_select(const char* value);
  void set_select(const char* value, size_t size);
  ::std::string* mutable_select();
  ::std::string* release_select();
  void set_allocated_select(::std::string* select);

  // string update = 3;
  void clear_update();
  static const int kUpdateFieldNumber = 3;
  const ::std::string& update() const;
  void set_update(const ::std::string& value);
  #if LANG_CXX11
  void set_update(::std::string&& value);
  #endif
  void set_update(const char* value);
  void set_update(const char* value, size_t size);
  ::std::string* mutable_update();
  ::std::string* release_update();
  void set_allocated_update(::std::string* update);

  // string tag = 4;
  void clear_tag();
  static const int kTagFieldNumber = 4;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:s2s.Mongo.Update)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr select_;
  ::google::protobuf::internal::ArenaStringPtr update_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mongo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mongo) */ {
 public:
  Mongo();
  virtual ~Mongo();

  Mongo(const Mongo& from);

  inline Mongo& operator=(const Mongo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mongo(Mongo&& from) noexcept
    : Mongo() {
    *this = ::std::move(from);
  }

  inline Mongo& operator=(Mongo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mongo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mongo* internal_default_instance() {
    return reinterpret_cast<const Mongo*>(
               &_Mongo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Mongo* other);
  friend void swap(Mongo& a, Mongo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mongo* New() const final {
    return CreateMaybeMessage<Mongo>(nullptr);
  }

  Mongo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mongo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mongo& from);
  void MergeFrom(const Mongo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mongo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mongo_Insert Insert;
  typedef Mongo_Query Query;
  typedef Mongo_Delete Delete;
  typedef Mongo_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.Mongo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Allot_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Allot.Response) */ {
 public:
  Allot_Response();
  virtual ~Allot_Response();

  Allot_Response(const Allot_Response& from);

  inline Allot_Response& operator=(const Allot_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Allot_Response(Allot_Response&& from) noexcept
    : Allot_Response() {
    *this = ::std::move(from);
  }

  inline Allot_Response& operator=(Allot_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Allot_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Allot_Response* internal_default_instance() {
    return reinterpret_cast<const Allot_Response*>(
               &_Allot_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Allot_Response* other);
  friend void swap(Allot_Response& a, Allot_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Allot_Response* New() const final {
    return CreateMaybeMessage<Allot_Response>(nullptr);
  }

  Allot_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Allot_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Allot_Response& from);
  void MergeFrom(const Allot_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Allot_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:s2s.Allot.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Allot_Save :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Allot.Save) */ {
 public:
  Allot_Save();
  virtual ~Allot_Save();

  Allot_Save(const Allot_Save& from);

  inline Allot_Save& operator=(const Allot_Save& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Allot_Save(Allot_Save&& from) noexcept
    : Allot_Save() {
    *this = ::std::move(from);
  }

  inline Allot_Save& operator=(Allot_Save&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Allot_Save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Allot_Save* internal_default_instance() {
    return reinterpret_cast<const Allot_Save*>(
               &_Allot_Save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Allot_Save* other);
  friend void swap(Allot_Save& a, Allot_Save& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Allot_Save* New() const final {
    return CreateMaybeMessage<Allot_Save>(nullptr);
  }

  Allot_Save* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Allot_Save>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Allot_Save& from);
  void MergeFrom(const Allot_Save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Allot_Save* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:s2s.Allot.Save)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Allot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Allot) */ {
 public:
  Allot();
  virtual ~Allot();

  Allot(const Allot& from);

  inline Allot& operator=(const Allot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Allot(Allot&& from) noexcept
    : Allot() {
    *this = ::std::move(from);
  }

  inline Allot& operator=(Allot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Allot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Allot* internal_default_instance() {
    return reinterpret_cast<const Allot*>(
               &_Allot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Allot* other);
  friend void swap(Allot& a, Allot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Allot* New() const final {
    return CreateMaybeMessage<Allot>(nullptr);
  }

  Allot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Allot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Allot& from);
  void MergeFrom(const Allot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Allot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Allot_Response Response;
  typedef Allot_Save Save;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.Allot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class GateBroadCast_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.GateBroadCast.Request) */ {
 public:
  GateBroadCast_Request();
  virtual ~GateBroadCast_Request();

  GateBroadCast_Request(const GateBroadCast_Request& from);

  inline GateBroadCast_Request& operator=(const GateBroadCast_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateBroadCast_Request(GateBroadCast_Request&& from) noexcept
    : GateBroadCast_Request() {
    *this = ::std::move(from);
  }

  inline GateBroadCast_Request& operator=(GateBroadCast_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GateBroadCast_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateBroadCast_Request* internal_default_instance() {
    return reinterpret_cast<const GateBroadCast_Request*>(
               &_GateBroadCast_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GateBroadCast_Request* other);
  friend void swap(GateBroadCast_Request& a, GateBroadCast_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateBroadCast_Request* New() const final {
    return CreateMaybeMessage<GateBroadCast_Request>(nullptr);
  }

  GateBroadCast_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateBroadCast_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateBroadCast_Request& from);
  void MergeFrom(const GateBroadCast_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateBroadCast_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string func = 1;
  void clear_func();
  static const int kFuncFieldNumber = 1;
  const ::std::string& func() const;
  void set_func(const ::std::string& value);
  #if LANG_CXX11
  void set_func(::std::string&& value);
  #endif
  void set_func(const char* value);
  void set_func(const char* value, size_t size);
  ::std::string* mutable_func();
  ::std::string* release_func();
  void set_allocated_func(::std::string* func);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.GateBroadCast.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr func_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class GateBroadCast_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.GateBroadCast.Response) */ {
 public:
  GateBroadCast_Response();
  virtual ~GateBroadCast_Response();

  GateBroadCast_Response(const GateBroadCast_Response& from);

  inline GateBroadCast_Response& operator=(const GateBroadCast_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateBroadCast_Response(GateBroadCast_Response&& from) noexcept
    : GateBroadCast_Response() {
    *this = ::std::move(from);
  }

  inline GateBroadCast_Response& operator=(GateBroadCast_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GateBroadCast_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateBroadCast_Response* internal_default_instance() {
    return reinterpret_cast<const GateBroadCast_Response*>(
               &_GateBroadCast_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GateBroadCast_Response* other);
  friend void swap(GateBroadCast_Response& a, GateBroadCast_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateBroadCast_Response* New() const final {
    return CreateMaybeMessage<GateBroadCast_Response>(nullptr);
  }

  GateBroadCast_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateBroadCast_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateBroadCast_Response& from);
  void MergeFrom(const GateBroadCast_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateBroadCast_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.GateBroadCast.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class GateBroadCast :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.GateBroadCast) */ {
 public:
  GateBroadCast();
  virtual ~GateBroadCast();

  GateBroadCast(const GateBroadCast& from);

  inline GateBroadCast& operator=(const GateBroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateBroadCast(GateBroadCast&& from) noexcept
    : GateBroadCast() {
    *this = ::std::move(from);
  }

  inline GateBroadCast& operator=(GateBroadCast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GateBroadCast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateBroadCast* internal_default_instance() {
    return reinterpret_cast<const GateBroadCast*>(
               &_GateBroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(GateBroadCast* other);
  friend void swap(GateBroadCast& a, GateBroadCast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateBroadCast* New() const final {
    return CreateMaybeMessage<GateBroadCast>(nullptr);
  }

  GateBroadCast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateBroadCast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateBroadCast& from);
  void MergeFrom(const GateBroadCast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateBroadCast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GateBroadCast_Request Request;
  typedef GateBroadCast_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.GateBroadCast)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class CallClient_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.CallClient.Request) */ {
 public:
  CallClient_Request();
  virtual ~CallClient_Request();

  CallClient_Request(const CallClient_Request& from);

  inline CallClient_Request& operator=(const CallClient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallClient_Request(CallClient_Request&& from) noexcept
    : CallClient_Request() {
    *this = ::std::move(from);
  }

  inline CallClient_Request& operator=(CallClient_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CallClient_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallClient_Request* internal_default_instance() {
    return reinterpret_cast<const CallClient_Request*>(
               &_CallClient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CallClient_Request* other);
  friend void swap(CallClient_Request& a, CallClient_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallClient_Request* New() const final {
    return CreateMaybeMessage<CallClient_Request>(nullptr);
  }

  CallClient_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallClient_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallClient_Request& from);
  void MergeFrom(const CallClient_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallClient_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string func = 1;
  void clear_func();
  static const int kFuncFieldNumber = 1;
  const ::std::string& func() const;
  void set_func(const ::std::string& value);
  #if LANG_CXX11
  void set_func(::std::string&& value);
  #endif
  void set_func(const char* value);
  void set_func(const char* value, size_t size);
  ::std::string* mutable_func();
  ::std::string* release_func();
  void set_allocated_func(::std::string* func);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.CallClient.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr func_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class CallClient :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.CallClient) */ {
 public:
  CallClient();
  virtual ~CallClient();

  CallClient(const CallClient& from);

  inline CallClient& operator=(const CallClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallClient(CallClient&& from) noexcept
    : CallClient() {
    *this = ::std::move(from);
  }

  inline CallClient& operator=(CallClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CallClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallClient* internal_default_instance() {
    return reinterpret_cast<const CallClient*>(
               &_CallClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CallClient* other);
  friend void swap(CallClient& a, CallClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallClient* New() const final {
    return CreateMaybeMessage<CallClient>(nullptr);
  }

  CallClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallClient& from);
  void MergeFrom(const CallClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CallClient_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.CallClient)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mysql_Create

// string db = 1;
inline void Mysql_Create::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Create::db() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Create.db)
  return db_.GetNoArena();
}
inline void Mysql_Create::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Create.db)
}
#if LANG_CXX11
inline void Mysql_Create::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Create.db)
}
#endif
inline void Mysql_Create::set_db(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Create.db)
}
inline void Mysql_Create::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Create.db)
}
inline ::std::string* Mysql_Create::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Create.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Create::release_db() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Create.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Create::set_allocated_db(::std::string* db) {
  if (db != nullptr) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Create.db)
}

// string tab = 2;
inline void Mysql_Create::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Create::tab() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Create.tab)
  return tab_.GetNoArena();
}
inline void Mysql_Create::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Create.tab)
}
#if LANG_CXX11
inline void Mysql_Create::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Create.tab)
}
#endif
inline void Mysql_Create::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Create.tab)
}
inline void Mysql_Create::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Create.tab)
}
inline ::std::string* Mysql_Create::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Create.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Create::release_tab() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Create.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Create::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Create.tab)
}

// string proto = 3;
inline void Mysql_Create::clear_proto() {
  proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Create::proto() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Create.proto)
  return proto_.GetNoArena();
}
inline void Mysql_Create::set_proto(const ::std::string& value) {
  
  proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Create.proto)
}
#if LANG_CXX11
inline void Mysql_Create::set_proto(::std::string&& value) {
  
  proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Create.proto)
}
#endif
inline void Mysql_Create::set_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Create.proto)
}
inline void Mysql_Create::set_proto(const char* value, size_t size) {
  
  proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Create.proto)
}
inline ::std::string* Mysql_Create::mutable_proto() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Create.proto)
  return proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Create::release_proto() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Create.proto)
  
  return proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Create::set_allocated_proto(::std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Create.proto)
}

// repeated string keys = 4;
inline int Mysql_Create::keys_size() const {
  return keys_.size();
}
inline void Mysql_Create::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& Mysql_Create::keys(int index) const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Create.keys)
  return keys_.Get(index);
}
inline ::std::string* Mysql_Create::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Create.keys)
  return keys_.Mutable(index);
}
inline void Mysql_Create::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Create.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mysql_Create::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Create.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mysql_Create::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Create.keys)
}
inline void Mysql_Create::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Create.keys)
}
inline ::std::string* Mysql_Create::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:s2s.Mysql.Create.keys)
  return keys_.Add();
}
inline void Mysql_Create::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.Mysql.Create.keys)
}
#if LANG_CXX11
inline void Mysql_Create::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.Mysql.Create.keys)
}
#endif
inline void Mysql_Create::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.Mysql.Create.keys)
}
inline void Mysql_Create::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.Mysql.Create.keys)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Mysql_Create::keys() const {
  // @@protoc_insertion_point(field_list:s2s.Mysql.Create.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Mysql_Create::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:s2s.Mysql.Create.keys)
  return &keys_;
}

// repeated string indexs = 5;
inline int Mysql_Create::indexs_size() const {
  return indexs_.size();
}
inline void Mysql_Create::clear_indexs() {
  indexs_.Clear();
}
inline const ::std::string& Mysql_Create::indexs(int index) const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Create.indexs)
  return indexs_.Get(index);
}
inline ::std::string* Mysql_Create::mutable_indexs(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Create.indexs)
  return indexs_.Mutable(index);
}
inline void Mysql_Create::set_indexs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Create.indexs)
  indexs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mysql_Create::set_indexs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Create.indexs)
  indexs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mysql_Create::set_indexs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  indexs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Create.indexs)
}
inline void Mysql_Create::set_indexs(int index, const char* value, size_t size) {
  indexs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Create.indexs)
}
inline ::std::string* Mysql_Create::add_indexs() {
  // @@protoc_insertion_point(field_add_mutable:s2s.Mysql.Create.indexs)
  return indexs_.Add();
}
inline void Mysql_Create::add_indexs(const ::std::string& value) {
  indexs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.Mysql.Create.indexs)
}
#if LANG_CXX11
inline void Mysql_Create::add_indexs(::std::string&& value) {
  indexs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.Mysql.Create.indexs)
}
#endif
inline void Mysql_Create::add_indexs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  indexs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.Mysql.Create.indexs)
}
inline void Mysql_Create::add_indexs(const char* value, size_t size) {
  indexs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.Mysql.Create.indexs)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Mysql_Create::indexs() const {
  // @@protoc_insertion_point(field_list:s2s.Mysql.Create.indexs)
  return indexs_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Mysql_Create::mutable_indexs() {
  // @@protoc_insertion_point(field_mutable_list:s2s.Mysql.Create.indexs)
  return &indexs_;
}

// -------------------------------------------------------------------

// Mysql_Add

// int64 flag = 1;
inline void Mysql_Add::clear_flag() {
  flag_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Mysql_Add::flag() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Add.flag)
  return flag_;
}
inline void Mysql_Add::set_flag(::google::protobuf::int64 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:s2s.Mysql.Add.flag)
}

// string table = 2;
inline void Mysql_Add::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Add::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Add.table)
  return table_.GetNoArena();
}
inline void Mysql_Add::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Add.table)
}
#if LANG_CXX11
inline void Mysql_Add::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Add.table)
}
#endif
inline void Mysql_Add::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Add.table)
}
inline void Mysql_Add::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Add.table)
}
inline ::std::string* Mysql_Add::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Add.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Add::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Add.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Add::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Add.table)
}

// .google.protobuf.Any data = 3;
inline bool Mysql_Add::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& Mysql_Add::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.Mysql.Add.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Mysql_Add::release_data() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Add.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Mysql_Add::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Add.data)
  return data_;
}
inline void Mysql_Add::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Add.data)
}

// -------------------------------------------------------------------

// Mysql_Save

// int64 flag = 1;
inline void Mysql_Save::clear_flag() {
  flag_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Mysql_Save::flag() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Save.flag)
  return flag_;
}
inline void Mysql_Save::set_flag(::google::protobuf::int64 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:s2s.Mysql.Save.flag)
}

// string table = 2;
inline void Mysql_Save::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Save::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Save.table)
  return table_.GetNoArena();
}
inline void Mysql_Save::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Save.table)
}
#if LANG_CXX11
inline void Mysql_Save::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Save.table)
}
#endif
inline void Mysql_Save::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Save.table)
}
inline void Mysql_Save::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Save.table)
}
inline ::std::string* Mysql_Save::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Save.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Save::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Save.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Save::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Save.table)
}

// .google.protobuf.Any data = 3;
inline bool Mysql_Save::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& Mysql_Save::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.Mysql.Save.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Mysql_Save::release_data() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Save.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Mysql_Save::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Save.data)
  return data_;
}
inline void Mysql_Save::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Save.data)
}

// -------------------------------------------------------------------

// Mysql_Query

// int64 flag = 1;
inline void Mysql_Query::clear_flag() {
  flag_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Mysql_Query::flag() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Query.flag)
  return flag_;
}
inline void Mysql_Query::set_flag(::google::protobuf::int64 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:s2s.Mysql.Query.flag)
}

// string table = 2;
inline void Mysql_Query::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Query::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Query.table)
  return table_.GetNoArena();
}
inline void Mysql_Query::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Query.table)
}
#if LANG_CXX11
inline void Mysql_Query::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Query.table)
}
#endif
inline void Mysql_Query::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Query.table)
}
inline void Mysql_Query::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Query.table)
}
inline ::std::string* Mysql_Query::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Query.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Query::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Query.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Query::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Query.table)
}

// string where_json = 3;
inline void Mysql_Query::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Query::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Query.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Query::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Query.where_json)
}
#if LANG_CXX11
inline void Mysql_Query::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Query.where_json)
}
#endif
inline void Mysql_Query::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Query.where_json)
}
inline void Mysql_Query::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Query.where_json)
}
inline ::std::string* Mysql_Query::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Query.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Query::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Query.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Query::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Query.where_json)
}

// -------------------------------------------------------------------

// Mysql_Delete

// int64 flag = 1;
inline void Mysql_Delete::clear_flag() {
  flag_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Mysql_Delete::flag() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Delete.flag)
  return flag_;
}
inline void Mysql_Delete::set_flag(::google::protobuf::int64 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:s2s.Mysql.Delete.flag)
}

// string table = 2;
inline void Mysql_Delete::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Delete::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Delete.table)
  return table_.GetNoArena();
}
inline void Mysql_Delete::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Delete.table)
}
#if LANG_CXX11
inline void Mysql_Delete::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Delete.table)
}
#endif
inline void Mysql_Delete::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Delete.table)
}
inline void Mysql_Delete::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Delete.table)
}
inline ::std::string* Mysql_Delete::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Delete.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Delete::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Delete.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Delete::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Delete.table)
}

// string where_json = 3;
inline void Mysql_Delete::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Delete::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Delete.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Delete::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Delete.where_json)
}
#if LANG_CXX11
inline void Mysql_Delete::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Delete.where_json)
}
#endif
inline void Mysql_Delete::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Delete.where_json)
}
inline void Mysql_Delete::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Delete.where_json)
}
inline ::std::string* Mysql_Delete::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Delete.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Delete::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Delete.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Delete::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Delete.where_json)
}

// -------------------------------------------------------------------

// Mysql_Update

// int64 flag = 1;
inline void Mysql_Update::clear_flag() {
  flag_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Mysql_Update::flag() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.flag)
  return flag_;
}
inline void Mysql_Update::set_flag(::google::protobuf::int64 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.flag)
}

// string table = 2;
inline void Mysql_Update::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.table)
  return table_.GetNoArena();
}
inline void Mysql_Update::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.table)
}
#if LANG_CXX11
inline void Mysql_Update::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.table)
}
#endif
inline void Mysql_Update::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.table)
}
inline void Mysql_Update::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.table)
}
inline ::std::string* Mysql_Update::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.table)
}

// string update_json = 3;
inline void Mysql_Update::clear_update_json() {
  update_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::update_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.update_json)
  return update_json_.GetNoArena();
}
inline void Mysql_Update::set_update_json(const ::std::string& value) {
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.update_json)
}
#if LANG_CXX11
inline void Mysql_Update::set_update_json(::std::string&& value) {
  
  update_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.update_json)
}
#endif
inline void Mysql_Update::set_update_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.update_json)
}
inline void Mysql_Update::set_update_json(const char* value, size_t size) {
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.update_json)
}
inline ::std::string* Mysql_Update::mutable_update_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.update_json)
  return update_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_update_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.update_json)
  
  return update_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_update_json(::std::string* update_json) {
  if (update_json != nullptr) {
    
  } else {
    
  }
  update_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.update_json)
}

// string where_json = 4;
inline void Mysql_Update::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Update::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.where_json)
}
#if LANG_CXX11
inline void Mysql_Update::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.where_json)
}
#endif
inline void Mysql_Update::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.where_json)
}
inline void Mysql_Update::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.where_json)
}
inline ::std::string* Mysql_Update::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.where_json)
}

// -------------------------------------------------------------------

// Mysql_Response

// string error = 1;
inline void Mysql_Response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Response::error() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Response.error)
  return error_.GetNoArena();
}
inline void Mysql_Response::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.error)
}
#if LANG_CXX11
inline void Mysql_Response::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Response.error)
}
#endif
inline void Mysql_Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Response.error)
}
inline void Mysql_Response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Response.error)
}
inline ::std::string* Mysql_Response::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Response::release_error() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Response.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Response::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Response.error)
}

// repeated string jsons = 2;
inline int Mysql_Response::jsons_size() const {
  return jsons_.size();
}
inline void Mysql_Response::clear_jsons() {
  jsons_.Clear();
}
inline const ::std::string& Mysql_Response::jsons(int index) const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Response.jsons)
  return jsons_.Get(index);
}
inline ::std::string* Mysql_Response::mutable_jsons(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Response.jsons)
  return jsons_.Mutable(index);
}
inline void Mysql_Response::set_jsons(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.jsons)
  jsons_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mysql_Response::set_jsons(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.jsons)
  jsons_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mysql_Response::set_jsons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Response.jsons)
}
inline void Mysql_Response::set_jsons(int index, const char* value, size_t size) {
  jsons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Response.jsons)
}
inline ::std::string* Mysql_Response::add_jsons() {
  // @@protoc_insertion_point(field_add_mutable:s2s.Mysql.Response.jsons)
  return jsons_.Add();
}
inline void Mysql_Response::add_jsons(const ::std::string& value) {
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.Mysql.Response.jsons)
}
#if LANG_CXX11
inline void Mysql_Response::add_jsons(::std::string&& value) {
  jsons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.Mysql.Response.jsons)
}
#endif
inline void Mysql_Response::add_jsons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.Mysql.Response.jsons)
}
inline void Mysql_Response::add_jsons(const char* value, size_t size) {
  jsons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.Mysql.Response.jsons)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Mysql_Response::jsons() const {
  // @@protoc_insertion_point(field_list:s2s.Mysql.Response.jsons)
  return jsons_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Mysql_Response::mutable_jsons() {
  // @@protoc_insertion_point(field_mutable_list:s2s.Mysql.Response.jsons)
  return &jsons_;
}

// -------------------------------------------------------------------

// Mysql

// -------------------------------------------------------------------

// Mongo_Insert

// string tab = 1;
inline void Mongo_Insert::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Insert::tab() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Insert.tab)
  return tab_.GetNoArena();
}
inline void Mongo_Insert::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Insert.tab)
}
#if LANG_CXX11
inline void Mongo_Insert::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Insert.tab)
}
#endif
inline void Mongo_Insert::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Insert.tab)
}
inline void Mongo_Insert::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Insert.tab)
}
inline ::std::string* Mongo_Insert::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Insert.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Insert::release_tab() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Insert.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Insert::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Insert.tab)
}

// string json = 2;
inline void Mongo_Insert::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Insert::json() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Insert.json)
  return json_.GetNoArena();
}
inline void Mongo_Insert::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Insert.json)
}
#if LANG_CXX11
inline void Mongo_Insert::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Insert.json)
}
#endif
inline void Mongo_Insert::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Insert.json)
}
inline void Mongo_Insert::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Insert.json)
}
inline ::std::string* Mongo_Insert::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Insert.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Insert::release_json() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Insert.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Insert::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Insert.json)
}

// -------------------------------------------------------------------

// Mongo_Query_Request

// string tab = 1;
inline void Mongo_Query_Request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Query_Request::tab() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Query.Request.tab)
  return tab_.GetNoArena();
}
inline void Mongo_Query_Request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Query.Request.tab)
}
#if LANG_CXX11
inline void Mongo_Query_Request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Query.Request.tab)
}
#endif
inline void Mongo_Query_Request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Query.Request.tab)
}
inline void Mongo_Query_Request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Query.Request.tab)
}
inline ::std::string* Mongo_Query_Request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Query.Request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Query_Request::release_tab() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Query.Request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Query_Request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Query.Request.tab)
}

// string json = 2;
inline void Mongo_Query_Request::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Query_Request::json() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Query.Request.json)
  return json_.GetNoArena();
}
inline void Mongo_Query_Request::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Query.Request.json)
}
#if LANG_CXX11
inline void Mongo_Query_Request::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Query.Request.json)
}
#endif
inline void Mongo_Query_Request::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Query.Request.json)
}
inline void Mongo_Query_Request::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Query.Request.json)
}
inline ::std::string* Mongo_Query_Request::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Query.Request.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Query_Request::release_json() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Query.Request.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Query_Request::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Query.Request.json)
}

// int32 limit = 3;
inline void Mongo_Query_Request::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 Mongo_Query_Request::limit() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Query.Request.limit)
  return limit_;
}
inline void Mongo_Query_Request::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:s2s.Mongo.Query.Request.limit)
}

// -------------------------------------------------------------------

// Mongo_Query_Response

// repeated string jsons = 1;
inline int Mongo_Query_Response::jsons_size() const {
  return jsons_.size();
}
inline void Mongo_Query_Response::clear_jsons() {
  jsons_.Clear();
}
inline const ::std::string& Mongo_Query_Response::jsons(int index) const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Query.Response.jsons)
  return jsons_.Get(index);
}
inline ::std::string* Mongo_Query_Response::mutable_jsons(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Query.Response.jsons)
  return jsons_.Mutable(index);
}
inline void Mongo_Query_Response::set_jsons(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.Mongo.Query.Response.jsons)
  jsons_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mongo_Query_Response::set_jsons(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.Mongo.Query.Response.jsons)
  jsons_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mongo_Query_Response::set_jsons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Query.Response.jsons)
}
inline void Mongo_Query_Response::set_jsons(int index, const char* value, size_t size) {
  jsons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Query.Response.jsons)
}
inline ::std::string* Mongo_Query_Response::add_jsons() {
  // @@protoc_insertion_point(field_add_mutable:s2s.Mongo.Query.Response.jsons)
  return jsons_.Add();
}
inline void Mongo_Query_Response::add_jsons(const ::std::string& value) {
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.Mongo.Query.Response.jsons)
}
#if LANG_CXX11
inline void Mongo_Query_Response::add_jsons(::std::string&& value) {
  jsons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.Mongo.Query.Response.jsons)
}
#endif
inline void Mongo_Query_Response::add_jsons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.Mongo.Query.Response.jsons)
}
inline void Mongo_Query_Response::add_jsons(const char* value, size_t size) {
  jsons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.Mongo.Query.Response.jsons)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Mongo_Query_Response::jsons() const {
  // @@protoc_insertion_point(field_list:s2s.Mongo.Query.Response.jsons)
  return jsons_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Mongo_Query_Response::mutable_jsons() {
  // @@protoc_insertion_point(field_mutable_list:s2s.Mongo.Query.Response.jsons)
  return &jsons_;
}

// -------------------------------------------------------------------

// Mongo_Query

// -------------------------------------------------------------------

// Mongo_Delete

// string tab = 1;
inline void Mongo_Delete::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Delete::tab() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Delete.tab)
  return tab_.GetNoArena();
}
inline void Mongo_Delete::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Delete.tab)
}
#if LANG_CXX11
inline void Mongo_Delete::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Delete.tab)
}
#endif
inline void Mongo_Delete::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Delete.tab)
}
inline void Mongo_Delete::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Delete.tab)
}
inline ::std::string* Mongo_Delete::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Delete.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Delete::release_tab() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Delete.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Delete::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Delete.tab)
}

// string json = 2;
inline void Mongo_Delete::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Delete::json() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Delete.json)
  return json_.GetNoArena();
}
inline void Mongo_Delete::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Delete.json)
}
#if LANG_CXX11
inline void Mongo_Delete::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Delete.json)
}
#endif
inline void Mongo_Delete::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Delete.json)
}
inline void Mongo_Delete::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Delete.json)
}
inline ::std::string* Mongo_Delete::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Delete.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Delete::release_json() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Delete.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Delete::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Delete.json)
}

// int32 limit = 3;
inline void Mongo_Delete::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 Mongo_Delete::limit() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Delete.limit)
  return limit_;
}
inline void Mongo_Delete::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:s2s.Mongo.Delete.limit)
}

// -------------------------------------------------------------------

// Mongo_Update

// string tab = 1;
inline void Mongo_Update::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Update::tab() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Update.tab)
  return tab_.GetNoArena();
}
inline void Mongo_Update::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Update.tab)
}
#if LANG_CXX11
inline void Mongo_Update::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Update.tab)
}
#endif
inline void Mongo_Update::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Update.tab)
}
inline void Mongo_Update::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Update.tab)
}
inline ::std::string* Mongo_Update::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Update.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Update::release_tab() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Update.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Update::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Update.tab)
}

// string select = 2;
inline void Mongo_Update::clear_select() {
  select_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Update::select() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Update.select)
  return select_.GetNoArena();
}
inline void Mongo_Update::set_select(const ::std::string& value) {
  
  select_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Update.select)
}
#if LANG_CXX11
inline void Mongo_Update::set_select(::std::string&& value) {
  
  select_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Update.select)
}
#endif
inline void Mongo_Update::set_select(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  select_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Update.select)
}
inline void Mongo_Update::set_select(const char* value, size_t size) {
  
  select_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Update.select)
}
inline ::std::string* Mongo_Update::mutable_select() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Update.select)
  return select_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Update::release_select() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Update.select)
  
  return select_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Update::set_allocated_select(::std::string* select) {
  if (select != nullptr) {
    
  } else {
    
  }
  select_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), select);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Update.select)
}

// string update = 3;
inline void Mongo_Update::clear_update() {
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Update::update() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Update.update)
  return update_.GetNoArena();
}
inline void Mongo_Update::set_update(const ::std::string& value) {
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Update.update)
}
#if LANG_CXX11
inline void Mongo_Update::set_update(::std::string&& value) {
  
  update_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Update.update)
}
#endif
inline void Mongo_Update::set_update(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Update.update)
}
inline void Mongo_Update::set_update(const char* value, size_t size) {
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Update.update)
}
inline ::std::string* Mongo_Update::mutable_update() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Update.update)
  return update_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Update::release_update() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Update.update)
  
  return update_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Update::set_allocated_update(::std::string* update) {
  if (update != nullptr) {
    
  } else {
    
  }
  update_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Update.update)
}

// string tag = 4;
inline void Mongo_Update::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mongo_Update::tag() const {
  // @@protoc_insertion_point(field_get:s2s.Mongo.Update.tag)
  return tag_.GetNoArena();
}
inline void Mongo_Update::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mongo.Update.tag)
}
#if LANG_CXX11
inline void Mongo_Update::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mongo.Update.tag)
}
#endif
inline void Mongo_Update::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mongo.Update.tag)
}
inline void Mongo_Update::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mongo.Update.tag)
}
inline ::std::string* Mongo_Update::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mongo.Update.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mongo_Update::release_tag() {
  // @@protoc_insertion_point(field_release:s2s.Mongo.Update.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mongo_Update::set_allocated_tag(::std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mongo.Update.tag)
}

// -------------------------------------------------------------------

// Mongo

// -------------------------------------------------------------------

// Allot_Response

// string token = 1;
inline void Allot_Response::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Allot_Response::token() const {
  // @@protoc_insertion_point(field_get:s2s.Allot.Response.token)
  return token_.GetNoArena();
}
inline void Allot_Response::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Allot.Response.token)
}
#if LANG_CXX11
inline void Allot_Response::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Allot.Response.token)
}
#endif
inline void Allot_Response::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Allot.Response.token)
}
inline void Allot_Response::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Allot.Response.token)
}
inline ::std::string* Allot_Response::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Allot.Response.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Allot_Response::release_token() {
  // @@protoc_insertion_point(field_release:s2s.Allot.Response.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Allot_Response::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:s2s.Allot.Response.token)
}

// string address = 2;
inline void Allot_Response::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Allot_Response::address() const {
  // @@protoc_insertion_point(field_get:s2s.Allot.Response.address)
  return address_.GetNoArena();
}
inline void Allot_Response::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Allot.Response.address)
}
#if LANG_CXX11
inline void Allot_Response::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Allot.Response.address)
}
#endif
inline void Allot_Response::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Allot.Response.address)
}
inline void Allot_Response::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Allot.Response.address)
}
inline ::std::string* Allot_Response::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Allot.Response.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Allot_Response::release_address() {
  // @@protoc_insertion_point(field_release:s2s.Allot.Response.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Allot_Response::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.Allot.Response.address)
}

// -------------------------------------------------------------------

// Allot_Save

// string service = 1;
inline void Allot_Save::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Allot_Save::service() const {
  // @@protoc_insertion_point(field_get:s2s.Allot.Save.service)
  return service_.GetNoArena();
}
inline void Allot_Save::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Allot.Save.service)
}
#if LANG_CXX11
inline void Allot_Save::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Allot.Save.service)
}
#endif
inline void Allot_Save::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Allot.Save.service)
}
inline void Allot_Save::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Allot.Save.service)
}
inline ::std::string* Allot_Save::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Allot.Save.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Allot_Save::release_service() {
  // @@protoc_insertion_point(field_release:s2s.Allot.Save.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Allot_Save::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:s2s.Allot.Save.service)
}

// string address = 2;
inline void Allot_Save::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Allot_Save::address() const {
  // @@protoc_insertion_point(field_get:s2s.Allot.Save.address)
  return address_.GetNoArena();
}
inline void Allot_Save::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Allot.Save.address)
}
#if LANG_CXX11
inline void Allot_Save::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Allot.Save.address)
}
#endif
inline void Allot_Save::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Allot.Save.address)
}
inline void Allot_Save::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Allot.Save.address)
}
inline ::std::string* Allot_Save::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Allot.Save.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Allot_Save::release_address() {
  // @@protoc_insertion_point(field_release:s2s.Allot.Save.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Allot_Save::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.Allot.Save.address)
}

// -------------------------------------------------------------------

// Allot

// -------------------------------------------------------------------

// GateBroadCast_Request

// string func = 1;
inline void GateBroadCast_Request::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateBroadCast_Request::func() const {
  // @@protoc_insertion_point(field_get:s2s.GateBroadCast.Request.func)
  return func_.GetNoArena();
}
inline void GateBroadCast_Request::set_func(const ::std::string& value) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.GateBroadCast.Request.func)
}
#if LANG_CXX11
inline void GateBroadCast_Request::set_func(::std::string&& value) {
  
  func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.GateBroadCast.Request.func)
}
#endif
inline void GateBroadCast_Request::set_func(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.GateBroadCast.Request.func)
}
inline void GateBroadCast_Request::set_func(const char* value, size_t size) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.GateBroadCast.Request.func)
}
inline ::std::string* GateBroadCast_Request::mutable_func() {
  
  // @@protoc_insertion_point(field_mutable:s2s.GateBroadCast.Request.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateBroadCast_Request::release_func() {
  // @@protoc_insertion_point(field_release:s2s.GateBroadCast.Request.func)
  
  return func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateBroadCast_Request::set_allocated_func(::std::string* func) {
  if (func != nullptr) {
    
  } else {
    
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:s2s.GateBroadCast.Request.func)
}

// .google.protobuf.Any data = 2;
inline bool GateBroadCast_Request::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& GateBroadCast_Request::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.GateBroadCast.Request.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* GateBroadCast_Request::release_data() {
  // @@protoc_insertion_point(field_release:s2s.GateBroadCast.Request.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* GateBroadCast_Request::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.GateBroadCast.Request.data)
  return data_;
}
inline void GateBroadCast_Request::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.GateBroadCast.Request.data)
}

// -------------------------------------------------------------------

// GateBroadCast_Response

// int32 count = 1;
inline void GateBroadCast_Response::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 GateBroadCast_Response::count() const {
  // @@protoc_insertion_point(field_get:s2s.GateBroadCast.Response.count)
  return count_;
}
inline void GateBroadCast_Response::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:s2s.GateBroadCast.Response.count)
}

// -------------------------------------------------------------------

// GateBroadCast

// -------------------------------------------------------------------

// CallClient_Request

// string func = 1;
inline void CallClient_Request::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallClient_Request::func() const {
  // @@protoc_insertion_point(field_get:s2s.CallClient.Request.func)
  return func_.GetNoArena();
}
inline void CallClient_Request::set_func(const ::std::string& value) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.CallClient.Request.func)
}
#if LANG_CXX11
inline void CallClient_Request::set_func(::std::string&& value) {
  
  func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.CallClient.Request.func)
}
#endif
inline void CallClient_Request::set_func(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.CallClient.Request.func)
}
inline void CallClient_Request::set_func(const char* value, size_t size) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.CallClient.Request.func)
}
inline ::std::string* CallClient_Request::mutable_func() {
  
  // @@protoc_insertion_point(field_mutable:s2s.CallClient.Request.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallClient_Request::release_func() {
  // @@protoc_insertion_point(field_release:s2s.CallClient.Request.func)
  
  return func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallClient_Request::set_allocated_func(::std::string* func) {
  if (func != nullptr) {
    
  } else {
    
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:s2s.CallClient.Request.func)
}

// .google.protobuf.Any data = 2;
inline bool CallClient_Request::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& CallClient_Request::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.CallClient.Request.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* CallClient_Request::release_data() {
  // @@protoc_insertion_point(field_release:s2s.CallClient.Request.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* CallClient_Request::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.CallClient.Request.data)
  return data_;
}
inline void CallClient_Request::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.CallClient.Request.data)
}

// -------------------------------------------------------------------

// CallClient

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2eproto
