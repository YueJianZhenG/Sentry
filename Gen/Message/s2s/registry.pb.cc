// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s/registry.proto

#include "s2s/registry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace registry {
class query_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_request> _instance;
} _query_request_default_instance_;
class query_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response> _instance;
} _query_response_default_instance_;
class queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query> _instance;
} _query_default_instance_;
}  // namespace registry
static void InitDefaultsquery_request_s2s_2fregistry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::registry::_query_request_default_instance_;
    new (ptr) ::registry::query_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::registry::query_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_query_request_s2s_2fregistry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsquery_request_s2s_2fregistry_2eproto}, {}};

static void InitDefaultsquery_response_s2s_2fregistry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::registry::_query_response_default_instance_;
    new (ptr) ::registry::query_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::registry::query_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_query_response_s2s_2fregistry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsquery_response_s2s_2fregistry_2eproto}, {}};

static void InitDefaultsquery_s2s_2fregistry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::registry::_query_default_instance_;
    new (ptr) ::registry::query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::registry::query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_query_s2s_2fregistry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsquery_s2s_2fregistry_2eproto}, {}};

void InitDefaults_s2s_2fregistry_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_query_request_s2s_2fregistry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_s2s_2fregistry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_s2s_2fregistry_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_s2s_2fregistry_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_s2s_2fregistry_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_s2s_2fregistry_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_s2s_2fregistry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::registry::query_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::registry::query_request, id_),
  PROTOBUF_FIELD_OFFSET(::registry::query_request, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::registry::query_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::registry::query_response, actors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::registry::query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::registry::query_request)},
  { 7, -1, sizeof(::registry::query_response)},
  { 13, -1, sizeof(::registry::query)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::registry::_query_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::registry::_query_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::registry::_query_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_s2s_2fregistry_2eproto = {
  {}, AddDescriptors_s2s_2fregistry_2eproto, "s2s/registry.proto", schemas,
  file_default_instances, TableStruct_s2s_2fregistry_2eproto::offsets,
  file_level_metadata_s2s_2fregistry_2eproto, 3, file_level_enum_descriptors_s2s_2fregistry_2eproto, file_level_service_descriptors_s2s_2fregistry_2eproto,
};

const char descriptor_table_protodef_s2s_2fregistry_2eproto[] =
  "\n\022s2s/registry.proto\022\010registry\"H\n\005query\032"
  "#\n\007request\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\032\032\n\010"
  "response\022\016\n\006actors\030\001 \003(\tb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_s2s_2fregistry_2eproto = {
  false, InitDefaults_s2s_2fregistry_2eproto, 
  descriptor_table_protodef_s2s_2fregistry_2eproto,
  "s2s/registry.proto", &assign_descriptors_table_s2s_2fregistry_2eproto, 112,
};

void AddDescriptors_s2s_2fregistry_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_s2s_2fregistry_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_s2s_2fregistry_2eproto = []() { AddDescriptors_s2s_2fregistry_2eproto(); return true; }();
namespace registry {

// ===================================================================

void query_request::InitAsDefaultInstance() {
}
class query_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_request::kIdFieldNumber;
const int query_request::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_request::query_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:registry.query.request)
}
query_request::query_request(const query_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:registry.query.request)
}

void query_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_query_request_s2s_2fregistry_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

query_request::~query_request() {
  // @@protoc_insertion_point(destructor:registry.query.request)
  SharedDtor();
}

void query_request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void query_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const query_request& query_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_query_request_s2s_2fregistry_2eproto.base);
  return *internal_default_instance();
}


void query_request::Clear() {
// @@protoc_insertion_point(message_clear_start:registry.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* query_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<query_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("registry.query.request.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool query_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:registry.query.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "registry.query.request.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:registry.query.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:registry.query.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void query_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:registry.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registry.query.request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:registry.query.request)
}

::google::protobuf::uint8* query_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:registry.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registry.query.request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:registry.query.request)
  return target;
}

size_t query_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:registry.query.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:registry.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  const query_request* source =
      ::google::protobuf::DynamicCastToGenerated<query_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:registry.query.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:registry.query.request)
    MergeFrom(*source);
  }
}

void query_request::MergeFrom(const query_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:registry.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void query_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:registry.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_request::CopyFrom(const query_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:registry.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_request::IsInitialized() const {
  return true;
}

void query_request::Swap(query_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_request::InternalSwap(query_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata query_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fregistry_2eproto);
  return ::file_level_metadata_s2s_2fregistry_2eproto[kIndexInFileMessages];
}


// ===================================================================

void query_response::InitAsDefaultInstance() {
}
class query_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response::kActorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response::query_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:registry.query.response)
}
query_response::query_response(const query_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      actors_(from.actors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:registry.query.response)
}

void query_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_query_response_s2s_2fregistry_2eproto.base);
}

query_response::~query_response() {
  // @@protoc_insertion_point(destructor:registry.query.response)
  SharedDtor();
}

void query_response::SharedDtor() {
}

void query_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const query_response& query_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_query_response_s2s_2fregistry_2eproto.base);
  return *internal_default_instance();
}


void query_response::Clear() {
// @@protoc_insertion_point(message_clear_start:registry.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actors_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* query_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<query_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string actors = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("registry.query.response.actors");
          object = msg->add_actors();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool query_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:registry.query.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string actors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_actors()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actors(this->actors_size() - 1).data(),
            static_cast<int>(this->actors(this->actors_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "registry.query.response.actors"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:registry.query.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:registry.query.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void query_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:registry.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string actors = 1;
  for (int i = 0, n = this->actors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actors(i).data(), static_cast<int>(this->actors(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registry.query.response.actors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->actors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:registry.query.response)
}

::google::protobuf::uint8* query_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:registry.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string actors = 1;
  for (int i = 0, n = this->actors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actors(i).data(), static_cast<int>(this->actors(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registry.query.response.actors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->actors(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:registry.query.response)
  return target;
}

size_t query_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:registry.query.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string actors = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->actors_size());
  for (int i = 0, n = this->actors_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->actors(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:registry.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response* source =
      ::google::protobuf::DynamicCastToGenerated<query_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:registry.query.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:registry.query.response)
    MergeFrom(*source);
  }
}

void query_response::MergeFrom(const query_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:registry.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actors_.MergeFrom(from.actors_);
}

void query_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:registry.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response::CopyFrom(const query_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:registry.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response::IsInitialized() const {
  return true;
}

void query_response::Swap(query_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response::InternalSwap(query_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  actors_.InternalSwap(CastToBase(&other->actors_));
}

::google::protobuf::Metadata query_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fregistry_2eproto);
  return ::file_level_metadata_s2s_2fregistry_2eproto[kIndexInFileMessages];
}


// ===================================================================

void query::InitAsDefaultInstance() {
}
class query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query::query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:registry.query)
}
query::query(const query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:registry.query)
}

void query::SharedCtor() {
}

query::~query() {
  // @@protoc_insertion_point(destructor:registry.query)
  SharedDtor();
}

void query::SharedDtor() {
}

void query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const query& query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_query_s2s_2fregistry_2eproto.base);
  return *internal_default_instance();
}


void query::Clear() {
// @@protoc_insertion_point(message_clear_start:registry.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:registry.query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:registry.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:registry.query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:registry.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:registry.query)
}

::google::protobuf::uint8* query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:registry.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:registry.query)
  return target;
}

size_t query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:registry.query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:registry.query)
  GOOGLE_DCHECK_NE(&from, this);
  const query* source =
      ::google::protobuf::DynamicCastToGenerated<query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:registry.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:registry.query)
    MergeFrom(*source);
  }
}

void query::MergeFrom(const query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:registry.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:registry.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query::CopyFrom(const query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:registry.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query::IsInitialized() const {
  return true;
}

void query::Swap(query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query::InternalSwap(query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fregistry_2eproto);
  return ::file_level_metadata_s2s_2fregistry_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace registry
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::registry::query_request* Arena::CreateMaybeMessage< ::registry::query_request >(Arena* arena) {
  return Arena::CreateInternal< ::registry::query_request >(arena);
}
template<> PROTOBUF_NOINLINE ::registry::query_response* Arena::CreateMaybeMessage< ::registry::query_response >(Arena* arena) {
  return Arena::CreateInternal< ::registry::query_response >(arena);
}
template<> PROTOBUF_NOINLINE ::registry::query* Arena::CreateMaybeMessage< ::registry::query >(Arena* arena) {
  return Arena::CreateInternal< ::registry::query >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
