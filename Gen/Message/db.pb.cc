// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace db {
class mongo_insertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_insert> _instance;
} _mongo_insert_default_instance_;
class mongo_query_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_query_request> _instance;
} _mongo_query_request_default_instance_;
class mongo_query_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_query_response> _instance;
} _mongo_query_response_default_instance_;
class mongo_queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_query> _instance;
} _mongo_query_default_instance_;
class mongo_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_remove> _instance;
} _mongo_remove_default_instance_;
class mongo_indexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_index> _instance;
} _mongo_index_default_instance_;
class mongo_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_update> _instance;
} _mongo_update_default_instance_;
class mongo_command_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command_request> _instance;
} _mongo_command_request_default_instance_;
class mongo_command_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command_response> _instance;
} _mongo_command_response_default_instance_;
class mongo_commandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command> _instance;
} _mongo_command_default_instance_;
class mongoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo> _instance;
} _mongo_default_instance_;
class mysql_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_create> _instance;
} _mysql_create_default_instance_;
class mysql_execDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_exec> _instance;
} _mysql_exec_default_instance_;
class mysql_addDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_add> _instance;
} _mysql_add_default_instance_;
class mysql_saveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_save> _instance;
} _mysql_save_default_instance_;
class mysql_queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_query> _instance;
} _mysql_query_default_instance_;
class mysql_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_remove> _instance;
} _mysql_remove_default_instance_;
class mysql_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_update> _instance;
} _mysql_update_default_instance_;
class mysql_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_response> _instance;
} _mysql_response_default_instance_;
class mysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql> _instance;
} _mysql_default_instance_;
}  // namespace db
static void InitDefaultsmongo_insert_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_insert_default_instance_;
    new (ptr) ::db::mongo_insert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_insert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_insert_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_insert_db_2eproto}, {}};

static void InitDefaultsmongo_query_request_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_query_request_default_instance_;
    new (ptr) ::db::mongo_query_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_query_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_query_request_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_query_request_db_2eproto}, {}};

static void InitDefaultsmongo_query_response_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_query_response_default_instance_;
    new (ptr) ::db::mongo_query_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_query_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_query_response_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_query_response_db_2eproto}, {}};

static void InitDefaultsmongo_query_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_query_default_instance_;
    new (ptr) ::db::mongo_query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_query_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_query_db_2eproto}, {}};

static void InitDefaultsmongo_remove_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_remove_default_instance_;
    new (ptr) ::db::mongo_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_remove_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_remove_db_2eproto}, {}};

static void InitDefaultsmongo_index_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_index_default_instance_;
    new (ptr) ::db::mongo_index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_index::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_index_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_index_db_2eproto}, {}};

static void InitDefaultsmongo_update_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_update_default_instance_;
    new (ptr) ::db::mongo_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_update_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_update_db_2eproto}, {}};

static void InitDefaultsmongo_command_request_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_request_default_instance_;
    new (ptr) ::db::mongo_command_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_request_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_request_db_2eproto}, {}};

static void InitDefaultsmongo_command_response_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_response_default_instance_;
    new (ptr) ::db::mongo_command_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_response_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_response_db_2eproto}, {}};

static void InitDefaultsmongo_command_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_default_instance_;
    new (ptr) ::db::mongo_command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_db_2eproto}, {}};

static void InitDefaultsmongo_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_default_instance_;
    new (ptr) ::db::mongo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_db_2eproto}, {}};

static void InitDefaultsmysql_create_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_create_default_instance_;
    new (ptr) ::db::mysql_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mysql_create_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmysql_create_db_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsmysql_exec_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_exec_default_instance_;
    new (ptr) ::db::mysql_exec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_exec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_exec_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_exec_db_2eproto}, {}};

static void InitDefaultsmysql_add_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_add_default_instance_;
    new (ptr) ::db::mysql_add();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_add::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mysql_add_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmysql_add_db_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsmysql_save_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_save_default_instance_;
    new (ptr) ::db::mysql_save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mysql_save_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmysql_save_db_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsmysql_query_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_query_default_instance_;
    new (ptr) ::db::mysql_query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_query_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_query_db_2eproto}, {}};

static void InitDefaultsmysql_remove_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_remove_default_instance_;
    new (ptr) ::db::mysql_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_remove_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_remove_db_2eproto}, {}};

static void InitDefaultsmysql_update_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_update_default_instance_;
    new (ptr) ::db::mysql_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_update_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_update_db_2eproto}, {}};

static void InitDefaultsmysql_response_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_response_default_instance_;
    new (ptr) ::db::mysql_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_response_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_response_db_2eproto}, {}};

static void InitDefaultsmysql_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_default_instance_;
    new (ptr) ::db::mysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_db_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_db_2eproto}, {}};

void InitDefaults_db_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_insert_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_query_request_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_query_response_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_query_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_remove_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_index_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_update_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_request_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_response_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_create_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_exec_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_add_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_save_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_query_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_remove_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_update_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_response_db_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_db_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_db_2eproto[20];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_db_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_db_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_db_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, json_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_query_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_query_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_query_request, json_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_query_request, limit_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_query_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_query_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_query_response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, json_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, limit_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, select_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, update_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, tag_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_create, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_create, keys_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_create, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_exec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_exec, sql_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_exec, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, limit_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, where_json_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, update_json_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_response, error_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::db::mongo_insert)},
  { 8, -1, sizeof(::db::mongo_query_request)},
  { 17, -1, sizeof(::db::mongo_query_response)},
  { 23, -1, sizeof(::db::mongo_query)},
  { 28, -1, sizeof(::db::mongo_remove)},
  { 37, -1, sizeof(::db::mongo_index)},
  { 44, -1, sizeof(::db::mongo_update)},
  { 54, -1, sizeof(::db::mongo_command_request)},
  { 60, -1, sizeof(::db::mongo_command_response)},
  { 66, -1, sizeof(::db::mongo_command)},
  { 71, -1, sizeof(::db::mongo)},
  { 76, -1, sizeof(::db::mysql_create)},
  { 84, -1, sizeof(::db::mysql_exec)},
  { 91, -1, sizeof(::db::mysql_add)},
  { 99, -1, sizeof(::db::mysql_save)},
  { 107, -1, sizeof(::db::mysql_query)},
  { 116, -1, sizeof(::db::mysql_remove)},
  { 124, -1, sizeof(::db::mysql_update)},
  { 133, -1, sizeof(::db::mysql_response)},
  { 140, -1, sizeof(::db::mysql)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_insert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_query_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_query_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_exec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_add_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_db_2eproto = {
  {}, AddDescriptors_db_2eproto, "db.proto", schemas,
  file_default_instances, TableStruct_db_2eproto::offsets,
  file_level_metadata_db_2eproto, 20, file_level_enum_descriptors_db_2eproto, file_level_service_descriptors_db_2eproto,
};

const char descriptor_table_protodef_db_2eproto[] =
  "\n\010db.proto\022\002db\032\031google/protobuf/any.prot"
  "o\"\232\003\n\005mongo\0321\n\006insert\022\013\n\003tab\030\001 \001(\t\022\014\n\004js"
  "on\030\002 \001(\t\022\014\n\004flag\030\003 \001(\005\032g\n\005query\032C\n\007reque"
  "st\022\013\n\003tab\030\001 \001(\t\022\014\n\004json\030\002 \001(\t\022\r\n\005limit\030\003"
  " \001(\005\022\016\n\006fields\030\004 \003(\t\032\031\n\010response\022\r\n\005json"
  "s\030\001 \003(\t\032@\n\006remove\022\013\n\003tab\030\001 \001(\t\022\014\n\004json\030\002"
  " \001(\t\022\r\n\005limit\030\003 \001(\005\022\014\n\004flag\030\004 \001(\005\032\"\n\005ind"
  "ex\022\013\n\003tab\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\032P\n\006update\022"
  "\013\n\003tab\030\001 \001(\t\022\016\n\006select\030\002 \001(\t\022\016\n\006update\030\003"
  " \001(\t\022\013\n\003tag\030\004 \001(\t\022\014\n\004flag\030\005 \001(\005\032=\n\007comma"
  "nd\032\027\n\007request\022\014\n\004json\030\001 \001(\t\032\031\n\010response\022"
  "\r\n\005jsons\030\001 \003(\014\"\207\004\n\005mysql\032I\n\006create\022\r\n\005ta"
  "ble\030\001 \001(\t\022\014\n\004keys\030\002 \003(\t\022\"\n\004data\030\003 \001(\0132\024."
  "google.protobuf.Any\032\"\n\004exec\022\013\n\003sql\030\001 \001(\t"
  "\022\r\n\005query\030\002 \001(\010\032F\n\003add\022\014\n\004flag\030\001 \001(\005\022\r\n\005"
  "table\030\002 \001(\t\022\"\n\004data\030\003 \001(\0132\024.google.proto"
  "buf.Any\032G\n\004save\022\014\n\004flag\030\001 \001(\005\022\r\n\005table\030\002"
  " \001(\t\022\"\n\004data\030\003 \001(\0132\024.google.protobuf.Any"
  "\032I\n\005query\022\r\n\005table\030\001 \001(\t\022\r\n\005limit\030\002 \001(\005\022"
  "\022\n\nwhere_json\030\003 \001(\t\022\016\n\006fields\030\004 \003(\t\0329\n\006r"
  "emove\022\014\n\004flag\030\001 \001(\005\022\r\n\005table\030\002 \001(\t\022\022\n\nwh"
  "ere_json\030\003 \001(\t\032N\n\006update\022\014\n\004flag\030\001 \001(\005\022\r"
  "\n\005table\030\002 \001(\t\022\023\n\013update_json\030\003 \001(\t\022\022\n\nwh"
  "ere_json\030\004 \001(\t\032(\n\010response\022\r\n\005error\030\001 \001("
  "\t\022\r\n\005jsons\030\002 \003(\014b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_db_2eproto = {
  false, InitDefaults_db_2eproto, 
  descriptor_table_protodef_db_2eproto,
  "db.proto", &assign_descriptors_table_db_2eproto, 984,
};

void AddDescriptors_db_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2fany_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_db_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_db_2eproto = []() { AddDescriptors_db_2eproto(); return true; }();
namespace db {

// ===================================================================

void mongo_insert::InitAsDefaultInstance() {
}
class mongo_insert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_insert::kTabFieldNumber;
const int mongo_insert::kJsonFieldNumber;
const int mongo_insert::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_insert::mongo_insert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.insert)
}
mongo_insert::mongo_insert(const mongo_insert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.insert)
}

void mongo_insert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_insert_db_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mongo_insert::~mongo_insert() {
  // @@protoc_insertion_point(destructor:db.mongo.insert)
  SharedDtor();
}

void mongo_insert::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_insert& mongo_insert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_insert_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_insert::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_insert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_insert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.insert.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.insert.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 flag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.insert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.insert.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.insert.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.insert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.insert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.insert)
}

::google::protobuf::uint8* mongo_insert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.insert)
  return target;
}

size_t mongo_insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.insert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_insert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_insert* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.insert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.insert)
    MergeFrom(*source);
  }
}

void mongo_insert::MergeFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mongo_insert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_insert::CopyFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_insert::IsInitialized() const {
  return true;
}

void mongo_insert::Swap(mongo_insert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_insert::InternalSwap(mongo_insert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mongo_insert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_query_request::InitAsDefaultInstance() {
}
class mongo_query_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_query_request::kTabFieldNumber;
const int mongo_query_request::kJsonFieldNumber;
const int mongo_query_request::kLimitFieldNumber;
const int mongo_query_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_query_request::mongo_query_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.query.request)
}
mongo_query_request::mongo_query_request(const mongo_query_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.query.request)
}

void mongo_query_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_query_request_db_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mongo_query_request::~mongo_query_request() {
  // @@protoc_insertion_point(destructor:db.mongo.query.request)
  SharedDtor();
}

void mongo_query_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_query_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_query_request& mongo_query_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_query_request_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_query_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_query_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_query_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.query.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.query.request.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.query.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_query_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.query.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.query.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.query.request.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.query.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.query.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.query.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_query_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.request.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.query.request)
}

::google::protobuf::uint8* mongo_query_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.request.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.query.request)
  return target;
}

size_t mongo_query_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.query.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_query_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_query_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_query_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.query.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.query.request)
    MergeFrom(*source);
  }
}

void mongo_query_request::MergeFrom(const mongo_query_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mongo_query_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_query_request::CopyFrom(const mongo_query_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_query_request::IsInitialized() const {
  return true;
}

void mongo_query_request::Swap(mongo_query_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_query_request::InternalSwap(mongo_query_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mongo_query_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_query_response::InitAsDefaultInstance() {
}
class mongo_query_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_query_response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_query_response::mongo_query_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.query.response)
}
mongo_query_response::mongo_query_response(const mongo_query_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.query.response)
}

void mongo_query_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_query_response_db_2eproto.base);
}

mongo_query_response::~mongo_query_response() {
  // @@protoc_insertion_point(destructor:db.mongo.query.response)
  SharedDtor();
}

void mongo_query_response::SharedDtor() {
}

void mongo_query_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_query_response& mongo_query_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_query_response_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_query_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_query_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_query_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string jsons = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.query.response.jsons");
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_query_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.query.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string jsons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jsons()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsons(this->jsons_size() - 1).data(),
            static_cast<int>(this->jsons(this->jsons_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.query.response.jsons"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.query.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.query.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_query_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.response.jsons");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.query.response)
}

::google::protobuf::uint8* mongo_query_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.query.response.jsons");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.query.response)
  return target;
}

size_t mongo_query_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.query.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string jsons = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jsons(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_query_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_query_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_query_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.query.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.query.response)
    MergeFrom(*source);
  }
}

void mongo_query_response::MergeFrom(const mongo_query_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
}

void mongo_query_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_query_response::CopyFrom(const mongo_query_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_query_response::IsInitialized() const {
  return true;
}

void mongo_query_response::Swap(mongo_query_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_query_response::InternalSwap(mongo_query_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
}

::google::protobuf::Metadata mongo_query_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_query::InitAsDefaultInstance() {
}
class mongo_query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_query::mongo_query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.query)
}
mongo_query::mongo_query(const mongo_query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.query)
}

void mongo_query::SharedCtor() {
}

mongo_query::~mongo_query() {
  // @@protoc_insertion_point(destructor:db.mongo.query)
  SharedDtor();
}

void mongo_query::SharedDtor() {
}

void mongo_query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_query& mongo_query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_query_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_query::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.query)
}

::google::protobuf::uint8* mongo_query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.query)
  return target;
}

size_t mongo_query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.query)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_query* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.query)
    MergeFrom(*source);
  }
}

void mongo_query::MergeFrom(const mongo_query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_query::CopyFrom(const mongo_query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_query::IsInitialized() const {
  return true;
}

void mongo_query::Swap(mongo_query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_query::InternalSwap(mongo_query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_remove::InitAsDefaultInstance() {
}
class mongo_remove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_remove::kTabFieldNumber;
const int mongo_remove::kJsonFieldNumber;
const int mongo_remove::kLimitFieldNumber;
const int mongo_remove::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_remove::mongo_remove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.remove)
}
mongo_remove::mongo_remove(const mongo_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:db.mongo.remove)
}

void mongo_remove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_remove_db_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(flag_));
}

mongo_remove::~mongo_remove() {
  // @@protoc_insertion_point(destructor:db.mongo.remove)
  SharedDtor();
}

void mongo_remove::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_remove& mongo_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_remove_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_remove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.remove.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.remove.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 flag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.remove.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.remove.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.remove)
}

::google::protobuf::uint8* mongo_remove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.remove)
  return target;
}

size_t mongo_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_remove* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_remove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.remove)
    MergeFrom(*source);
  }
}

void mongo_remove::MergeFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mongo_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_remove::CopyFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_remove::IsInitialized() const {
  return true;
}

void mongo_remove::Swap(mongo_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_remove::InternalSwap(mongo_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mongo_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_index::InitAsDefaultInstance() {
}
class mongo_index::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_index::kTabFieldNumber;
const int mongo_index::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_index::mongo_index()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.index)
}
mongo_index::mongo_index(const mongo_index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.index)
}

void mongo_index::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_index_db_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_index::~mongo_index() {
  // @@protoc_insertion_point(destructor:db.mongo.index)
  SharedDtor();
}

void mongo_index::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_index& mongo_index::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_index_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_index::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_index::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_index*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.index.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.index.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.index)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.index.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.index.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.index)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.index)
}

::google::protobuf::uint8* mongo_index::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.index)
  return target;
}

size_t mongo_index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.index)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_index* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_index>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.index)
    MergeFrom(*source);
  }
}

void mongo_index::MergeFrom(const mongo_index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void mongo_index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_index::CopyFrom(const mongo_index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_index::IsInitialized() const {
  return true;
}

void mongo_index::Swap(mongo_index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_index::InternalSwap(mongo_index* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_index::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_update::InitAsDefaultInstance() {
}
class mongo_update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_update::kTabFieldNumber;
const int mongo_update::kSelectFieldNumber;
const int mongo_update::kUpdateFieldNumber;
const int mongo_update::kTagFieldNumber;
const int mongo_update::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_update::mongo_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.update)
}
mongo_update::mongo_update(const mongo_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  select_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.select().size() > 0) {
    select_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.select_);
  }
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update().size() > 0) {
    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.update)
}

void mongo_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_update_db_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mongo_update::~mongo_update() {
  // @@protoc_insertion_point(destructor:db.mongo.update)
  SharedDtor();
}

void mongo_update::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_update& mongo_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_update_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_update::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  select_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.update.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string select = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.update.select");
        object = msg->mutable_select();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.update.update");
        object = msg->mutable_update();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string tag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.update.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 flag = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.update.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string select = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_select()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->select().data(), static_cast<int>(this->select().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.update.select"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update().data(), static_cast<int>(this->update().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.update.update"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.update.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string select = 2;
  if (this->select().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select().data(), static_cast<int>(this->select().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.select");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->select(), output);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.update");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update(), output);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // int32 flag = 5;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.update)
}

::google::protobuf::uint8* mongo_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string select = 2;
  if (this->select().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->select().data(), static_cast<int>(this->select().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.select");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->select(), target);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.update");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update(), target);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // int32 flag = 5;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.update)
  return target;
}

size_t mongo_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string select = 2;
  if (this->select().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->select());
  }

  // string update = 3;
  if (this->update().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update());
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // int32 flag = 5;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_update* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.update)
    MergeFrom(*source);
  }
}

void mongo_update::MergeFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.select().size() > 0) {

    select_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.select_);
  }
  if (from.update().size() > 0) {

    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mongo_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_update::CopyFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_update::IsInitialized() const {
  return true;
}

void mongo_update::Swap(mongo_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_update::InternalSwap(mongo_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  select_.Swap(&other->select_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_.Swap(&other->update_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mongo_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command_request::InitAsDefaultInstance() {
}
class mongo_command_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_command_request::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command_request::mongo_command_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command.request)
}
mongo_command_request::mongo_command_request(const mongo_command_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.command.request)
}

void mongo_command_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_command_request_db_2eproto.base);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_command_request::~mongo_command_request() {
  // @@protoc_insertion_point(destructor:db.mongo.command.request)
  SharedDtor();
}

void mongo_command_request::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_command_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command_request& mongo_command_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_request_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_command_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string json = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.request.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.request.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command.request)
}

::google::protobuf::uint8* mongo_command_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command.request)
  return target;
}

size_t mongo_command_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command.request)
    MergeFrom(*source);
  }
}

void mongo_command_request::MergeFrom(const mongo_command_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void mongo_command_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command_request::CopyFrom(const mongo_command_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command_request::IsInitialized() const {
  return true;
}

void mongo_command_request::Swap(mongo_command_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command_request::InternalSwap(mongo_command_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_command_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command_response::InitAsDefaultInstance() {
}
class mongo_command_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_command_response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command_response::mongo_command_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command.response)
}
mongo_command_response::mongo_command_response(const mongo_command_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.command.response)
}

void mongo_command_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_command_response_db_2eproto.base);
}

mongo_command_response::~mongo_command_response() {
  // @@protoc_insertion_point(destructor:db.mongo.command.response)
  SharedDtor();
}

void mongo_command_response::SharedDtor() {
}

void mongo_command_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command_response& mongo_command_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_response_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_command_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes jsons = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes jsons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_jsons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command.response)
}

::google::protobuf::uint8* mongo_command_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command.response)
  return target;
}

size_t mongo_command_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes jsons = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->jsons(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command.response)
    MergeFrom(*source);
  }
}

void mongo_command_response::MergeFrom(const mongo_command_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
}

void mongo_command_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command_response::CopyFrom(const mongo_command_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command_response::IsInitialized() const {
  return true;
}

void mongo_command_response::Swap(mongo_command_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command_response::InternalSwap(mongo_command_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
}

::google::protobuf::Metadata mongo_command_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command::InitAsDefaultInstance() {
}
class mongo_command::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command::mongo_command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command)
}
mongo_command::mongo_command(const mongo_command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.command)
}

void mongo_command::SharedCtor() {
}

mongo_command::~mongo_command() {
  // @@protoc_insertion_point(destructor:db.mongo.command)
  SharedDtor();
}

void mongo_command::SharedDtor() {
}

void mongo_command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command& mongo_command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_db_2eproto.base);
  return *internal_default_instance();
}


void mongo_command::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command)
}

::google::protobuf::uint8* mongo_command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command)
  return target;
}

size_t mongo_command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command)
    MergeFrom(*source);
  }
}

void mongo_command::MergeFrom(const mongo_command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command::CopyFrom(const mongo_command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command::IsInitialized() const {
  return true;
}

void mongo_command::Swap(mongo_command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command::InternalSwap(mongo_command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo::InitAsDefaultInstance() {
}
class mongo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo::mongo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo)
}
mongo::mongo(const mongo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo)
}

void mongo::SharedCtor() {
}

mongo::~mongo() {
  // @@protoc_insertion_point(destructor:db.mongo)
  SharedDtor();
}

void mongo::SharedDtor() {
}

void mongo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo& mongo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_db_2eproto.base);
  return *internal_default_instance();
}


void mongo::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo)
}

::google::protobuf::uint8* mongo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo)
  return target;
}

size_t mongo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo* source =
      ::google::protobuf::DynamicCastToGenerated<mongo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo)
    MergeFrom(*source);
  }
}

void mongo::MergeFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo::CopyFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo::IsInitialized() const {
  return true;
}

void mongo::Swap(mongo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo::InternalSwap(mongo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_create::InitAsDefaultInstance() {
  ::db::_mysql_create_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class mysql_create::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const mysql_create* msg);
};

const ::google::protobuf::Any&
mysql_create::HasBitSetters::data(const mysql_create* msg) {
  return *msg->data_;
}
void mysql_create::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_create::kTableFieldNumber;
const int mysql_create::kKeysFieldNumber;
const int mysql_create::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_create::mysql_create()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.create)
}
mysql_create::mysql_create(const mysql_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:db.mysql.create)
}

void mysql_create::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_create_db_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

mysql_create::~mysql_create() {
  // @@protoc_insertion_point(destructor:db.mysql.create)
  SharedDtor();
}

void mysql_create::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void mysql_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_create& mysql_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_create_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_create::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_create::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_create*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.create.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string keys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mysql.create.keys");
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.create.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.create.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.create)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->keys(i), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.create)
}

::google::protobuf::uint8* mysql_create::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->keys(i), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.create)
  return target;
}

size_t mysql_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.create)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_create* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.create)
    MergeFrom(*source);
  }
}

void mysql_create::MergeFrom(const mysql_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
}

void mysql_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_create::CopyFrom(const mysql_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_create::IsInitialized() const {
  return true;
}

void mysql_create::Swap(mysql_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_create::InternalSwap(mysql_create* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::google::protobuf::Metadata mysql_create::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_exec::InitAsDefaultInstance() {
}
class mysql_exec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_exec::kSqlFieldNumber;
const int mysql_exec::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_exec::mysql_exec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.exec)
}
mysql_exec::mysql_exec(const mysql_exec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sql().size() > 0) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.exec)
}

void mysql_exec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_exec_db_2eproto.base);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_ = false;
}

mysql_exec::~mysql_exec() {
  // @@protoc_insertion_point(destructor:db.mysql.exec)
  SharedDtor();
}

void mysql_exec::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_exec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_exec& mysql_exec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_exec_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_exec::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_exec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_exec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string sql = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.exec.sql");
        object = msg->mutable_sql();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_query(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_exec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.exec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sql = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.exec.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.exec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.exec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_exec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.exec.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql(), output);
  }

  // bool query = 2;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.exec)
}

::google::protobuf::uint8* mysql_exec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.exec.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  // bool query = 2;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.exec)
  return target;
}

size_t mysql_exec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.exec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }

  // bool query = 2;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_exec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.exec)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_exec* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_exec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.exec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.exec)
    MergeFrom(*source);
  }
}

void mysql_exec::MergeFrom(const mysql_exec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.exec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void mysql_exec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_exec::CopyFrom(const mysql_exec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_exec::IsInitialized() const {
  return true;
}

void mysql_exec::Swap(mysql_exec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_exec::InternalSwap(mysql_exec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sql_.Swap(&other->sql_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_, other->query_);
}

::google::protobuf::Metadata mysql_exec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_add::InitAsDefaultInstance() {
  ::db::_mysql_add_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class mysql_add::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const mysql_add* msg);
};

const ::google::protobuf::Any&
mysql_add::HasBitSetters::data(const mysql_add* msg) {
  return *msg->data_;
}
void mysql_add::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_add::kFlagFieldNumber;
const int mysql_add::kTableFieldNumber;
const int mysql_add::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_add::mysql_add()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.add)
}
mysql_add::mysql_add(const mysql_add& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.add)
}

void mysql_add::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_add_db_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&data_)) + sizeof(flag_));
}

mysql_add::~mysql_add() {
  // @@protoc_insertion_point(destructor:db.mysql.add)
  SharedDtor();
}

void mysql_add::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void mysql_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_add& mysql_add::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_add_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_add::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_add::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_add*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.add.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.add)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.add.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.add)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.add.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.add)
}

::google::protobuf::uint8* mysql_add::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.add.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.add)
  return target;
}

size_t mysql_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.add)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_add::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.add)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_add* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.add)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.add)
    MergeFrom(*source);
  }
}

void mysql_add::MergeFrom(const mysql_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_add::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_add::CopyFrom(const mysql_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_add::IsInitialized() const {
  return true;
}

void mysql_add::Swap(mysql_add* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_add::InternalSwap(mysql_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_add::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_save::InitAsDefaultInstance() {
  ::db::_mysql_save_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class mysql_save::HasBitSetters {
 public:
  static const ::google::protobuf::Any& data(const mysql_save* msg);
};

const ::google::protobuf::Any&
mysql_save::HasBitSetters::data(const mysql_save* msg) {
  return *msg->data_;
}
void mysql_save::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_save::kFlagFieldNumber;
const int mysql_save::kTableFieldNumber;
const int mysql_save::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_save::mysql_save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.save)
}
mysql_save::mysql_save(const mysql_save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.save)
}

void mysql_save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_save_db_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&data_)) + sizeof(flag_));
}

mysql_save::~mysql_save() {
  // @@protoc_insertion_point(destructor:db.mysql.save)
  SharedDtor();
}

void mysql_save::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void mysql_save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_save& mysql_save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_save_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_save::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.save.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.save.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.save.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.save)
}

::google::protobuf::uint8* mysql_save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.save.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.save)
  return target;
}

size_t mysql_save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.save)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_save* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.save)
    MergeFrom(*source);
  }
}

void mysql_save::MergeFrom(const mysql_save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_save::CopyFrom(const mysql_save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_save::IsInitialized() const {
  return true;
}

void mysql_save::Swap(mysql_save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_save::InternalSwap(mysql_save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_query::InitAsDefaultInstance() {
}
class mysql_query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_query::kTableFieldNumber;
const int mysql_query::kLimitFieldNumber;
const int mysql_query::kWhereJsonFieldNumber;
const int mysql_query::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_query::mysql_query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.query)
}
mysql_query::mysql_query(const mysql_query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.query)
}

void mysql_query::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_query_db_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mysql_query::~mysql_query() {
  // @@protoc_insertion_point(destructor:db.mysql.query)
  SharedDtor();
}

void mysql_query::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_query& mysql_query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_query_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_query::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.query.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.query.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mysql.query.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.query.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.query.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.query.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.query)
}

::google::protobuf::uint8* mysql_query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.query)
  return target;
}

size_t mysql_query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.query)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_query* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.query)
    MergeFrom(*source);
  }
}

void mysql_query::MergeFrom(const mysql_query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mysql_query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_query::CopyFrom(const mysql_query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_query::IsInitialized() const {
  return true;
}

void mysql_query::Swap(mysql_query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_query::InternalSwap(mysql_query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mysql_query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_remove::InitAsDefaultInstance() {
}
class mysql_remove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_remove::kFlagFieldNumber;
const int mysql_remove::kTableFieldNumber;
const int mysql_remove::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_remove::mysql_remove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.remove)
}
mysql_remove::mysql_remove(const mysql_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.remove)
}

void mysql_remove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_remove_db_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mysql_remove::~mysql_remove() {
  // @@protoc_insertion_point(destructor:db.mysql.remove)
  SharedDtor();
}

void mysql_remove::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_remove& mysql_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_remove_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_remove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.remove.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.remove.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.remove.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.remove.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.remove)
}

::google::protobuf::uint8* mysql_remove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.remove)
  return target;
}

size_t mysql_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.remove)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_remove* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_remove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.remove)
    MergeFrom(*source);
  }
}

void mysql_remove::MergeFrom(const mysql_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_remove::CopyFrom(const mysql_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_remove::IsInitialized() const {
  return true;
}

void mysql_remove::Swap(mysql_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_remove::InternalSwap(mysql_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_update::InitAsDefaultInstance() {
}
class mysql_update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_update::kFlagFieldNumber;
const int mysql_update::kTableFieldNumber;
const int mysql_update::kUpdateJsonFieldNumber;
const int mysql_update::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_update::mysql_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.update)
}
mysql_update::mysql_update(const mysql_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_json().size() > 0) {
    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.update)
}

void mysql_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_update_db_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mysql_update::~mysql_update() {
  // @@protoc_insertion_point(destructor:db.mysql.update)
  SharedDtor();
}

void mysql_update::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_update& mysql_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_update_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_update::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.update.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.update.update_json");
        object = msg->mutable_update_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.update.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.update.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update_json().data(), static_cast<int>(this->update_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.update.update_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.update.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.update_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update_json(), output);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.update)
}

::google::protobuf::uint8* mysql_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.update_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_json(), target);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.update)
  return target;
}

size_t mysql_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update_json());
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.update)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_update* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.update)
    MergeFrom(*source);
  }
}

void mysql_update::MergeFrom(const mysql_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.update_json().size() > 0) {

    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_update::CopyFrom(const mysql_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_update::IsInitialized() const {
  return true;
}

void mysql_update::Swap(mysql_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_update::InternalSwap(mysql_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_json_.Swap(&other->update_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_response::InitAsDefaultInstance() {
}
class mysql_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_response::kErrorFieldNumber;
const int mysql_response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_response::mysql_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.response)
}
mysql_response::mysql_response(const mysql_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mysql.response)
}

void mysql_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_response_db_2eproto.base);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mysql_response::~mysql_response() {
  // @@protoc_insertion_point(destructor:db.mysql.response)
  SharedDtor();
}

void mysql_response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_response& mysql_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_response_db_2eproto.base);
  return *internal_default_instance();
}


void mysql_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.response.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bytes jsons = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.response.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes jsons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_jsons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // repeated bytes jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.response)
}

::google::protobuf::uint8* mysql_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // repeated bytes jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.response)
  return target;
}

size_t mysql_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes jsons = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->jsons(i));
  }

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_response* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.response)
    MergeFrom(*source);
  }
}

void mysql_response::MergeFrom(const mysql_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void mysql_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_response::CopyFrom(const mysql_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_response::IsInitialized() const {
  return true;
}

void mysql_response::Swap(mysql_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_response::InternalSwap(mysql_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mysql_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql::InitAsDefaultInstance() {
}
class mysql::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql::mysql()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql)
}
mysql::mysql(const mysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mysql)
}

void mysql::SharedCtor() {
}

mysql::~mysql() {
  // @@protoc_insertion_point(destructor:db.mysql)
  SharedDtor();
}

void mysql::SharedDtor() {
}

void mysql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql& mysql::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_db_2eproto.base);
  return *internal_default_instance();
}


void mysql::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql)
}

::google::protobuf::uint8* mysql::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql)
  return target;
}

size_t mysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql* source =
      ::google::protobuf::DynamicCastToGenerated<mysql>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql)
    MergeFrom(*source);
  }
}

void mysql::MergeFrom(const mysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql::CopyFrom(const mysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql::IsInitialized() const {
  return true;
}

void mysql::Swap(mysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql::InternalSwap(mysql* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mysql::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_db_2eproto);
  return ::file_level_metadata_db_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::db::mongo_insert* Arena::CreateMaybeMessage< ::db::mongo_insert >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_insert >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_query_request* Arena::CreateMaybeMessage< ::db::mongo_query_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_query_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_query_response* Arena::CreateMaybeMessage< ::db::mongo_query_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_query_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_query* Arena::CreateMaybeMessage< ::db::mongo_query >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_query >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_remove* Arena::CreateMaybeMessage< ::db::mongo_remove >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_index* Arena::CreateMaybeMessage< ::db::mongo_index >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_index >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_update* Arena::CreateMaybeMessage< ::db::mongo_update >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_update >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command_request* Arena::CreateMaybeMessage< ::db::mongo_command_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command_response* Arena::CreateMaybeMessage< ::db::mongo_command_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command* Arena::CreateMaybeMessage< ::db::mongo_command >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo* Arena::CreateMaybeMessage< ::db::mongo >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_create* Arena::CreateMaybeMessage< ::db::mysql_create >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_create >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_exec* Arena::CreateMaybeMessage< ::db::mysql_exec >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_exec >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_add* Arena::CreateMaybeMessage< ::db::mysql_add >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_add >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_save* Arena::CreateMaybeMessage< ::db::mysql_save >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_save >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_query* Arena::CreateMaybeMessage< ::db::mysql_query >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_query >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_remove* Arena::CreateMaybeMessage< ::db::mysql_remove >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_update* Arena::CreateMaybeMessage< ::db::mysql_update >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_update >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_response* Arena::CreateMaybeMessage< ::db::mysql_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql* Arena::CreateMaybeMessage< ::db::mysql >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
