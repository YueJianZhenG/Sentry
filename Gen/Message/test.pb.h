// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_test_2eproto();
namespace lua {
class Rpc;
class RpcDefaultTypeInternal;
extern RpcDefaultTypeInternal _Rpc_default_instance_;
class Rpc_Request;
class Rpc_RequestDefaultTypeInternal;
extern Rpc_RequestDefaultTypeInternal _Rpc_Request_default_instance_;
class Rpc_Request_Call;
class Rpc_Request_CallDefaultTypeInternal;
extern Rpc_Request_CallDefaultTypeInternal _Rpc_Request_Call_default_instance_;
class Rpc_Request_Call_Notice;
class Rpc_Request_Call_NoticeDefaultTypeInternal;
extern Rpc_Request_Call_NoticeDefaultTypeInternal _Rpc_Request_Call_Notice_default_instance_;
class Rpc_Response;
class Rpc_ResponseDefaultTypeInternal;
extern Rpc_ResponseDefaultTypeInternal _Rpc_Response_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class Test1;
class Test1DefaultTypeInternal;
extern Test1DefaultTypeInternal _Test1_default_instance_;
}  // namespace lua
namespace google {
namespace protobuf {
template<> ::lua::Rpc* Arena::CreateMaybeMessage<::lua::Rpc>(Arena*);
template<> ::lua::Rpc_Request* Arena::CreateMaybeMessage<::lua::Rpc_Request>(Arena*);
template<> ::lua::Rpc_Request_Call* Arena::CreateMaybeMessage<::lua::Rpc_Request_Call>(Arena*);
template<> ::lua::Rpc_Request_Call_Notice* Arena::CreateMaybeMessage<::lua::Rpc_Request_Call_Notice>(Arena*);
template<> ::lua::Rpc_Response* Arena::CreateMaybeMessage<::lua::Rpc_Response>(Arena*);
template<> ::lua::Test* Arena::CreateMaybeMessage<::lua::Test>(Arena*);
template<> ::lua::Test1* Arena::CreateMaybeMessage<::lua::Test1>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lua {

// ===================================================================

class Test :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lua.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Test* other);
  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(nullptr);
  }

  Test* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string service = 2;
  int service_size() const;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service(int index) const;
  ::std::string* mutable_service(int index);
  void set_service(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_service(int index, ::std::string&& value);
  #endif
  void set_service(int index, const char* value);
  void set_service(int index, const char* value, size_t size);
  ::std::string* add_service();
  void add_service(const ::std::string& value);
  #if LANG_CXX11
  void add_service(::std::string&& value);
  #endif
  void add_service(const char* value);
  void add_service(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& service() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_service();

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:lua.Test)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> service_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Test1 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lua.Test1) */ {
 public:
  Test1();
  virtual ~Test1();

  Test1(const Test1& from);

  inline Test1& operator=(const Test1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test1(Test1&& from) noexcept
    : Test1() {
    *this = ::std::move(from);
  }

  inline Test1& operator=(Test1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Test1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test1* internal_default_instance() {
    return reinterpret_cast<const Test1*>(
               &_Test1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Test1* other);
  friend void swap(Test1& a, Test1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test1* New() const final {
    return CreateMaybeMessage<Test1>(nullptr);
  }

  Test1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test1& from);
  void MergeFrom(const Test1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lua.Test1)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Rpc_Request_Call_Notice :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lua.Rpc.Request.Call.Notice) */ {
 public:
  Rpc_Request_Call_Notice();
  virtual ~Rpc_Request_Call_Notice();

  Rpc_Request_Call_Notice(const Rpc_Request_Call_Notice& from);

  inline Rpc_Request_Call_Notice& operator=(const Rpc_Request_Call_Notice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpc_Request_Call_Notice(Rpc_Request_Call_Notice&& from) noexcept
    : Rpc_Request_Call_Notice() {
    *this = ::std::move(from);
  }

  inline Rpc_Request_Call_Notice& operator=(Rpc_Request_Call_Notice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rpc_Request_Call_Notice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpc_Request_Call_Notice* internal_default_instance() {
    return reinterpret_cast<const Rpc_Request_Call_Notice*>(
               &_Rpc_Request_Call_Notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Rpc_Request_Call_Notice* other);
  friend void swap(Rpc_Request_Call_Notice& a, Rpc_Request_Call_Notice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpc_Request_Call_Notice* New() const final {
    return CreateMaybeMessage<Rpc_Request_Call_Notice>(nullptr);
  }

  Rpc_Request_Call_Notice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rpc_Request_Call_Notice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rpc_Request_Call_Notice& from);
  void MergeFrom(const Rpc_Request_Call_Notice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rpc_Request_Call_Notice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 methodId = 1;
  void clear_methodid();
  static const int kMethodIdFieldNumber = 1;
  ::google::protobuf::int32 methodid() const;
  void set_methodid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lua.Rpc.Request.Call.Notice)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 methodid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Rpc_Request_Call :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lua.Rpc.Request.Call) */ {
 public:
  Rpc_Request_Call();
  virtual ~Rpc_Request_Call();

  Rpc_Request_Call(const Rpc_Request_Call& from);

  inline Rpc_Request_Call& operator=(const Rpc_Request_Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpc_Request_Call(Rpc_Request_Call&& from) noexcept
    : Rpc_Request_Call() {
    *this = ::std::move(from);
  }

  inline Rpc_Request_Call& operator=(Rpc_Request_Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rpc_Request_Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpc_Request_Call* internal_default_instance() {
    return reinterpret_cast<const Rpc_Request_Call*>(
               &_Rpc_Request_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Rpc_Request_Call* other);
  friend void swap(Rpc_Request_Call& a, Rpc_Request_Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpc_Request_Call* New() const final {
    return CreateMaybeMessage<Rpc_Request_Call>(nullptr);
  }

  Rpc_Request_Call* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rpc_Request_Call>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rpc_Request_Call& from);
  void MergeFrom(const Rpc_Request_Call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rpc_Request_Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Rpc_Request_Call_Notice Notice;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:lua.Rpc.Request.Call)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Rpc_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lua.Rpc.Request) */ {
 public:
  Rpc_Request();
  virtual ~Rpc_Request();

  Rpc_Request(const Rpc_Request& from);

  inline Rpc_Request& operator=(const Rpc_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpc_Request(Rpc_Request&& from) noexcept
    : Rpc_Request() {
    *this = ::std::move(from);
  }

  inline Rpc_Request& operator=(Rpc_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rpc_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpc_Request* internal_default_instance() {
    return reinterpret_cast<const Rpc_Request*>(
               &_Rpc_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Rpc_Request* other);
  friend void swap(Rpc_Request& a, Rpc_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpc_Request* New() const final {
    return CreateMaybeMessage<Rpc_Request>(nullptr);
  }

  Rpc_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rpc_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rpc_Request& from);
  void MergeFrom(const Rpc_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rpc_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Rpc_Request_Call Call;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int64 rpc_id = 3;
  void clear_rpc_id();
  static const int kRpcIdFieldNumber = 3;
  ::google::protobuf::int64 rpc_id() const;
  void set_rpc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:lua.Rpc.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 rpc_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Rpc_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lua.Rpc.Response) */ {
 public:
  Rpc_Response();
  virtual ~Rpc_Response();

  Rpc_Response(const Rpc_Response& from);

  inline Rpc_Response& operator=(const Rpc_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpc_Response(Rpc_Response&& from) noexcept
    : Rpc_Response() {
    *this = ::std::move(from);
  }

  inline Rpc_Response& operator=(Rpc_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rpc_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpc_Response* internal_default_instance() {
    return reinterpret_cast<const Rpc_Response*>(
               &_Rpc_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Rpc_Response* other);
  friend void swap(Rpc_Response& a, Rpc_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpc_Response* New() const final {
    return CreateMaybeMessage<Rpc_Response>(nullptr);
  }

  Rpc_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rpc_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rpc_Response& from);
  void MergeFrom(const Rpc_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rpc_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int64 rpc_id = 3;
  void clear_rpc_id();
  static const int kRpcIdFieldNumber = 3;
  ::google::protobuf::int64 rpc_id() const;
  void set_rpc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:lua.Rpc.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 rpc_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Rpc :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lua.Rpc) */ {
 public:
  Rpc();
  virtual ~Rpc();

  Rpc(const Rpc& from);

  inline Rpc& operator=(const Rpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpc(Rpc&& from) noexcept
    : Rpc() {
    *this = ::std::move(from);
  }

  inline Rpc& operator=(Rpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpc* internal_default_instance() {
    return reinterpret_cast<const Rpc*>(
               &_Rpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Rpc* other);
  friend void swap(Rpc& a, Rpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpc* New() const final {
    return CreateMaybeMessage<Rpc>(nullptr);
  }

  Rpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rpc& from);
  void MergeFrom(const Rpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Rpc_Request Request;
  typedef Rpc_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lua.Rpc)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Test

// string address = 1;
inline void Test::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::address() const {
  // @@protoc_insertion_point(field_get:lua.Test.address)
  return address_.GetNoArena();
}
inline void Test::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lua.Test.address)
}
#if LANG_CXX11
inline void Test::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lua.Test.address)
}
#endif
inline void Test::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lua.Test.address)
}
inline void Test::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lua.Test.address)
}
inline ::std::string* Test::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:lua.Test.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_address() {
  // @@protoc_insertion_point(field_release:lua.Test.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:lua.Test.address)
}

// repeated string service = 2;
inline int Test::service_size() const {
  return service_.size();
}
inline void Test::clear_service() {
  service_.Clear();
}
inline const ::std::string& Test::service(int index) const {
  // @@protoc_insertion_point(field_get:lua.Test.service)
  return service_.Get(index);
}
inline ::std::string* Test::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:lua.Test.service)
  return service_.Mutable(index);
}
inline void Test::set_service(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lua.Test.service)
  service_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test::set_service(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lua.Test.service)
  service_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test::set_service(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lua.Test.service)
}
inline void Test::set_service(int index, const char* value, size_t size) {
  service_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lua.Test.service)
}
inline ::std::string* Test::add_service() {
  // @@protoc_insertion_point(field_add_mutable:lua.Test.service)
  return service_.Add();
}
inline void Test::add_service(const ::std::string& value) {
  service_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lua.Test.service)
}
#if LANG_CXX11
inline void Test::add_service(::std::string&& value) {
  service_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lua.Test.service)
}
#endif
inline void Test::add_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lua.Test.service)
}
inline void Test::add_service(const char* value, size_t size) {
  service_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lua.Test.service)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Test::service() const {
  // @@protoc_insertion_point(field_list:lua.Test.service)
  return service_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Test::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:lua.Test.service)
  return &service_;
}

// -------------------------------------------------------------------

// Test1

// -------------------------------------------------------------------

// Rpc_Request_Call_Notice

// int32 methodId = 1;
inline void Rpc_Request_Call_Notice::clear_methodid() {
  methodid_ = 0;
}
inline ::google::protobuf::int32 Rpc_Request_Call_Notice::methodid() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Request.Call.Notice.methodId)
  return methodid_;
}
inline void Rpc_Request_Call_Notice::set_methodid(::google::protobuf::int32 value) {
  
  methodid_ = value;
  // @@protoc_insertion_point(field_set:lua.Rpc.Request.Call.Notice.methodId)
}

// -------------------------------------------------------------------

// Rpc_Request_Call

// string name = 1;
inline void Rpc_Request_Call::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rpc_Request_Call::name() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Request.Call.name)
  return name_.GetNoArena();
}
inline void Rpc_Request_Call::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lua.Rpc.Request.Call.name)
}
#if LANG_CXX11
inline void Rpc_Request_Call::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lua.Rpc.Request.Call.name)
}
#endif
inline void Rpc_Request_Call::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lua.Rpc.Request.Call.name)
}
inline void Rpc_Request_Call::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lua.Rpc.Request.Call.name)
}
inline ::std::string* Rpc_Request_Call::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lua.Rpc.Request.Call.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rpc_Request_Call::release_name() {
  // @@protoc_insertion_point(field_release:lua.Rpc.Request.Call.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rpc_Request_Call::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lua.Rpc.Request.Call.name)
}

// -------------------------------------------------------------------

// Rpc_Request

// string name = 1;
inline void Rpc_Request::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rpc_Request::name() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Request.name)
  return name_.GetNoArena();
}
inline void Rpc_Request::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lua.Rpc.Request.name)
}
#if LANG_CXX11
inline void Rpc_Request::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lua.Rpc.Request.name)
}
#endif
inline void Rpc_Request::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lua.Rpc.Request.name)
}
inline void Rpc_Request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lua.Rpc.Request.name)
}
inline ::std::string* Rpc_Request::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lua.Rpc.Request.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rpc_Request::release_name() {
  // @@protoc_insertion_point(field_release:lua.Rpc.Request.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rpc_Request::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lua.Rpc.Request.name)
}

// int64 user_id = 2;
inline void Rpc_Request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Rpc_Request::user_id() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Request.user_id)
  return user_id_;
}
inline void Rpc_Request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:lua.Rpc.Request.user_id)
}

// int64 rpc_id = 3;
inline void Rpc_Request::clear_rpc_id() {
  rpc_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Rpc_Request::rpc_id() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Request.rpc_id)
  return rpc_id_;
}
inline void Rpc_Request::set_rpc_id(::google::protobuf::int64 value) {
  
  rpc_id_ = value;
  // @@protoc_insertion_point(field_set:lua.Rpc.Request.rpc_id)
}

// -------------------------------------------------------------------

// Rpc_Response

// string name = 1;
inline void Rpc_Response::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rpc_Response::name() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Response.name)
  return name_.GetNoArena();
}
inline void Rpc_Response::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lua.Rpc.Response.name)
}
#if LANG_CXX11
inline void Rpc_Response::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lua.Rpc.Response.name)
}
#endif
inline void Rpc_Response::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lua.Rpc.Response.name)
}
inline void Rpc_Response::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lua.Rpc.Response.name)
}
inline ::std::string* Rpc_Response::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lua.Rpc.Response.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rpc_Response::release_name() {
  // @@protoc_insertion_point(field_release:lua.Rpc.Response.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rpc_Response::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lua.Rpc.Response.name)
}

// int64 user_id = 2;
inline void Rpc_Response::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Rpc_Response::user_id() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Response.user_id)
  return user_id_;
}
inline void Rpc_Response::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:lua.Rpc.Response.user_id)
}

// int64 rpc_id = 3;
inline void Rpc_Response::clear_rpc_id() {
  rpc_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Rpc_Response::rpc_id() const {
  // @@protoc_insertion_point(field_get:lua.Rpc.Response.rpc_id)
  return rpc_id_;
}
inline void Rpc_Response::set_rpc_id(::google::protobuf::int64 value) {
  
  rpc_id_ = value;
  // @@protoc_insertion_point(field_set:lua.Rpc.Response.rpc_id)
}

// -------------------------------------------------------------------

// Rpc

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lua

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_test_2eproto
