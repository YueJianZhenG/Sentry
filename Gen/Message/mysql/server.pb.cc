// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql/server.proto

#include "mysql/server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace server {
class registryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<registry> _instance;
} _registry_default_instance_;
class logDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<log> _instance;
} _log_default_instance_;
class user_addressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<user_address> _instance;
} _user_address_default_instance_;
}  // namespace server
static void InitDefaultsregistry_mysql_2fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_registry_default_instance_;
    new (ptr) ::server::registry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::registry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_registry_mysql_2fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsregistry_mysql_2fserver_2eproto}, {}};

static void InitDefaultslog_mysql_2fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_log_default_instance_;
    new (ptr) ::server::log();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::log::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_log_mysql_2fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslog_mysql_2fserver_2eproto}, {}};

static void InitDefaultsuser_address_mysql_2fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_user_address_default_instance_;
    new (ptr) ::server::user_address();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::user_address::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_user_address_mysql_2fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsuser_address_mysql_2fserver_2eproto}, {}};

void InitDefaults_mysql_2fserver_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_registry_mysql_2fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_log_mysql_2fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_user_address_mysql_2fserver_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_mysql_2fserver_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_mysql_2fserver_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_mysql_2fserver_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_mysql_2fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::registry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::registry, server_id_),
  PROTOBUF_FIELD_OFFSET(::server::registry, server_name_),
  PROTOBUF_FIELD_OFFSET(::server::registry, rpc_address_),
  PROTOBUF_FIELD_OFFSET(::server::registry, http_address_),
  PROTOBUF_FIELD_OFFSET(::server::registry, gate_address_),
  PROTOBUF_FIELD_OFFSET(::server::registry, last_ping_time_),
  PROTOBUF_FIELD_OFFSET(::server::registry, last_time_str_),
  PROTOBUF_FIELD_OFFSET(::server::registry, server_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::log, server_name_),
  PROTOBUF_FIELD_OFFSET(::server::log, rpc_address_),
  PROTOBUF_FIELD_OFFSET(::server::log, log_level_),
  PROTOBUF_FIELD_OFFSET(::server::log, content_),
  PROTOBUF_FIELD_OFFSET(::server::log, log_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::user_address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::user_address, user_id_),
  PROTOBUF_FIELD_OFFSET(::server::user_address, token_),
  PROTOBUF_FIELD_OFFSET(::server::user_address, server_name_),
  PROTOBUF_FIELD_OFFSET(::server::user_address, rpc_address_),
  PROTOBUF_FIELD_OFFSET(::server::user_address, last_ping_time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::server::registry)},
  { 13, -1, sizeof(::server::log)},
  { 23, -1, sizeof(::server::user_address)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_registry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_log_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_user_address_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_mysql_2fserver_2eproto = {
  {}, AddDescriptors_mysql_2fserver_2eproto, "mysql/server.proto", schemas,
  file_default_instances, TableStruct_mysql_2fserver_2eproto::offsets,
  file_level_metadata_mysql_2fserver_2eproto, 3, file_level_enum_descriptors_mysql_2fserver_2eproto, file_level_service_descriptors_mysql_2fserver_2eproto,
};

const char descriptor_table_protodef_mysql_2fserver_2eproto[] =
  "\n\022mysql/server.proto\022\006server\"\273\001\n\010registr"
  "y\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013server_name\030\002 \001("
  "\t\022\023\n\013rpc_address\030\003 \001(\t\022\024\n\014http_address\030\004"
  " \001(\t\022\024\n\014gate_address\030\005 \001(\t\022\026\n\016last_ping_"
  "time\030\006 \001(\003\022\025\n\rlast_time_str\030\007 \001(\t\022\027\n\017ser"
  "ver_group_id\030\010 \001(\005\"e\n\003log\022\023\n\013server_name"
  "\030\001 \001(\t\022\023\n\013rpc_address\030\002 \001(\t\022\021\n\tlog_level"
  "\030\003 \001(\t\022\017\n\007content\030\004 \001(\t\022\020\n\010log_time\030\005 \001("
  "\003\"p\n\014user_address\022\017\n\007user_id\030\001 \001(\003\022\r\n\005to"
  "ken\030\002 \001(\t\022\023\n\013server_name\030\003 \001(\t\022\023\n\013rpc_ad"
  "dress\030\004 \001(\t\022\026\n\016last_ping_time\030\005 \001(\003b\006pro"
  "to3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_mysql_2fserver_2eproto = {
  false, InitDefaults_mysql_2fserver_2eproto, 
  descriptor_table_protodef_mysql_2fserver_2eproto,
  "mysql/server.proto", &assign_descriptors_table_mysql_2fserver_2eproto, 443,
};

void AddDescriptors_mysql_2fserver_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_mysql_2fserver_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mysql_2fserver_2eproto = []() { AddDescriptors_mysql_2fserver_2eproto(); return true; }();
namespace server {

// ===================================================================

void registry::InitAsDefaultInstance() {
}
class registry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int registry::kServerIdFieldNumber;
const int registry::kServerNameFieldNumber;
const int registry::kRpcAddressFieldNumber;
const int registry::kHttpAddressFieldNumber;
const int registry::kGateAddressFieldNumber;
const int registry::kLastPingTimeFieldNumber;
const int registry::kLastTimeStrFieldNumber;
const int registry::kServerGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

registry::registry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.registry)
}
registry::registry(const registry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  rpc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rpc_address().size() > 0) {
    rpc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_address_);
  }
  http_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.http_address().size() > 0) {
    http_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_address_);
  }
  gate_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gate_address().size() > 0) {
    gate_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gate_address_);
  }
  last_time_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_time_str().size() > 0) {
    last_time_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_time_str_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ping_time_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(last_ping_time_));
  // @@protoc_insertion_point(copy_constructor:server.registry)
}

void registry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_registry_mysql_2fserver_2eproto.base);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gate_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_time_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ping_time_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(last_ping_time_));
}

registry::~registry() {
  // @@protoc_insertion_point(destructor:server.registry)
  SharedDtor();
}

void registry::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gate_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_time_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void registry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const registry& registry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_registry_mysql_2fserver_2eproto.base);
  return *internal_default_instance();
}


void registry::Clear() {
// @@protoc_insertion_point(message_clear_start:server.registry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gate_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_time_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ping_time_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(last_ping_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* registry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<registry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string server_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.registry.server_name");
        object = msg->mutable_server_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string rpc_address = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.registry.rpc_address");
        object = msg->mutable_rpc_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string http_address = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.registry.http_address");
        object = msg->mutable_http_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string gate_address = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.registry.gate_address");
        object = msg->mutable_gate_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 last_ping_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_last_ping_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string last_time_str = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.registry.last_time_str");
        object = msg->mutable_last_time_str();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 server_group_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_server_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool registry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.registry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.registry.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rpc_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rpc_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.registry.rpc_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string http_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->http_address().data(), static_cast<int>(this->http_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.registry.http_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gate_address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gate_address().data(), static_cast<int>(this->gate_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.registry.gate_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_ping_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ping_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_time_str = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_time_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_time_str().data(), static_cast<int>(this->last_time_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.registry.last_time_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_group_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.registry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.registry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void registry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.registry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_name(), output);
  }

  // string rpc_address = 3;
  if (this->rpc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.rpc_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rpc_address(), output);
  }

  // string http_address = 4;
  if (this->http_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_address().data(), static_cast<int>(this->http_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.http_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->http_address(), output);
  }

  // string gate_address = 5;
  if (this->gate_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gate_address().data(), static_cast<int>(this->gate_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.gate_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gate_address(), output);
  }

  // int64 last_ping_time = 6;
  if (this->last_ping_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_ping_time(), output);
  }

  // string last_time_str = 7;
  if (this->last_time_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_time_str().data(), static_cast<int>(this->last_time_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.last_time_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->last_time_str(), output);
  }

  // int32 server_group_id = 8;
  if (this->server_group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->server_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server.registry)
}

::google::protobuf::uint8* registry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.registry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // string rpc_address = 3;
  if (this->rpc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.rpc_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rpc_address(), target);
  }

  // string http_address = 4;
  if (this->http_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_address().data(), static_cast<int>(this->http_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.http_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->http_address(), target);
  }

  // string gate_address = 5;
  if (this->gate_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gate_address().data(), static_cast<int>(this->gate_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.gate_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gate_address(), target);
  }

  // int64 last_ping_time = 6;
  if (this->last_ping_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_ping_time(), target);
  }

  // string last_time_str = 7;
  if (this->last_time_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_time_str().data(), static_cast<int>(this->last_time_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.registry.last_time_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->last_time_str(), target);
  }

  // int32 server_group_id = 8;
  if (this->server_group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->server_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.registry)
  return target;
}

size_t registry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.registry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string rpc_address = 3;
  if (this->rpc_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rpc_address());
  }

  // string http_address = 4;
  if (this->http_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->http_address());
  }

  // string gate_address = 5;
  if (this->gate_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gate_address());
  }

  // string last_time_str = 7;
  if (this->last_time_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_time_str());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 server_group_id = 8;
  if (this->server_group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_group_id());
  }

  // int64 last_ping_time = 6;
  if (this->last_ping_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ping_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.registry)
  GOOGLE_DCHECK_NE(&from, this);
  const registry* source =
      ::google::protobuf::DynamicCastToGenerated<registry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.registry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.registry)
    MergeFrom(*source);
  }
}

void registry::MergeFrom(const registry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.registry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.rpc_address().size() > 0) {

    rpc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_address_);
  }
  if (from.http_address().size() > 0) {

    http_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_address_);
  }
  if (from.gate_address().size() > 0) {

    gate_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gate_address_);
  }
  if (from.last_time_str().size() > 0) {

    last_time_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_time_str_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.server_group_id() != 0) {
    set_server_group_id(from.server_group_id());
  }
  if (from.last_ping_time() != 0) {
    set_last_ping_time(from.last_ping_time());
  }
}

void registry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.registry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registry::CopyFrom(const registry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.registry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registry::IsInitialized() const {
  return true;
}

void registry::Swap(registry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void registry::InternalSwap(registry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rpc_address_.Swap(&other->rpc_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  http_address_.Swap(&other->http_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gate_address_.Swap(&other->gate_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_time_str_.Swap(&other->last_time_str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(server_group_id_, other->server_group_id_);
  swap(last_ping_time_, other->last_ping_time_);
}

::google::protobuf::Metadata registry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mysql_2fserver_2eproto);
  return ::file_level_metadata_mysql_2fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void log::InitAsDefaultInstance() {
}
class log::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int log::kServerNameFieldNumber;
const int log::kRpcAddressFieldNumber;
const int log::kLogLevelFieldNumber;
const int log::kContentFieldNumber;
const int log::kLogTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

log::log()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.log)
}
log::log(const log& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  rpc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rpc_address().size() > 0) {
    rpc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_address_);
  }
  log_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_level().size() > 0) {
    log_level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_level_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  log_time_ = from.log_time_;
  // @@protoc_insertion_point(copy_constructor:server.log)
}

void log::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_log_mysql_2fserver_2eproto.base);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_time_ = PROTOBUF_LONGLONG(0);
}

log::~log() {
  // @@protoc_insertion_point(destructor:server.log)
  SharedDtor();
}

void log::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const log& log::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_log_mysql_2fserver_2eproto.base);
  return *internal_default_instance();
}


void log::Clear() {
// @@protoc_insertion_point(message_clear_start:server.log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* log::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<log*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string server_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.log.server_name");
        object = msg->mutable_server_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string rpc_address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.log.rpc_address");
        object = msg->mutable_rpc_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string log_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.log.log_level");
        object = msg->mutable_log_level();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string content = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.log.content");
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 log_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_log_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.log)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string server_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.log.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rpc_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rpc_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.log.rpc_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_level().data(), static_cast<int>(this->log_level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.log.log_level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.log.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 log_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.log)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_name(), output);
  }

  // string rpc_address = 2;
  if (this->rpc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.rpc_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rpc_address(), output);
  }

  // string log_level = 3;
  if (this->log_level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_level().data(), static_cast<int>(this->log_level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.log_level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log_level(), output);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // int64 log_time = 5;
  if (this->log_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->log_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server.log)
}

::google::protobuf::uint8* log::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // string rpc_address = 2;
  if (this->rpc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.rpc_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rpc_address(), target);
  }

  // string log_level = 3;
  if (this->log_level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_level().data(), static_cast<int>(this->log_level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.log_level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log_level(), target);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.log.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // int64 log_time = 5;
  if (this->log_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->log_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.log)
  return target;
}

size_t log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.log)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string rpc_address = 2;
  if (this->rpc_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rpc_address());
  }

  // string log_level = 3;
  if (this->log_level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_level());
  }

  // string content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // int64 log_time = 5;
  if (this->log_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->log_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.log)
  GOOGLE_DCHECK_NE(&from, this);
  const log* source =
      ::google::protobuf::DynamicCastToGenerated<log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.log)
    MergeFrom(*source);
  }
}

void log::MergeFrom(const log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.rpc_address().size() > 0) {

    rpc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_address_);
  }
  if (from.log_level().size() > 0) {

    log_level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_level_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.log_time() != 0) {
    set_log_time(from.log_time());
  }
}

void log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log::CopyFrom(const log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log::IsInitialized() const {
  return true;
}

void log::Swap(log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void log::InternalSwap(log* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rpc_address_.Swap(&other->rpc_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_level_.Swap(&other->log_level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(log_time_, other->log_time_);
}

::google::protobuf::Metadata log::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mysql_2fserver_2eproto);
  return ::file_level_metadata_mysql_2fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void user_address::InitAsDefaultInstance() {
}
class user_address::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_address::kUserIdFieldNumber;
const int user_address::kTokenFieldNumber;
const int user_address::kServerNameFieldNumber;
const int user_address::kRpcAddressFieldNumber;
const int user_address::kLastPingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_address::user_address()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.user_address)
}
user_address::user_address(const user_address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  rpc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rpc_address().size() > 0) {
    rpc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_address_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ping_time_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(last_ping_time_));
  // @@protoc_insertion_point(copy_constructor:server.user_address)
}

void user_address::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_user_address_mysql_2fserver_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ping_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(last_ping_time_));
}

user_address::~user_address() {
  // @@protoc_insertion_point(destructor:server.user_address)
  SharedDtor();
}

void user_address::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const user_address& user_address::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_user_address_mysql_2fserver_2eproto.base);
  return *internal_default_instance();
}


void user_address::Clear() {
// @@protoc_insertion_point(message_clear_start:server.user_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ping_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(last_ping_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* user_address::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<user_address*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.user_address.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string server_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.user_address.server_name");
        object = msg->mutable_server_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string rpc_address = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("server.user_address.rpc_address");
        object = msg->mutable_rpc_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 last_ping_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_last_ping_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool user_address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.user_address)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.user_address.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.user_address.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rpc_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rpc_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.user_address.rpc_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_ping_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ping_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.user_address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.user_address)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void user_address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.user_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.user_address.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // string server_name = 3;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.user_address.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_name(), output);
  }

  // string rpc_address = 4;
  if (this->rpc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.user_address.rpc_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rpc_address(), output);
  }

  // int64 last_ping_time = 5;
  if (this->last_ping_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_ping_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server.user_address)
}

::google::protobuf::uint8* user_address::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.user_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.user_address.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // string server_name = 3;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.user_address.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }

  // string rpc_address = 4;
  if (this->rpc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rpc_address().data(), static_cast<int>(this->rpc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.user_address.rpc_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rpc_address(), target);
  }

  // int64 last_ping_time = 5;
  if (this->last_ping_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_ping_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.user_address)
  return target;
}

size_t user_address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.user_address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string server_name = 3;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string rpc_address = 4;
  if (this->rpc_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rpc_address());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int64 last_ping_time = 5;
  if (this->last_ping_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ping_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.user_address)
  GOOGLE_DCHECK_NE(&from, this);
  const user_address* source =
      ::google::protobuf::DynamicCastToGenerated<user_address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.user_address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.user_address)
    MergeFrom(*source);
  }
}

void user_address::MergeFrom(const user_address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.user_address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.rpc_address().size() > 0) {

    rpc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_address_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.last_ping_time() != 0) {
    set_last_ping_time(from.last_ping_time());
  }
}

void user_address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.user_address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_address::CopyFrom(const user_address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.user_address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_address::IsInitialized() const {
  return true;
}

void user_address::Swap(user_address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_address::InternalSwap(user_address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_name_.Swap(&other->server_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rpc_address_.Swap(&other->rpc_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(last_ping_time_, other->last_ping_time_);
}

::google::protobuf::Metadata user_address::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mysql_2fserver_2eproto);
  return ::file_level_metadata_mysql_2fserver_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::server::registry* Arena::CreateMaybeMessage< ::server::registry >(Arena* arena) {
  return Arena::CreateInternal< ::server::registry >(arena);
}
template<> PROTOBUF_NOINLINE ::server::log* Arena::CreateMaybeMessage< ::server::log >(Arena* arena) {
  return Arena::CreateInternal< ::server::log >(arena);
}
template<> PROTOBUF_NOINLINE ::server::user_address* Arena::CreateMaybeMessage< ::server::user_address >(Arena* arena) {
  return Arena::CreateInternal< ::server::user_address >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
