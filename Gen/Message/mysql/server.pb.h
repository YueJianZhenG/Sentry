// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql/server.proto

#ifndef PROTOBUF_INCLUDED_mysql_2fserver_2eproto
#define PROTOBUF_INCLUDED_mysql_2fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysql_2fserver_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_mysql_2fserver_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_mysql_2fserver_2eproto();
namespace server {
class log;
class logDefaultTypeInternal;
extern logDefaultTypeInternal _log_default_instance_;
class registry;
class registryDefaultTypeInternal;
extern registryDefaultTypeInternal _registry_default_instance_;
class user_address;
class user_addressDefaultTypeInternal;
extern user_addressDefaultTypeInternal _user_address_default_instance_;
}  // namespace server
namespace google {
namespace protobuf {
template<> ::server::log* Arena::CreateMaybeMessage<::server::log>(Arena*);
template<> ::server::registry* Arena::CreateMaybeMessage<::server::registry>(Arena*);
template<> ::server::user_address* Arena::CreateMaybeMessage<::server::user_address>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace server {

// ===================================================================

class registry :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.registry) */ {
 public:
  registry();
  virtual ~registry();

  registry(const registry& from);

  inline registry& operator=(const registry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registry(registry&& from) noexcept
    : registry() {
    *this = ::std::move(from);
  }

  inline registry& operator=(registry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const registry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registry* internal_default_instance() {
    return reinterpret_cast<const registry*>(
               &_registry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(registry* other);
  friend void swap(registry& a, registry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registry* New() const final {
    return CreateMaybeMessage<registry>(nullptr);
  }

  registry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registry& from);
  void MergeFrom(const registry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string rpc_address = 3;
  void clear_rpc_address();
  static const int kRpcAddressFieldNumber = 3;
  const ::std::string& rpc_address() const;
  void set_rpc_address(const ::std::string& value);
  #if LANG_CXX11
  void set_rpc_address(::std::string&& value);
  #endif
  void set_rpc_address(const char* value);
  void set_rpc_address(const char* value, size_t size);
  ::std::string* mutable_rpc_address();
  ::std::string* release_rpc_address();
  void set_allocated_rpc_address(::std::string* rpc_address);

  // string http_address = 4;
  void clear_http_address();
  static const int kHttpAddressFieldNumber = 4;
  const ::std::string& http_address() const;
  void set_http_address(const ::std::string& value);
  #if LANG_CXX11
  void set_http_address(::std::string&& value);
  #endif
  void set_http_address(const char* value);
  void set_http_address(const char* value, size_t size);
  ::std::string* mutable_http_address();
  ::std::string* release_http_address();
  void set_allocated_http_address(::std::string* http_address);

  // string gate_address = 5;
  void clear_gate_address();
  static const int kGateAddressFieldNumber = 5;
  const ::std::string& gate_address() const;
  void set_gate_address(const ::std::string& value);
  #if LANG_CXX11
  void set_gate_address(::std::string&& value);
  #endif
  void set_gate_address(const char* value);
  void set_gate_address(const char* value, size_t size);
  ::std::string* mutable_gate_address();
  ::std::string* release_gate_address();
  void set_allocated_gate_address(::std::string* gate_address);

  // string last_time_str = 7;
  void clear_last_time_str();
  static const int kLastTimeStrFieldNumber = 7;
  const ::std::string& last_time_str() const;
  void set_last_time_str(const ::std::string& value);
  #if LANG_CXX11
  void set_last_time_str(::std::string&& value);
  #endif
  void set_last_time_str(const char* value);
  void set_last_time_str(const char* value, size_t size);
  ::std::string* mutable_last_time_str();
  ::std::string* release_last_time_str();
  void set_allocated_last_time_str(::std::string* last_time_str);

  // int32 server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // int32 server_group_id = 8;
  void clear_server_group_id();
  static const int kServerGroupIdFieldNumber = 8;
  ::google::protobuf::int32 server_group_id() const;
  void set_server_group_id(::google::protobuf::int32 value);

  // int64 last_ping_time = 6;
  void clear_last_ping_time();
  static const int kLastPingTimeFieldNumber = 6;
  ::google::protobuf::int64 last_ping_time() const;
  void set_last_ping_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.registry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr rpc_address_;
  ::google::protobuf::internal::ArenaStringPtr http_address_;
  ::google::protobuf::internal::ArenaStringPtr gate_address_;
  ::google::protobuf::internal::ArenaStringPtr last_time_str_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 server_group_id_;
  ::google::protobuf::int64 last_ping_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2fserver_2eproto;
};
// -------------------------------------------------------------------

class log :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.log) */ {
 public:
  log();
  virtual ~log();

  log(const log& from);

  inline log& operator=(const log& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  log(log&& from) noexcept
    : log() {
    *this = ::std::move(from);
  }

  inline log& operator=(log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const log* internal_default_instance() {
    return reinterpret_cast<const log*>(
               &_log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(log* other);
  friend void swap(log& a, log& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline log* New() const final {
    return CreateMaybeMessage<log>(nullptr);
  }

  log* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<log>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const log& from);
  void MergeFrom(const log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string rpc_address = 2;
  void clear_rpc_address();
  static const int kRpcAddressFieldNumber = 2;
  const ::std::string& rpc_address() const;
  void set_rpc_address(const ::std::string& value);
  #if LANG_CXX11
  void set_rpc_address(::std::string&& value);
  #endif
  void set_rpc_address(const char* value);
  void set_rpc_address(const char* value, size_t size);
  ::std::string* mutable_rpc_address();
  ::std::string* release_rpc_address();
  void set_allocated_rpc_address(::std::string* rpc_address);

  // string log_level = 3;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 3;
  const ::std::string& log_level() const;
  void set_log_level(const ::std::string& value);
  #if LANG_CXX11
  void set_log_level(::std::string&& value);
  #endif
  void set_log_level(const char* value);
  void set_log_level(const char* value, size_t size);
  ::std::string* mutable_log_level();
  ::std::string* release_log_level();
  void set_allocated_log_level(::std::string* log_level);

  // string content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int64 log_time = 5;
  void clear_log_time();
  static const int kLogTimeFieldNumber = 5;
  ::google::protobuf::int64 log_time() const;
  void set_log_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.log)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr rpc_address_;
  ::google::protobuf::internal::ArenaStringPtr log_level_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int64 log_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2fserver_2eproto;
};
// -------------------------------------------------------------------

class user_address :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.user_address) */ {
 public:
  user_address();
  virtual ~user_address();

  user_address(const user_address& from);

  inline user_address& operator=(const user_address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user_address(user_address&& from) noexcept
    : user_address() {
    *this = ::std::move(from);
  }

  inline user_address& operator=(user_address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const user_address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_address* internal_default_instance() {
    return reinterpret_cast<const user_address*>(
               &_user_address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(user_address* other);
  friend void swap(user_address& a, user_address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user_address* New() const final {
    return CreateMaybeMessage<user_address>(nullptr);
  }

  user_address* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<user_address>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const user_address& from);
  void MergeFrom(const user_address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string server_name = 3;
  void clear_server_name();
  static const int kServerNameFieldNumber = 3;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string rpc_address = 4;
  void clear_rpc_address();
  static const int kRpcAddressFieldNumber = 4;
  const ::std::string& rpc_address() const;
  void set_rpc_address(const ::std::string& value);
  #if LANG_CXX11
  void set_rpc_address(::std::string&& value);
  #endif
  void set_rpc_address(const char* value);
  void set_rpc_address(const char* value, size_t size);
  ::std::string* mutable_rpc_address();
  ::std::string* release_rpc_address();
  void set_allocated_rpc_address(::std::string* rpc_address);

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int64 last_ping_time = 5;
  void clear_last_ping_time();
  static const int kLastPingTimeFieldNumber = 5;
  ::google::protobuf::int64 last_ping_time() const;
  void set_last_ping_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.user_address)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr rpc_address_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 last_ping_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// registry

// int32 server_id = 1;
inline void registry::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 registry::server_id() const {
  // @@protoc_insertion_point(field_get:server.registry.server_id)
  return server_id_;
}
inline void registry::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:server.registry.server_id)
}

// string server_name = 2;
inline void registry::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registry::server_name() const {
  // @@protoc_insertion_point(field_get:server.registry.server_name)
  return server_name_.GetNoArena();
}
inline void registry::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.registry.server_name)
}
#if LANG_CXX11
inline void registry::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.registry.server_name)
}
#endif
inline void registry::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.registry.server_name)
}
inline void registry::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.registry.server_name)
}
inline ::std::string* registry::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:server.registry.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registry::release_server_name() {
  // @@protoc_insertion_point(field_release:server.registry.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registry::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:server.registry.server_name)
}

// string rpc_address = 3;
inline void registry::clear_rpc_address() {
  rpc_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registry::rpc_address() const {
  // @@protoc_insertion_point(field_get:server.registry.rpc_address)
  return rpc_address_.GetNoArena();
}
inline void registry::set_rpc_address(const ::std::string& value) {
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.registry.rpc_address)
}
#if LANG_CXX11
inline void registry::set_rpc_address(::std::string&& value) {
  
  rpc_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.registry.rpc_address)
}
#endif
inline void registry::set_rpc_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.registry.rpc_address)
}
inline void registry::set_rpc_address(const char* value, size_t size) {
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.registry.rpc_address)
}
inline ::std::string* registry::mutable_rpc_address() {
  
  // @@protoc_insertion_point(field_mutable:server.registry.rpc_address)
  return rpc_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registry::release_rpc_address() {
  // @@protoc_insertion_point(field_release:server.registry.rpc_address)
  
  return rpc_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registry::set_allocated_rpc_address(::std::string* rpc_address) {
  if (rpc_address != nullptr) {
    
  } else {
    
  }
  rpc_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc_address);
  // @@protoc_insertion_point(field_set_allocated:server.registry.rpc_address)
}

// string http_address = 4;
inline void registry::clear_http_address() {
  http_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registry::http_address() const {
  // @@protoc_insertion_point(field_get:server.registry.http_address)
  return http_address_.GetNoArena();
}
inline void registry::set_http_address(const ::std::string& value) {
  
  http_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.registry.http_address)
}
#if LANG_CXX11
inline void registry::set_http_address(::std::string&& value) {
  
  http_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.registry.http_address)
}
#endif
inline void registry::set_http_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  http_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.registry.http_address)
}
inline void registry::set_http_address(const char* value, size_t size) {
  
  http_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.registry.http_address)
}
inline ::std::string* registry::mutable_http_address() {
  
  // @@protoc_insertion_point(field_mutable:server.registry.http_address)
  return http_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registry::release_http_address() {
  // @@protoc_insertion_point(field_release:server.registry.http_address)
  
  return http_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registry::set_allocated_http_address(::std::string* http_address) {
  if (http_address != nullptr) {
    
  } else {
    
  }
  http_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_address);
  // @@protoc_insertion_point(field_set_allocated:server.registry.http_address)
}

// string gate_address = 5;
inline void registry::clear_gate_address() {
  gate_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registry::gate_address() const {
  // @@protoc_insertion_point(field_get:server.registry.gate_address)
  return gate_address_.GetNoArena();
}
inline void registry::set_gate_address(const ::std::string& value) {
  
  gate_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.registry.gate_address)
}
#if LANG_CXX11
inline void registry::set_gate_address(::std::string&& value) {
  
  gate_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.registry.gate_address)
}
#endif
inline void registry::set_gate_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gate_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.registry.gate_address)
}
inline void registry::set_gate_address(const char* value, size_t size) {
  
  gate_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.registry.gate_address)
}
inline ::std::string* registry::mutable_gate_address() {
  
  // @@protoc_insertion_point(field_mutable:server.registry.gate_address)
  return gate_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registry::release_gate_address() {
  // @@protoc_insertion_point(field_release:server.registry.gate_address)
  
  return gate_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registry::set_allocated_gate_address(::std::string* gate_address) {
  if (gate_address != nullptr) {
    
  } else {
    
  }
  gate_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gate_address);
  // @@protoc_insertion_point(field_set_allocated:server.registry.gate_address)
}

// int64 last_ping_time = 6;
inline void registry::clear_last_ping_time() {
  last_ping_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 registry::last_ping_time() const {
  // @@protoc_insertion_point(field_get:server.registry.last_ping_time)
  return last_ping_time_;
}
inline void registry::set_last_ping_time(::google::protobuf::int64 value) {
  
  last_ping_time_ = value;
  // @@protoc_insertion_point(field_set:server.registry.last_ping_time)
}

// string last_time_str = 7;
inline void registry::clear_last_time_str() {
  last_time_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registry::last_time_str() const {
  // @@protoc_insertion_point(field_get:server.registry.last_time_str)
  return last_time_str_.GetNoArena();
}
inline void registry::set_last_time_str(const ::std::string& value) {
  
  last_time_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.registry.last_time_str)
}
#if LANG_CXX11
inline void registry::set_last_time_str(::std::string&& value) {
  
  last_time_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.registry.last_time_str)
}
#endif
inline void registry::set_last_time_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_time_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.registry.last_time_str)
}
inline void registry::set_last_time_str(const char* value, size_t size) {
  
  last_time_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.registry.last_time_str)
}
inline ::std::string* registry::mutable_last_time_str() {
  
  // @@protoc_insertion_point(field_mutable:server.registry.last_time_str)
  return last_time_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registry::release_last_time_str() {
  // @@protoc_insertion_point(field_release:server.registry.last_time_str)
  
  return last_time_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registry::set_allocated_last_time_str(::std::string* last_time_str) {
  if (last_time_str != nullptr) {
    
  } else {
    
  }
  last_time_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_time_str);
  // @@protoc_insertion_point(field_set_allocated:server.registry.last_time_str)
}

// int32 server_group_id = 8;
inline void registry::clear_server_group_id() {
  server_group_id_ = 0;
}
inline ::google::protobuf::int32 registry::server_group_id() const {
  // @@protoc_insertion_point(field_get:server.registry.server_group_id)
  return server_group_id_;
}
inline void registry::set_server_group_id(::google::protobuf::int32 value) {
  
  server_group_id_ = value;
  // @@protoc_insertion_point(field_set:server.registry.server_group_id)
}

// -------------------------------------------------------------------

// log

// string server_name = 1;
inline void log::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log::server_name() const {
  // @@protoc_insertion_point(field_get:server.log.server_name)
  return server_name_.GetNoArena();
}
inline void log::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.log.server_name)
}
#if LANG_CXX11
inline void log::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.log.server_name)
}
#endif
inline void log::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.log.server_name)
}
inline void log::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.log.server_name)
}
inline ::std::string* log::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:server.log.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log::release_server_name() {
  // @@protoc_insertion_point(field_release:server.log.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:server.log.server_name)
}

// string rpc_address = 2;
inline void log::clear_rpc_address() {
  rpc_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log::rpc_address() const {
  // @@protoc_insertion_point(field_get:server.log.rpc_address)
  return rpc_address_.GetNoArena();
}
inline void log::set_rpc_address(const ::std::string& value) {
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.log.rpc_address)
}
#if LANG_CXX11
inline void log::set_rpc_address(::std::string&& value) {
  
  rpc_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.log.rpc_address)
}
#endif
inline void log::set_rpc_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.log.rpc_address)
}
inline void log::set_rpc_address(const char* value, size_t size) {
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.log.rpc_address)
}
inline ::std::string* log::mutable_rpc_address() {
  
  // @@protoc_insertion_point(field_mutable:server.log.rpc_address)
  return rpc_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log::release_rpc_address() {
  // @@protoc_insertion_point(field_release:server.log.rpc_address)
  
  return rpc_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log::set_allocated_rpc_address(::std::string* rpc_address) {
  if (rpc_address != nullptr) {
    
  } else {
    
  }
  rpc_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc_address);
  // @@protoc_insertion_point(field_set_allocated:server.log.rpc_address)
}

// string log_level = 3;
inline void log::clear_log_level() {
  log_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log::log_level() const {
  // @@protoc_insertion_point(field_get:server.log.log_level)
  return log_level_.GetNoArena();
}
inline void log::set_log_level(const ::std::string& value) {
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.log.log_level)
}
#if LANG_CXX11
inline void log::set_log_level(::std::string&& value) {
  
  log_level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.log.log_level)
}
#endif
inline void log::set_log_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.log.log_level)
}
inline void log::set_log_level(const char* value, size_t size) {
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.log.log_level)
}
inline ::std::string* log::mutable_log_level() {
  
  // @@protoc_insertion_point(field_mutable:server.log.log_level)
  return log_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log::release_log_level() {
  // @@protoc_insertion_point(field_release:server.log.log_level)
  
  return log_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log::set_allocated_log_level(::std::string* log_level) {
  if (log_level != nullptr) {
    
  } else {
    
  }
  log_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_level);
  // @@protoc_insertion_point(field_set_allocated:server.log.log_level)
}

// string content = 4;
inline void log::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log::content() const {
  // @@protoc_insertion_point(field_get:server.log.content)
  return content_.GetNoArena();
}
inline void log::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.log.content)
}
#if LANG_CXX11
inline void log::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.log.content)
}
#endif
inline void log::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.log.content)
}
inline void log::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.log.content)
}
inline ::std::string* log::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:server.log.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log::release_content() {
  // @@protoc_insertion_point(field_release:server.log.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:server.log.content)
}

// int64 log_time = 5;
inline void log::clear_log_time() {
  log_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 log::log_time() const {
  // @@protoc_insertion_point(field_get:server.log.log_time)
  return log_time_;
}
inline void log::set_log_time(::google::protobuf::int64 value) {
  
  log_time_ = value;
  // @@protoc_insertion_point(field_set:server.log.log_time)
}

// -------------------------------------------------------------------

// user_address

// int64 user_id = 1;
inline void user_address::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 user_address::user_id() const {
  // @@protoc_insertion_point(field_get:server.user_address.user_id)
  return user_id_;
}
inline void user_address::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:server.user_address.user_id)
}

// string token = 2;
inline void user_address::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_address::token() const {
  // @@protoc_insertion_point(field_get:server.user_address.token)
  return token_.GetNoArena();
}
inline void user_address::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.user_address.token)
}
#if LANG_CXX11
inline void user_address::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.user_address.token)
}
#endif
inline void user_address::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.user_address.token)
}
inline void user_address::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.user_address.token)
}
inline ::std::string* user_address::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:server.user_address.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_address::release_token() {
  // @@protoc_insertion_point(field_release:server.user_address.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_address::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:server.user_address.token)
}

// string server_name = 3;
inline void user_address::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_address::server_name() const {
  // @@protoc_insertion_point(field_get:server.user_address.server_name)
  return server_name_.GetNoArena();
}
inline void user_address::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.user_address.server_name)
}
#if LANG_CXX11
inline void user_address::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.user_address.server_name)
}
#endif
inline void user_address::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.user_address.server_name)
}
inline void user_address::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.user_address.server_name)
}
inline ::std::string* user_address::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:server.user_address.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_address::release_server_name() {
  // @@protoc_insertion_point(field_release:server.user_address.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_address::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:server.user_address.server_name)
}

// string rpc_address = 4;
inline void user_address::clear_rpc_address() {
  rpc_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_address::rpc_address() const {
  // @@protoc_insertion_point(field_get:server.user_address.rpc_address)
  return rpc_address_.GetNoArena();
}
inline void user_address::set_rpc_address(const ::std::string& value) {
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.user_address.rpc_address)
}
#if LANG_CXX11
inline void user_address::set_rpc_address(::std::string&& value) {
  
  rpc_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.user_address.rpc_address)
}
#endif
inline void user_address::set_rpc_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.user_address.rpc_address)
}
inline void user_address::set_rpc_address(const char* value, size_t size) {
  
  rpc_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.user_address.rpc_address)
}
inline ::std::string* user_address::mutable_rpc_address() {
  
  // @@protoc_insertion_point(field_mutable:server.user_address.rpc_address)
  return rpc_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_address::release_rpc_address() {
  // @@protoc_insertion_point(field_release:server.user_address.rpc_address)
  
  return rpc_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_address::set_allocated_rpc_address(::std::string* rpc_address) {
  if (rpc_address != nullptr) {
    
  } else {
    
  }
  rpc_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc_address);
  // @@protoc_insertion_point(field_set_allocated:server.user_address.rpc_address)
}

// int64 last_ping_time = 5;
inline void user_address::clear_last_ping_time() {
  last_ping_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 user_address::last_ping_time() const {
  // @@protoc_insertion_point(field_get:server.user_address.last_ping_time)
  return last_ping_time_;
}
inline void user_address::set_last_ping_time(::google::protobuf::int64 value) {
  
  last_ping_time_ = value;
  // @@protoc_insertion_point(field_set:server.user_address.last_ping_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_mysql_2fserver_2eproto
