// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_INCLUDED_db_2eproto
#define PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_db_2eproto();
namespace db {
class mongo;
class mongoDefaultTypeInternal;
extern mongoDefaultTypeInternal _mongo_default_instance_;
class mongo_command;
class mongo_commandDefaultTypeInternal;
extern mongo_commandDefaultTypeInternal _mongo_command_default_instance_;
class mongo_command_request;
class mongo_command_requestDefaultTypeInternal;
extern mongo_command_requestDefaultTypeInternal _mongo_command_request_default_instance_;
class mongo_command_response;
class mongo_command_responseDefaultTypeInternal;
extern mongo_command_responseDefaultTypeInternal _mongo_command_response_default_instance_;
class mongo_index;
class mongo_indexDefaultTypeInternal;
extern mongo_indexDefaultTypeInternal _mongo_index_default_instance_;
class mongo_insert;
class mongo_insertDefaultTypeInternal;
extern mongo_insertDefaultTypeInternal _mongo_insert_default_instance_;
class mongo_query;
class mongo_queryDefaultTypeInternal;
extern mongo_queryDefaultTypeInternal _mongo_query_default_instance_;
class mongo_query_request;
class mongo_query_requestDefaultTypeInternal;
extern mongo_query_requestDefaultTypeInternal _mongo_query_request_default_instance_;
class mongo_query_response;
class mongo_query_responseDefaultTypeInternal;
extern mongo_query_responseDefaultTypeInternal _mongo_query_response_default_instance_;
class mongo_remove;
class mongo_removeDefaultTypeInternal;
extern mongo_removeDefaultTypeInternal _mongo_remove_default_instance_;
class mongo_update;
class mongo_updateDefaultTypeInternal;
extern mongo_updateDefaultTypeInternal _mongo_update_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::mongo* Arena::CreateMaybeMessage<::db::mongo>(Arena*);
template<> ::db::mongo_command* Arena::CreateMaybeMessage<::db::mongo_command>(Arena*);
template<> ::db::mongo_command_request* Arena::CreateMaybeMessage<::db::mongo_command_request>(Arena*);
template<> ::db::mongo_command_response* Arena::CreateMaybeMessage<::db::mongo_command_response>(Arena*);
template<> ::db::mongo_index* Arena::CreateMaybeMessage<::db::mongo_index>(Arena*);
template<> ::db::mongo_insert* Arena::CreateMaybeMessage<::db::mongo_insert>(Arena*);
template<> ::db::mongo_query* Arena::CreateMaybeMessage<::db::mongo_query>(Arena*);
template<> ::db::mongo_query_request* Arena::CreateMaybeMessage<::db::mongo_query_request>(Arena*);
template<> ::db::mongo_query_response* Arena::CreateMaybeMessage<::db::mongo_query_response>(Arena*);
template<> ::db::mongo_remove* Arena::CreateMaybeMessage<::db::mongo_remove>(Arena*);
template<> ::db::mongo_update* Arena::CreateMaybeMessage<::db::mongo_update>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class mongo_insert :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.insert) */ {
 public:
  mongo_insert();
  virtual ~mongo_insert();

  mongo_insert(const mongo_insert& from);

  inline mongo_insert& operator=(const mongo_insert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_insert(mongo_insert&& from) noexcept
    : mongo_insert() {
    *this = ::std::move(from);
  }

  inline mongo_insert& operator=(mongo_insert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_insert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_insert* internal_default_instance() {
    return reinterpret_cast<const mongo_insert*>(
               &_mongo_insert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(mongo_insert* other);
  friend void swap(mongo_insert& a, mongo_insert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_insert* New() const final {
    return CreateMaybeMessage<mongo_insert>(nullptr);
  }

  mongo_insert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_insert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_insert& from);
  void MergeFrom(const mongo_insert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_insert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string json = 2;
  void clear_json();
  static const int kJsonFieldNumber = 2;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // int32 flag = 3;
  void clear_flag();
  static const int kFlagFieldNumber = 3;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.insert)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::google::protobuf::int32 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_query_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.query.request) */ {
 public:
  mongo_query_request();
  virtual ~mongo_query_request();

  mongo_query_request(const mongo_query_request& from);

  inline mongo_query_request& operator=(const mongo_query_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_query_request(mongo_query_request&& from) noexcept
    : mongo_query_request() {
    *this = ::std::move(from);
  }

  inline mongo_query_request& operator=(mongo_query_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_query_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_query_request* internal_default_instance() {
    return reinterpret_cast<const mongo_query_request*>(
               &_mongo_query_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mongo_query_request* other);
  friend void swap(mongo_query_request& a, mongo_query_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_query_request* New() const final {
    return CreateMaybeMessage<mongo_query_request>(nullptr);
  }

  mongo_query_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_query_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_query_request& from);
  void MergeFrom(const mongo_query_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_query_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string json = 2;
  void clear_json();
  static const int kJsonFieldNumber = 2;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.query.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_query_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.query.response) */ {
 public:
  mongo_query_response();
  virtual ~mongo_query_response();

  mongo_query_response(const mongo_query_response& from);

  inline mongo_query_response& operator=(const mongo_query_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_query_response(mongo_query_response&& from) noexcept
    : mongo_query_response() {
    *this = ::std::move(from);
  }

  inline mongo_query_response& operator=(mongo_query_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_query_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_query_response* internal_default_instance() {
    return reinterpret_cast<const mongo_query_response*>(
               &_mongo_query_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(mongo_query_response* other);
  friend void swap(mongo_query_response& a, mongo_query_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_query_response* New() const final {
    return CreateMaybeMessage<mongo_query_response>(nullptr);
  }

  mongo_query_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_query_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_query_response& from);
  void MergeFrom(const mongo_query_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_query_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string jsons = 1;
  int jsons_size() const;
  void clear_jsons();
  static const int kJsonsFieldNumber = 1;
  const ::std::string& jsons(int index) const;
  ::std::string* mutable_jsons(int index);
  void set_jsons(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jsons(int index, ::std::string&& value);
  #endif
  void set_jsons(int index, const char* value);
  void set_jsons(int index, const char* value, size_t size);
  ::std::string* add_jsons();
  void add_jsons(const ::std::string& value);
  #if LANG_CXX11
  void add_jsons(::std::string&& value);
  #endif
  void add_jsons(const char* value);
  void add_jsons(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& jsons() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_jsons();

  // @@protoc_insertion_point(class_scope:db.mongo.query.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> jsons_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_query :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.query) */ {
 public:
  mongo_query();
  virtual ~mongo_query();

  mongo_query(const mongo_query& from);

  inline mongo_query& operator=(const mongo_query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_query(mongo_query&& from) noexcept
    : mongo_query() {
    *this = ::std::move(from);
  }

  inline mongo_query& operator=(mongo_query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_query* internal_default_instance() {
    return reinterpret_cast<const mongo_query*>(
               &_mongo_query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(mongo_query* other);
  friend void swap(mongo_query& a, mongo_query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_query* New() const final {
    return CreateMaybeMessage<mongo_query>(nullptr);
  }

  mongo_query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_query& from);
  void MergeFrom(const mongo_query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_query_request request;
  typedef mongo_query_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.query)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_remove :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.remove) */ {
 public:
  mongo_remove();
  virtual ~mongo_remove();

  mongo_remove(const mongo_remove& from);

  inline mongo_remove& operator=(const mongo_remove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_remove(mongo_remove&& from) noexcept
    : mongo_remove() {
    *this = ::std::move(from);
  }

  inline mongo_remove& operator=(mongo_remove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_remove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_remove* internal_default_instance() {
    return reinterpret_cast<const mongo_remove*>(
               &_mongo_remove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(mongo_remove* other);
  friend void swap(mongo_remove& a, mongo_remove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_remove* New() const final {
    return CreateMaybeMessage<mongo_remove>(nullptr);
  }

  mongo_remove* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_remove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_remove& from);
  void MergeFrom(const mongo_remove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_remove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string json = 2;
  void clear_json();
  static const int kJsonFieldNumber = 2;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // int32 flag = 4;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.remove)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_index :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.index) */ {
 public:
  mongo_index();
  virtual ~mongo_index();

  mongo_index(const mongo_index& from);

  inline mongo_index& operator=(const mongo_index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_index(mongo_index&& from) noexcept
    : mongo_index() {
    *this = ::std::move(from);
  }

  inline mongo_index& operator=(mongo_index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_index* internal_default_instance() {
    return reinterpret_cast<const mongo_index*>(
               &_mongo_index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(mongo_index* other);
  friend void swap(mongo_index& a, mongo_index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_index* New() const final {
    return CreateMaybeMessage<mongo_index>(nullptr);
  }

  mongo_index* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_index>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_index& from);
  void MergeFrom(const mongo_index& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:db.mongo.index)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_update :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.update) */ {
 public:
  mongo_update();
  virtual ~mongo_update();

  mongo_update(const mongo_update& from);

  inline mongo_update& operator=(const mongo_update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_update(mongo_update&& from) noexcept
    : mongo_update() {
    *this = ::std::move(from);
  }

  inline mongo_update& operator=(mongo_update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_update* internal_default_instance() {
    return reinterpret_cast<const mongo_update*>(
               &_mongo_update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(mongo_update* other);
  friend void swap(mongo_update& a, mongo_update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_update* New() const final {
    return CreateMaybeMessage<mongo_update>(nullptr);
  }

  mongo_update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_update& from);
  void MergeFrom(const mongo_update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string select = 2;
  void clear_select();
  static const int kSelectFieldNumber = 2;
  const ::std::string& select() const;
  void set_select(const ::std::string& value);
  #if LANG_CXX11
  void set_select(::std::string&& value);
  #endif
  void set_select(const char* value);
  void set_select(const char* value, size_t size);
  ::std::string* mutable_select();
  ::std::string* release_select();
  void set_allocated_select(::std::string* select);

  // string update = 3;
  void clear_update();
  static const int kUpdateFieldNumber = 3;
  const ::std::string& update() const;
  void set_update(const ::std::string& value);
  #if LANG_CXX11
  void set_update(::std::string&& value);
  #endif
  void set_update(const char* value);
  void set_update(const char* value, size_t size);
  ::std::string* mutable_update();
  ::std::string* release_update();
  void set_allocated_update(::std::string* update);

  // string tag = 4;
  void clear_tag();
  static const int kTagFieldNumber = 4;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // int32 flag = 5;
  void clear_flag();
  static const int kFlagFieldNumber = 5;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.update)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr select_;
  ::google::protobuf::internal::ArenaStringPtr update_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::int32 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_command_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.command.request) */ {
 public:
  mongo_command_request();
  virtual ~mongo_command_request();

  mongo_command_request(const mongo_command_request& from);

  inline mongo_command_request& operator=(const mongo_command_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_command_request(mongo_command_request&& from) noexcept
    : mongo_command_request() {
    *this = ::std::move(from);
  }

  inline mongo_command_request& operator=(mongo_command_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_command_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_command_request* internal_default_instance() {
    return reinterpret_cast<const mongo_command_request*>(
               &_mongo_command_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(mongo_command_request* other);
  friend void swap(mongo_command_request& a, mongo_command_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_command_request* New() const final {
    return CreateMaybeMessage<mongo_command_request>(nullptr);
  }

  mongo_command_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_command_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_command_request& from);
  void MergeFrom(const mongo_command_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_command_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:db.mongo.command.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_command_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.command.response) */ {
 public:
  mongo_command_response();
  virtual ~mongo_command_response();

  mongo_command_response(const mongo_command_response& from);

  inline mongo_command_response& operator=(const mongo_command_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_command_response(mongo_command_response&& from) noexcept
    : mongo_command_response() {
    *this = ::std::move(from);
  }

  inline mongo_command_response& operator=(mongo_command_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_command_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_command_response* internal_default_instance() {
    return reinterpret_cast<const mongo_command_response*>(
               &_mongo_command_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(mongo_command_response* other);
  friend void swap(mongo_command_response& a, mongo_command_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_command_response* New() const final {
    return CreateMaybeMessage<mongo_command_response>(nullptr);
  }

  mongo_command_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_command_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_command_response& from);
  void MergeFrom(const mongo_command_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_command_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string jsons = 1;
  int jsons_size() const;
  void clear_jsons();
  static const int kJsonsFieldNumber = 1;
  const ::std::string& jsons(int index) const;
  ::std::string* mutable_jsons(int index);
  void set_jsons(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jsons(int index, ::std::string&& value);
  #endif
  void set_jsons(int index, const char* value);
  void set_jsons(int index, const char* value, size_t size);
  ::std::string* add_jsons();
  void add_jsons(const ::std::string& value);
  #if LANG_CXX11
  void add_jsons(::std::string&& value);
  #endif
  void add_jsons(const char* value);
  void add_jsons(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& jsons() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_jsons();

  // @@protoc_insertion_point(class_scope:db.mongo.command.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> jsons_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo_command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.command) */ {
 public:
  mongo_command();
  virtual ~mongo_command();

  mongo_command(const mongo_command& from);

  inline mongo_command& operator=(const mongo_command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_command(mongo_command&& from) noexcept
    : mongo_command() {
    *this = ::std::move(from);
  }

  inline mongo_command& operator=(mongo_command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_command* internal_default_instance() {
    return reinterpret_cast<const mongo_command*>(
               &_mongo_command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(mongo_command* other);
  friend void swap(mongo_command& a, mongo_command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_command* New() const final {
    return CreateMaybeMessage<mongo_command>(nullptr);
  }

  mongo_command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_command& from);
  void MergeFrom(const mongo_command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_command_request request;
  typedef mongo_command_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.command)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mongo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo) */ {
 public:
  mongo();
  virtual ~mongo();

  mongo(const mongo& from);

  inline mongo& operator=(const mongo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo(mongo&& from) noexcept
    : mongo() {
    *this = ::std::move(from);
  }

  inline mongo& operator=(mongo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo* internal_default_instance() {
    return reinterpret_cast<const mongo*>(
               &_mongo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(mongo* other);
  friend void swap(mongo& a, mongo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo* New() const final {
    return CreateMaybeMessage<mongo>(nullptr);
  }

  mongo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo& from);
  void MergeFrom(const mongo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_insert insert;
  typedef mongo_query query;
  typedef mongo_remove remove;
  typedef mongo_index index;
  typedef mongo_update update;
  typedef mongo_command command;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mongo_insert

// string tab = 1;
inline void mongo_insert::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_insert::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.insert.tab)
  return tab_.GetNoArena();
}
inline void mongo_insert::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.insert.tab)
}
#if LANG_CXX11
inline void mongo_insert::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.insert.tab)
}
#endif
inline void mongo_insert::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.insert.tab)
}
inline void mongo_insert::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.insert.tab)
}
inline ::std::string* mongo_insert::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.insert.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_insert::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.insert.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_insert::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.insert.tab)
}

// string json = 2;
inline void mongo_insert::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_insert::json() const {
  // @@protoc_insertion_point(field_get:db.mongo.insert.json)
  return json_.GetNoArena();
}
inline void mongo_insert::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.insert.json)
}
#if LANG_CXX11
inline void mongo_insert::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.insert.json)
}
#endif
inline void mongo_insert::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.insert.json)
}
inline void mongo_insert::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.insert.json)
}
inline ::std::string* mongo_insert::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.insert.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_insert::release_json() {
  // @@protoc_insertion_point(field_release:db.mongo.insert.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_insert::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.insert.json)
}

// int32 flag = 3;
inline void mongo_insert::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 mongo_insert::flag() const {
  // @@protoc_insertion_point(field_get:db.mongo.insert.flag)
  return flag_;
}
inline void mongo_insert::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.insert.flag)
}

// -------------------------------------------------------------------

// mongo_query_request

// string tab = 1;
inline void mongo_query_request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_query_request::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.query.request.tab)
  return tab_.GetNoArena();
}
inline void mongo_query_request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.query.request.tab)
}
#if LANG_CXX11
inline void mongo_query_request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.query.request.tab)
}
#endif
inline void mongo_query_request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.query.request.tab)
}
inline void mongo_query_request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.query.request.tab)
}
inline ::std::string* mongo_query_request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.query.request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_query_request::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.query.request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_query_request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.query.request.tab)
}

// string json = 2;
inline void mongo_query_request::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_query_request::json() const {
  // @@protoc_insertion_point(field_get:db.mongo.query.request.json)
  return json_.GetNoArena();
}
inline void mongo_query_request::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.query.request.json)
}
#if LANG_CXX11
inline void mongo_query_request::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.query.request.json)
}
#endif
inline void mongo_query_request::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.query.request.json)
}
inline void mongo_query_request::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.query.request.json)
}
inline ::std::string* mongo_query_request::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.query.request.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_query_request::release_json() {
  // @@protoc_insertion_point(field_release:db.mongo.query.request.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_query_request::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.query.request.json)
}

// int32 limit = 3;
inline void mongo_query_request::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 mongo_query_request::limit() const {
  // @@protoc_insertion_point(field_get:db.mongo.query.request.limit)
  return limit_;
}
inline void mongo_query_request::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.query.request.limit)
}

// -------------------------------------------------------------------

// mongo_query_response

// repeated string jsons = 1;
inline int mongo_query_response::jsons_size() const {
  return jsons_.size();
}
inline void mongo_query_response::clear_jsons() {
  jsons_.Clear();
}
inline const ::std::string& mongo_query_response::jsons(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.query.response.jsons)
  return jsons_.Get(index);
}
inline ::std::string* mongo_query_response::mutable_jsons(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.query.response.jsons)
  return jsons_.Mutable(index);
}
inline void mongo_query_response::set_jsons(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.query.response.jsons)
  jsons_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_query_response::set_jsons(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.query.response.jsons)
  jsons_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_query_response::set_jsons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.query.response.jsons)
}
inline void mongo_query_response::set_jsons(int index, const char* value, size_t size) {
  jsons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.query.response.jsons)
}
inline ::std::string* mongo_query_response::add_jsons() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.query.response.jsons)
  return jsons_.Add();
}
inline void mongo_query_response::add_jsons(const ::std::string& value) {
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.query.response.jsons)
}
#if LANG_CXX11
inline void mongo_query_response::add_jsons(::std::string&& value) {
  jsons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.query.response.jsons)
}
#endif
inline void mongo_query_response::add_jsons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.query.response.jsons)
}
inline void mongo_query_response::add_jsons(const char* value, size_t size) {
  jsons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.query.response.jsons)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_query_response::jsons() const {
  // @@protoc_insertion_point(field_list:db.mongo.query.response.jsons)
  return jsons_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_query_response::mutable_jsons() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.query.response.jsons)
  return &jsons_;
}

// -------------------------------------------------------------------

// mongo_query

// -------------------------------------------------------------------

// mongo_remove

// string tab = 1;
inline void mongo_remove::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_remove::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.remove.tab)
  return tab_.GetNoArena();
}
inline void mongo_remove::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.remove.tab)
}
#if LANG_CXX11
inline void mongo_remove::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.remove.tab)
}
#endif
inline void mongo_remove::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.remove.tab)
}
inline void mongo_remove::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.remove.tab)
}
inline ::std::string* mongo_remove::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.remove.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_remove::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.remove.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_remove::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.remove.tab)
}

// string json = 2;
inline void mongo_remove::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_remove::json() const {
  // @@protoc_insertion_point(field_get:db.mongo.remove.json)
  return json_.GetNoArena();
}
inline void mongo_remove::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.remove.json)
}
#if LANG_CXX11
inline void mongo_remove::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.remove.json)
}
#endif
inline void mongo_remove::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.remove.json)
}
inline void mongo_remove::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.remove.json)
}
inline ::std::string* mongo_remove::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.remove.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_remove::release_json() {
  // @@protoc_insertion_point(field_release:db.mongo.remove.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_remove::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.remove.json)
}

// int32 limit = 3;
inline void mongo_remove::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 mongo_remove::limit() const {
  // @@protoc_insertion_point(field_get:db.mongo.remove.limit)
  return limit_;
}
inline void mongo_remove::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.remove.limit)
}

// int32 flag = 4;
inline void mongo_remove::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 mongo_remove::flag() const {
  // @@protoc_insertion_point(field_get:db.mongo.remove.flag)
  return flag_;
}
inline void mongo_remove::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.remove.flag)
}

// -------------------------------------------------------------------

// mongo_index

// string tab = 1;
inline void mongo_index::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_index::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.index.tab)
  return tab_.GetNoArena();
}
inline void mongo_index::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.index.tab)
}
#if LANG_CXX11
inline void mongo_index::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.index.tab)
}
#endif
inline void mongo_index::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.index.tab)
}
inline void mongo_index::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.index.tab)
}
inline ::std::string* mongo_index::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.index.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_index::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.index.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_index::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.index.tab)
}

// string name = 2;
inline void mongo_index::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_index::name() const {
  // @@protoc_insertion_point(field_get:db.mongo.index.name)
  return name_.GetNoArena();
}
inline void mongo_index::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.index.name)
}
#if LANG_CXX11
inline void mongo_index::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.index.name)
}
#endif
inline void mongo_index::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.index.name)
}
inline void mongo_index::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.index.name)
}
inline ::std::string* mongo_index::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.index.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_index::release_name() {
  // @@protoc_insertion_point(field_release:db.mongo.index.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_index::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.index.name)
}

// -------------------------------------------------------------------

// mongo_update

// string tab = 1;
inline void mongo_update::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_update::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.update.tab)
  return tab_.GetNoArena();
}
inline void mongo_update::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.update.tab)
}
#if LANG_CXX11
inline void mongo_update::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.update.tab)
}
#endif
inline void mongo_update::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.update.tab)
}
inline void mongo_update::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.update.tab)
}
inline ::std::string* mongo_update::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.update.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_update::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.update.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_update::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.update.tab)
}

// string select = 2;
inline void mongo_update::clear_select() {
  select_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_update::select() const {
  // @@protoc_insertion_point(field_get:db.mongo.update.select)
  return select_.GetNoArena();
}
inline void mongo_update::set_select(const ::std::string& value) {
  
  select_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.update.select)
}
#if LANG_CXX11
inline void mongo_update::set_select(::std::string&& value) {
  
  select_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.update.select)
}
#endif
inline void mongo_update::set_select(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  select_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.update.select)
}
inline void mongo_update::set_select(const char* value, size_t size) {
  
  select_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.update.select)
}
inline ::std::string* mongo_update::mutable_select() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.update.select)
  return select_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_update::release_select() {
  // @@protoc_insertion_point(field_release:db.mongo.update.select)
  
  return select_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_update::set_allocated_select(::std::string* select) {
  if (select != nullptr) {
    
  } else {
    
  }
  select_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), select);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.update.select)
}

// string update = 3;
inline void mongo_update::clear_update() {
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_update::update() const {
  // @@protoc_insertion_point(field_get:db.mongo.update.update)
  return update_.GetNoArena();
}
inline void mongo_update::set_update(const ::std::string& value) {
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.update.update)
}
#if LANG_CXX11
inline void mongo_update::set_update(::std::string&& value) {
  
  update_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.update.update)
}
#endif
inline void mongo_update::set_update(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.update.update)
}
inline void mongo_update::set_update(const char* value, size_t size) {
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.update.update)
}
inline ::std::string* mongo_update::mutable_update() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.update.update)
  return update_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_update::release_update() {
  // @@protoc_insertion_point(field_release:db.mongo.update.update)
  
  return update_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_update::set_allocated_update(::std::string* update) {
  if (update != nullptr) {
    
  } else {
    
  }
  update_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.update.update)
}

// string tag = 4;
inline void mongo_update::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_update::tag() const {
  // @@protoc_insertion_point(field_get:db.mongo.update.tag)
  return tag_.GetNoArena();
}
inline void mongo_update::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.update.tag)
}
#if LANG_CXX11
inline void mongo_update::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.update.tag)
}
#endif
inline void mongo_update::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.update.tag)
}
inline void mongo_update::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.update.tag)
}
inline ::std::string* mongo_update::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.update.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_update::release_tag() {
  // @@protoc_insertion_point(field_release:db.mongo.update.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_update::set_allocated_tag(::std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.update.tag)
}

// int32 flag = 5;
inline void mongo_update::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 mongo_update::flag() const {
  // @@protoc_insertion_point(field_get:db.mongo.update.flag)
  return flag_;
}
inline void mongo_update::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.update.flag)
}

// -------------------------------------------------------------------

// mongo_command_request

// string json = 1;
inline void mongo_command_request::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_command_request::json() const {
  // @@protoc_insertion_point(field_get:db.mongo.command.request.json)
  return json_.GetNoArena();
}
inline void mongo_command_request::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.command.request.json)
}
#if LANG_CXX11
inline void mongo_command_request::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.command.request.json)
}
#endif
inline void mongo_command_request::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.command.request.json)
}
inline void mongo_command_request::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.command.request.json)
}
inline ::std::string* mongo_command_request::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.command.request.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_command_request::release_json() {
  // @@protoc_insertion_point(field_release:db.mongo.command.request.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_command_request::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.command.request.json)
}

// -------------------------------------------------------------------

// mongo_command_response

// repeated string jsons = 1;
inline int mongo_command_response::jsons_size() const {
  return jsons_.size();
}
inline void mongo_command_response::clear_jsons() {
  jsons_.Clear();
}
inline const ::std::string& mongo_command_response::jsons(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.command.response.jsons)
  return jsons_.Get(index);
}
inline ::std::string* mongo_command_response::mutable_jsons(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.command.response.jsons)
  return jsons_.Mutable(index);
}
inline void mongo_command_response::set_jsons(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.command.response.jsons)
  jsons_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_command_response::set_jsons(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.command.response.jsons)
  jsons_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_command_response::set_jsons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.command.response.jsons)
}
inline void mongo_command_response::set_jsons(int index, const char* value, size_t size) {
  jsons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.command.response.jsons)
}
inline ::std::string* mongo_command_response::add_jsons() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.command.response.jsons)
  return jsons_.Add();
}
inline void mongo_command_response::add_jsons(const ::std::string& value) {
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.command.response.jsons)
}
#if LANG_CXX11
inline void mongo_command_response::add_jsons(::std::string&& value) {
  jsons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.command.response.jsons)
}
#endif
inline void mongo_command_response::add_jsons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jsons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.command.response.jsons)
}
inline void mongo_command_response::add_jsons(const char* value, size_t size) {
  jsons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.command.response.jsons)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_command_response::jsons() const {
  // @@protoc_insertion_point(field_list:db.mongo.command.response.jsons)
  return jsons_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_command_response::mutable_jsons() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.command.response.jsons)
  return &jsons_;
}

// -------------------------------------------------------------------

// mongo_command

// -------------------------------------------------------------------

// mongo

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_db_2eproto
