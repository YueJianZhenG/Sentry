cmake_minimum_required(VERSION 3.1.3)

project(Sentry CXX C)
if(MSVC)
    enable_language(C CXX ASM_MASM)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
else()
    enable_language(C CXX ASM)
endif()
add_definitions(-w)
add_definitions(-D __DEBUG__)
add_definitions(-D ASIO_STANDALONE)
#add_definitions(-D ONLY_MAIN_THREAD)
add_definitions(-D __RPC_DEBUG_LOG__)
file(GLOB_RECURSE CommonSrc "Common/*.h" "Common/*.cpp" "Common/*.hpp" "Common/*.cc" "Common/*.h" "Common/*.c")
file(GLOB_RECURSE ProtocolSrc "Protocol/*.h" "Protocol/*.cpp" "Protocol/*.hpp" "Protocol/*.cc")

list(APPEND CommonFiles ${CommonSrc} ${ProtocolSrc})

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_C_STANDARD 11)
if(MSVC)
    add_compile_options(/W4 /fp:fast /EHsc)
    add_link_options(/SAFESEH:NO)
else()
    add_compile_options(-Wall -g -Wno-sign-compare -Wno-class-memaccess -Wno-strict-aliasing)
    if(APPLE)
        add_compile_options(-fno-pie)
    endif()
endif()


set(ContextPath ${CMAKE_CURRENT_SOURCE_DIR}/Common/Coroutine/Context)
if(WIN32)
     SET(AsmFiles ${ContextPath}/context_x64.asm)
	 if(MSVC)
        if(CMAKE_SIZEOF_VOID_P EQUAL 4)
            set(AsmFiles ${ContextPath}/context_x86.asm)
        endif()
        set_property(SOURCE ${AsmFiles} PROPERTY LANGUAGE ASM_MASM)
    else()
        set(AsmFiles ${ContextPath}/context.S)
    endif()
else()
	SET(AsmFiles ${ContextPath}/context.S)
endif()

macro(source_group_by_dir dir source_files)
    if(MSVC)
        set(sgbd_cur_dir ${dir})
        foreach(sgbd_file ${source_files})
            #message(${sgbd_cur_dir} " " ${sgbd_file})
            string(REGEX REPLACE ${sgbd_cur_dir}/\(.*\) \\1 sgbd_fpath ${sgbd_file})
            string(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath})
            string(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
            string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
            if(sgbd_nogroup)
                set(sgbd_group_name "\\")
            endif(sgbd_nogroup)
            source_group(${sgbd_group_name} FILES ${sgbd_file})
        endforeach(sgbd_file)
    endif(MSVC)
endmacro(source_group_by_dir)

PROJECT(Server)

#第三方库包含

include_directories(Libs/include/rapidjson)
include_directories(Libs/include/protobuf)
include_directories(Libs/include/asio)
include_directories(Libs/include/lua5.3)
include_directories(Libs/include/mysql)
include_directories(Libs/include/spdlog)
include_directories(Libs/include/jemalloc)
include_directories(Libs/include/simdjson)
#公共组件


include_directories(Server/Gate)
include_directories(Server/Logic)
include_directories(${PROJECT_SOURCE_DIR}/Common)
include_directories(${PROJECT_SOURCE_DIR}/Common/DB/Mongo)
include_directories(${PROJECT_SOURCE_DIR}/Protocol)
include_directories(${PROJECT_SOURCE_DIR}/Server)
include_directories(${PROJECT_SOURCE_DIR}/Client)

file(GLOB_RECURSE GateSource "Server/*.h" "Server/*.cpp" "Server/*.hpp" "Server/*.cc")
file(GLOB_RECURSE MainSource "Main/*.h" "Main/*.cpp" "Main/*.hpp" "Main/*.cc")
file(GLOB_RECURSE LogicSource "Client/*.h" "Client/*.cpp" "Client/*.hpp" "Client/*.cc")

LINK_DIRECTORIES(Libs/lib)

SET(CMAKE_BUILD_TYPE "Debug")
list(APPEND ServerFiles ${DBSource} ${MainSource} ${LogicSource} ${GateSource})


find_program(CCACHE_PROGRAM ccache)
if (CCACHE_PROGRAM)
    message("use [ccache]")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
endif ()

ADD_EXECUTABLE(Sentry ${AsmFiles} ${CommonFiles} ${ServerFiles})

if(MSVC)
    set_property(GLOBAL PROPERTY USE_FOLDERS ON)

    foreach(file_name ${AsmFiles})
        source_group_by_dir(${PROJECT_SOURCE_DIR} ${file_name})
    endforeach()

    foreach(file_name ${CommonFiles})
        source_group_by_dir(${PROJECT_SOURCE_DIR} ${file_name})
    endforeach()

    foreach(file_name ${ServerFiles})
        source_group_by_dir(${PROJECT_SOURCE_DIR} ${file_name})
    endforeach()
    message("当前为win平台")
    TARGET_LINK_LIBRARIES(Sentry Lua53 libprotobufd libmysql mysqlclient)
elseif(APPLE)
    message("当前为mac平台")
    TARGET_LINK_LIBRARIES(Sentry Lua53 protobuf pthread mysqlclient yassl)
else()
    message("当前为linux平台")
    TARGET_LINK_LIBRARIES(Sentry Lua53 protobuf pthread mysqlclient yassl dl)
endif()
SET(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
