cmake_minimum_required(VERSION 3.1.3)
project(Sentry)
if(MSVC)
    enable_language(C CXX ASM_MASM)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
else()
    enable_language(C CXX ASM)
endif()
add_definitions(-w)
file(GLOB_RECURSE CommonSrc "Common/*.h" "Common/*.cpp" "Common/*.hpp" "Common/*.cc")
file(GLOB_RECURSE ProtocolSrc "Protocol/*.h" "Protocol/*.cpp" "Protocol/*.hpp" "Protocol/*.cc")

list(APPEND CommonFiles ${CommonSrc} ${ProtocolSrc})

set(CMAKE_CXX_STANDARD 11)

if(MSVC)
    add_compile_options(/W4 /fp:fast /EHsc)
    add_link_options(/SAFESEH:NO)
else()
    add_compile_options(-Wall -O2 -g -Wno-sign-compare -Wno-class-memaccess -Wno-strict-aliasing)
    if(APPLE)
        add_compile_options(-fno-pie)
    endif()
endif()

set(PROJECT_INIT_PATH ${PROJECT_SOURCE_DIR})
set(ContextPath ${CMAKE_CURRENT_SOURCE_DIR}/Common/Coroutine/Context)
if(WIN32)
     SET(AsmFiles ${ContextPath}/context_x64.asm)
	 if(MSVC)
        if(CMAKE_SIZEOF_VOID_P EQUAL 4)
            set(AsmFiles ${ContextPath}/context_x86.asm)
        endif()
        set_property(SOURCE ${AsmFiles} PROPERTY LANGUAGE ASM_MASM)
    else()
        set(AsmFiles ${ContextPath}/context.S)
    endif()
else()
	SET(AsmFiles ${ContextPath}/context.S)
endif()


macro(source_group_by_dir dir source_files)
    if(MSVC)
        set(sgbd_cur_dir ${dir})
        foreach(sgbd_file ${source_files})
            #message(${sgbd_cur_dir} " " ${sgbd_file})
            string(REGEX REPLACE ${sgbd_cur_dir}/\(.*\) \\1 sgbd_fpath ${sgbd_file})
            string(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath})
            string(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
            string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
            if(sgbd_nogroup)
                set(sgbd_group_name "\\")
            endif(sgbd_nogroup)
            source_group(${sgbd_group_name} FILES ${sgbd_file})
        endforeach(sgbd_file)
    endif(MSVC)
endmacro(source_group_by_dir)

option(BUILD_ALL "build all projects" OFF)
option(BUILD_SERVER "build server projects" ON)
option(BUILD_CLIENT "build client projects" ON)


if(BUILD_ALL)
    add_subdirectory(${PROJECT_SOURCE_DIR}/Server)
    add_subdirectory(${PROJECT_SOURCE_DIR}/Client)
    message("statr build all projects")
elseif(BUILD_SERVER)
    message("start build server projects")
    add_subdirectory(${PROJECT_SOURCE_DIR}/Server)
elseif(BUILD_CLIENT)
    message("start build client projects")
    add_subdirectory(${PROJECT_SOURCE_DIR}/Client)
endif()