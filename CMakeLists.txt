cmake_minimum_required(VERSION 3.1.3)

project(Sentry CXX C)
if(MSVC)
    enable_language(C CXX ASM_MASM)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
else()
    enable_language(C CXX ASM)
endif()
add_definitions(-w)
add_definitions(-D ASIO_STANDALONE)

option(__DEBUG__ "debug模式" ON)

option(__ENABLE_CLIENT__ "开启客户端" ON)
option(__RPC_DEBUG_LOG__ "打印rpc日志" ON)
option(__HTTP_DEBUG_LOG__ "打印http日志" ON)
option(__REDIS_DEBUG__ "开始redis调试" OFF)
option(ONLY_MAIN_THREAD "启用单线程模式" OFF)
option(__NET_ERROR_LOG__ "打印网络层错误" ON)
option(__ENABLE_MYSQL__ "是否使用mysql" ON)
option(__ENABLE_MONGODB__ "是否使用mongodb" ON)
option(__ENABLE_MIMALLOC__ "启用mimalloc管理内存" OFF)
option(__ENABLE_JEMALLOC__ "启用jemalloc管理内存" OFF)
option(__CLIENT_RPC_DEBUG_LOG__, "开启客户端rpc日志" ON)

if(__ENABLE_JEMALLOC__)
    message("启用jemalloc管理内存")
    add_definitions(-D __ENABLE_JEMALLOC__)
endif()

if(__ENABLE_MIMALLOC__)
    message("启用mimalloc管理内存")
    add_definitions(-D __ENABLE_MIMALLOC__)
endif()

if(ONLY_MAIN_THREAD)
    message("当前网络为单线程模型")
    add_definitions(-D ONLY_MAIN_THREAD)
else()
    message("当前网络为多线程模型")
endif()

if(__ENABLE_MYSQL__)
    message("启用mysql数据库")
    add_definitions(-D __ENABLE_MYSQL__)
endif()

if(__ENABLE_MONGODB__)
    message("启用mongodb数据库")
    add_definitions(-D __ENABLE_MONGODB__)
endif()

if(__DEBUG__)
    message("当前为debug模式")
    add_definitions(-D __DEBUG__)
    if(__RPC_DEBUG_LOG__)
        message("打印rpc日志到控制台")
        add_definitions(-D __RPC_DEBUG_LOG__)
    endif()

    if(__HTTP_DEBUG_LOG__)
        message("打印http日志到控制台")
        add_definitions(-D __HTTP_DEBUG_LOG__)
    endif()

    if(__NET_ERROR_LOG__)
        message("打印网络错误到控制台")
        add_definitions(-D __NET_ERROR_LOG__)
    endif()

    if(__REDIS_DEBUG__)
        message("打印redis命令到控制台")
        add_definitions(-D __REDIS_DEBUG__)
    endif()

    if(__ENABLE_CLIENT__)
        message("启用客户端")
        if(__CLIENT_RPC_DEBUG_LOG__)
            message("打印客户端rpc日志")
            add_definitions(-D __CLIENT_RPC_DEBUG_LOG__)
        endif()
        add_definitions(-D __ENABLE_CLIENT__)
    endif()
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_C_STANDARD 11)
if(MSVC)
    add_compile_options(/W4 /fp:fast /EHsc)
    add_link_options(/SAFESEH:NO)
else()
    add_compile_options(-Wall -g -Wno-sign-compare -Wno-class-memaccess -Wno-strict-aliasing)
    if(APPLE)
        add_compile_options(-fno-pie)
    endif()
endif()


set(ContextPath ${CMAKE_CURRENT_SOURCE_DIR}/Common/Coroutine/Context)
if(WIN32)
     SET(AsmFiles ${ContextPath}/context_x64.asm)
	 if(MSVC)
        if(CMAKE_SIZEOF_VOID_P EQUAL 4)
            set(AsmFiles ${ContextPath}/context_x86.asm)
        endif()
        set_property(SOURCE ${AsmFiles} PROPERTY LANGUAGE ASM_MASM)
    else()
        set(AsmFiles ${ContextPath}/context.S)
    endif()
else()
	SET(AsmFiles ${ContextPath}/context.S)
endif()

macro(source_group_by_dir dir source_files)
    if(MSVC)
        set(sgbd_cur_dir ${dir})
        foreach(sgbd_file ${source_files})
            #message(${sgbd_cur_dir} " " ${sgbd_file})
            string(REGEX REPLACE ${sgbd_cur_dir}/\(.*\) \\1 sgbd_fpath ${sgbd_file})
            string(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath})
            string(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
            string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
            if(sgbd_nogroup)
                set(sgbd_group_name "\\")
            endif(sgbd_nogroup)
            source_group(${sgbd_group_name} FILES ${sgbd_file})
        endforeach(sgbd_file)
    endif(MSVC)
endmacro(source_group_by_dir)

PROJECT(Server)

#第三方库包含

include_directories(Libs/include/rapidjson)
include_directories(Libs/include/protobuf)
include_directories(Libs/include/asio)
include_directories(Libs/include/lua5.3)
if(__ENABLE_MYSQL__)
    include_directories(Libs/include/mysql)
endif()
include_directories(Libs/include/spdlog)
include_directories(Libs/include/jemalloc)
include_directories(Libs/include/mimalloc)
#公共组件


include_directories(Server/Gate)
include_directories(Server/Logic)
include_directories(${PROJECT_SOURCE_DIR}/Common)
include_directories(${PROJECT_SOURCE_DIR}/Common/Amy)
include_directories(${PROJECT_SOURCE_DIR}/Protocol)
include_directories(${PROJECT_SOURCE_DIR}/Server)

if (__ENABLE_CLIENT__)
    include_directories(${PROJECT_SOURCE_DIR}/Client)
    file(GLOB_RECURSE LogicSource "Client/*.h" "Client/*.cpp" "Client/*.hpp" "Client/*.cc")
endif()

file(GLOB_RECURSE CommonSrc "Common/*.h" "Common/*.cpp" "Common/*.hpp" "Common/*.cc" "Common/*.h" "Common/*.c")
file(GLOB_RECURSE ProtocolSrc "Protocol/*.h" "Protocol/*.cpp" "Protocol/*.hpp" "Protocol/*.cc")

file(GLOB_RECURSE GateSource "Server/*.h" "Server/*.cpp" "Server/*.hpp" "Server/*.cc")
file(GLOB_RECURSE MainSource "Main/*.h" "Main/*.cpp" "Main/*.hpp" "Main/*.cc")

LINK_DIRECTORIES(Libs/lib)

if(__DEBUG__)
    SET(CMAKE_BUILD_TYPE "Debug")
else()
    SET(CMAKE_BUILD_TYPE "Release")
endif()

list(APPEND CommonFiles ${CommonSrc} ${ProtocolSrc})
list(APPEND ServerFiles ${MainSource} ${LogicSource} ${GateSource})

find_program(CCACHE_PROGRAM ccache)
if (CCACHE_PROGRAM)
    message("使用 ccache 作为编译缓存")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
endif()

ADD_EXECUTABLE(Sentry ${AsmFiles} ${CommonFiles} ${ServerFiles})

list(APPEND StaticLibs Lua53)

if(__ENABLE_JEMALLOC__)
    list(APPEND StaticLibs jemalloc)
endif()

if(__ENABLE_MIMALLOC__)
    list(APPEND StaticLibs mimalloc)
endif()

if(MSVC) #创建vs目录
    set_property(GLOBAL PROPERTY USE_FOLDERS ON)
    list(APPEND CxxFiles ${AsmFiles} ${CommonFiles} ${ServerFiles})
    foreach(file_name ${CxxFiles})
        source_group_by_dir(${PROJECT_SOURCE_DIR} ${file_name})
    endforeach()
endif()

if(MSVC)
    message("当前为win平台")
    add_definitions(-D __OS_WIN__)
    list(APPEND StaticLibs libprotobufd libmysql mysqlclient)
elseif(APPLE)
    message("当前为mac平台")
    add_definitions(-D __OS_MAC__)
    list(APPEND StaticLibs protobuf pthread mysqlclient)
else()
    message("当前为linux平台")
    add_definitions(-D __OS_LINUX__)
    list(APPEND StaticLibs protobuf pthread mysqlclient yassl dl)
endif()
TARGET_LINK_LIBRARIES(Sentry ${StaticLibs})
SET(WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
