// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sub.proto

#ifndef PROTOBUF_INCLUDED_sub_2eproto
#define PROTOBUF_INCLUDED_sub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sub_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_sub_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_sub_2eproto();
namespace sub {
class Add;
class AddDefaultTypeInternal;
extern AddDefaultTypeInternal _Add_default_instance_;
class AddUser;
class AddUserDefaultTypeInternal;
extern AddUserDefaultTypeInternal _AddUser_default_instance_;
class AddUser_Request;
class AddUser_RequestDefaultTypeInternal;
extern AddUser_RequestDefaultTypeInternal _AddUser_Request_default_instance_;
class Add_Request;
class Add_RequestDefaultTypeInternal;
extern Add_RequestDefaultTypeInternal _Add_Request_default_instance_;
class Del;
class DelDefaultTypeInternal;
extern DelDefaultTypeInternal _Del_default_instance_;
class DelUser;
class DelUserDefaultTypeInternal;
extern DelUserDefaultTypeInternal _DelUser_default_instance_;
class DelUser_Request;
class DelUser_RequestDefaultTypeInternal;
extern DelUser_RequestDefaultTypeInternal _DelUser_Request_default_instance_;
class Del_Request;
class Del_RequestDefaultTypeInternal;
extern Del_RequestDefaultTypeInternal _Del_Request_default_instance_;
class Push;
class PushDefaultTypeInternal;
extern PushDefaultTypeInternal _Push_default_instance_;
class Push_Request;
class Push_RequestDefaultTypeInternal;
extern Push_RequestDefaultTypeInternal _Push_Request_default_instance_;
class Push_Response;
class Push_ResponseDefaultTypeInternal;
extern Push_ResponseDefaultTypeInternal _Push_Response_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
}  // namespace sub
namespace google {
namespace protobuf {
template<> ::sub::Add* Arena::CreateMaybeMessage<::sub::Add>(Arena*);
template<> ::sub::AddUser* Arena::CreateMaybeMessage<::sub::AddUser>(Arena*);
template<> ::sub::AddUser_Request* Arena::CreateMaybeMessage<::sub::AddUser_Request>(Arena*);
template<> ::sub::Add_Request* Arena::CreateMaybeMessage<::sub::Add_Request>(Arena*);
template<> ::sub::Del* Arena::CreateMaybeMessage<::sub::Del>(Arena*);
template<> ::sub::DelUser* Arena::CreateMaybeMessage<::sub::DelUser>(Arena*);
template<> ::sub::DelUser_Request* Arena::CreateMaybeMessage<::sub::DelUser_Request>(Arena*);
template<> ::sub::Del_Request* Arena::CreateMaybeMessage<::sub::Del_Request>(Arena*);
template<> ::sub::Push* Arena::CreateMaybeMessage<::sub::Push>(Arena*);
template<> ::sub::Push_Request* Arena::CreateMaybeMessage<::sub::Push_Request>(Arena*);
template<> ::sub::Push_Response* Arena::CreateMaybeMessage<::sub::Push_Response>(Arena*);
template<> ::sub::ServiceInfo* Arena::CreateMaybeMessage<::sub::ServiceInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sub {

// ===================================================================

class ServiceInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.ServiceInfo) */ {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServiceInfo* other);
  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(nullptr);
  }

  ServiceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string service = 2;
  int service_size() const;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service(int index) const;
  ::std::string* mutable_service(int index);
  void set_service(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_service(int index, ::std::string&& value);
  #endif
  void set_service(int index, const char* value);
  void set_service(int index, const char* value, size_t size);
  ::std::string* add_service();
  void add_service(const ::std::string& value);
  #if LANG_CXX11
  void add_service(::std::string&& value);
  #endif
  void add_service(const char* value);
  void add_service(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& service() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_service();

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:sub.ServiceInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> service_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class Push_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.Push.Request) */ {
 public:
  Push_Request();
  virtual ~Push_Request();

  Push_Request(const Push_Request& from);

  inline Push_Request& operator=(const Push_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Push_Request(Push_Request&& from) noexcept
    : Push_Request() {
    *this = ::std::move(from);
  }

  inline Push_Request& operator=(Push_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Push_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Push_Request* internal_default_instance() {
    return reinterpret_cast<const Push_Request*>(
               &_Push_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Push_Request* other);
  friend void swap(Push_Request& a, Push_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Push_Request* New() const final {
    return CreateMaybeMessage<Push_Request>(nullptr);
  }

  Push_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Push_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Push_Request& from);
  void MergeFrom(const Push_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Push_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sub.ServiceInfo rpc = 2;
  bool has_rpc() const;
  void clear_rpc();
  static const int kRpcFieldNumber = 2;
  const ::sub::ServiceInfo& rpc() const;
  ::sub::ServiceInfo* release_rpc();
  ::sub::ServiceInfo* mutable_rpc();
  void set_allocated_rpc(::sub::ServiceInfo* rpc);

  // .sub.ServiceInfo http = 3;
  bool has_http() const;
  void clear_http();
  static const int kHttpFieldNumber = 3;
  const ::sub::ServiceInfo& http() const;
  ::sub::ServiceInfo* release_http();
  ::sub::ServiceInfo* mutable_http();
  void set_allocated_http(::sub::ServiceInfo* http);

  // int32 area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sub.Push.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sub::ServiceInfo* rpc_;
  ::sub::ServiceInfo* http_;
  ::google::protobuf::int32 area_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class Push_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.Push.Writer) */ {
 public:
  Push_Response();
  virtual ~Push_Response();

  Push_Response(const Push_Response& from);

  inline Push_Response& operator=(const Push_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Push_Response(Push_Response&& from) noexcept
    : Push_Response() {
    *this = ::std::move(from);
  }

  inline Push_Response& operator=(Push_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Push_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Push_Response* internal_default_instance() {
    return reinterpret_cast<const Push_Response*>(
               &_Push_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Push_Response* other);
  friend void swap(Push_Response& a, Push_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Push_Response* New() const final {
    return CreateMaybeMessage<Push_Response>(nullptr);
  }

  Push_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Push_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Push_Response& from);
  void MergeFrom(const Push_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Push_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sub.ServiceInfo rpc = 1;
  bool has_rpc() const;
  void clear_rpc();
  static const int kRpcFieldNumber = 1;
  const ::sub::ServiceInfo& rpc() const;
  ::sub::ServiceInfo* release_rpc();
  ::sub::ServiceInfo* mutable_rpc();
  void set_allocated_rpc(::sub::ServiceInfo* rpc);

  // .sub.ServiceInfo http = 2;
  bool has_http() const;
  void clear_http();
  static const int kHttpFieldNumber = 2;
  const ::sub::ServiceInfo& http() const;
  ::sub::ServiceInfo* release_http();
  ::sub::ServiceInfo* mutable_http();
  void set_allocated_http(::sub::ServiceInfo* http);

  // @@protoc_insertion_point(class_scope:sub.Push.Writer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sub::ServiceInfo* rpc_;
  ::sub::ServiceInfo* http_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class Push :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.Push) */ {
 public:
  Push();
  virtual ~Push();

  Push(const Push& from);

  inline Push& operator=(const Push& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Push(Push&& from) noexcept
    : Push() {
    *this = ::std::move(from);
  }

  inline Push& operator=(Push&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Push& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Push* internal_default_instance() {
    return reinterpret_cast<const Push*>(
               &_Push_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Push* other);
  friend void swap(Push& a, Push& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Push* New() const final {
    return CreateMaybeMessage<Push>(nullptr);
  }

  Push* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Push>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Push& from);
  void MergeFrom(const Push& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Push* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Push_Request Request;
  typedef Push_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sub.Push)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class Add_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.Add.Request) */ {
 public:
  Add_Request();
  virtual ~Add_Request();

  Add_Request(const Add_Request& from);

  inline Add_Request& operator=(const Add_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Add_Request(Add_Request&& from) noexcept
    : Add_Request() {
    *this = ::std::move(from);
  }

  inline Add_Request& operator=(Add_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Add_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Add_Request* internal_default_instance() {
    return reinterpret_cast<const Add_Request*>(
               &_Add_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Add_Request* other);
  friend void swap(Add_Request& a, Add_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Add_Request* New() const final {
    return CreateMaybeMessage<Add_Request>(nullptr);
  }

  Add_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Add_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Add_Request& from);
  void MergeFrom(const Add_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Add_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string service = 3;
  void clear_service();
  static const int kServiceFieldNumber = 3;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // int32 area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sub.Add.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::int32 area_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class Add :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.Add) */ {
 public:
  Add();
  virtual ~Add();

  Add(const Add& from);

  inline Add& operator=(const Add& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Add(Add&& from) noexcept
    : Add() {
    *this = ::std::move(from);
  }

  inline Add& operator=(Add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Add* internal_default_instance() {
    return reinterpret_cast<const Add*>(
               &_Add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Add* other);
  friend void swap(Add& a, Add& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Add* New() const final {
    return CreateMaybeMessage<Add>(nullptr);
  }

  Add* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Add>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Add& from);
  void MergeFrom(const Add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Add* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Add_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sub.Add)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class Del_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.Del.Request) */ {
 public:
  Del_Request();
  virtual ~Del_Request();

  Del_Request(const Del_Request& from);

  inline Del_Request& operator=(const Del_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Del_Request(Del_Request&& from) noexcept
    : Del_Request() {
    *this = ::std::move(from);
  }

  inline Del_Request& operator=(Del_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Del_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Del_Request* internal_default_instance() {
    return reinterpret_cast<const Del_Request*>(
               &_Del_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Del_Request* other);
  friend void swap(Del_Request& a, Del_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Del_Request* New() const final {
    return CreateMaybeMessage<Del_Request>(nullptr);
  }

  Del_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Del_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Del_Request& from);
  void MergeFrom(const Del_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Del_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string service = 2;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // @@protoc_insertion_point(class_scope:sub.Del.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class Del :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.Del) */ {
 public:
  Del();
  virtual ~Del();

  Del(const Del& from);

  inline Del& operator=(const Del& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Del(Del&& from) noexcept
    : Del() {
    *this = ::std::move(from);
  }

  inline Del& operator=(Del&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Del& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Del* internal_default_instance() {
    return reinterpret_cast<const Del*>(
               &_Del_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Del* other);
  friend void swap(Del& a, Del& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Del* New() const final {
    return CreateMaybeMessage<Del>(nullptr);
  }

  Del* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Del>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Del& from);
  void MergeFrom(const Del& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Del* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Del_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sub.Del)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class AddUser_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.AddUser.Request) */ {
 public:
  AddUser_Request();
  virtual ~AddUser_Request();

  AddUser_Request(const AddUser_Request& from);

  inline AddUser_Request& operator=(const AddUser_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUser_Request(AddUser_Request&& from) noexcept
    : AddUser_Request() {
    *this = ::std::move(from);
  }

  inline AddUser_Request& operator=(AddUser_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddUser_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUser_Request* internal_default_instance() {
    return reinterpret_cast<const AddUser_Request*>(
               &_AddUser_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AddUser_Request* other);
  friend void swap(AddUser_Request& a, AddUser_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUser_Request* New() const final {
    return CreateMaybeMessage<AddUser_Request>(nullptr);
  }

  AddUser_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUser_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUser_Request& from);
  void MergeFrom(const AddUser_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUser_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string service = 3;
  void clear_service();
  static const int kServiceFieldNumber = 3;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sub.AddUser.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class AddUser :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.AddUser) */ {
 public:
  AddUser();
  virtual ~AddUser();

  AddUser(const AddUser& from);

  inline AddUser& operator=(const AddUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUser(AddUser&& from) noexcept
    : AddUser() {
    *this = ::std::move(from);
  }

  inline AddUser& operator=(AddUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUser* internal_default_instance() {
    return reinterpret_cast<const AddUser*>(
               &_AddUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AddUser* other);
  friend void swap(AddUser& a, AddUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUser* New() const final {
    return CreateMaybeMessage<AddUser>(nullptr);
  }

  AddUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUser& from);
  void MergeFrom(const AddUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddUser_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sub.AddUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class DelUser_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.DelUser.Request) */ {
 public:
  DelUser_Request();
  virtual ~DelUser_Request();

  DelUser_Request(const DelUser_Request& from);

  inline DelUser_Request& operator=(const DelUser_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelUser_Request(DelUser_Request&& from) noexcept
    : DelUser_Request() {
    *this = ::std::move(from);
  }

  inline DelUser_Request& operator=(DelUser_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DelUser_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelUser_Request* internal_default_instance() {
    return reinterpret_cast<const DelUser_Request*>(
               &_DelUser_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DelUser_Request* other);
  friend void swap(DelUser_Request& a, DelUser_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelUser_Request* New() const final {
    return CreateMaybeMessage<DelUser_Request>(nullptr);
  }

  DelUser_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelUser_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelUser_Request& from);
  void MergeFrom(const DelUser_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelUser_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 3;
  void clear_service();
  static const int kServiceFieldNumber = 3;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sub.DelUser.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// -------------------------------------------------------------------

class DelUser :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sub.DelUser) */ {
 public:
  DelUser();
  virtual ~DelUser();

  DelUser(const DelUser& from);

  inline DelUser& operator=(const DelUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelUser(DelUser&& from) noexcept
    : DelUser() {
    *this = ::std::move(from);
  }

  inline DelUser& operator=(DelUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DelUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelUser* internal_default_instance() {
    return reinterpret_cast<const DelUser*>(
               &_DelUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DelUser* other);
  friend void swap(DelUser& a, DelUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelUser* New() const final {
    return CreateMaybeMessage<DelUser>(nullptr);
  }

  DelUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelUser& from);
  void MergeFrom(const DelUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DelUser_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sub.DelUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceInfo

// string address = 1;
inline void ServiceInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceInfo::address() const {
  // @@protoc_insertion_point(field_get:sub.ServiceInfo.address)
  return address_.GetNoArena();
}
inline void ServiceInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.ServiceInfo.address)
}
#if LANG_CXX11
inline void ServiceInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.ServiceInfo.address)
}
#endif
inline void ServiceInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.ServiceInfo.address)
}
inline void ServiceInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.ServiceInfo.address)
}
inline ::std::string* ServiceInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:sub.ServiceInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceInfo::release_address() {
  // @@protoc_insertion_point(field_release:sub.ServiceInfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:sub.ServiceInfo.address)
}

// repeated string service = 2;
inline int ServiceInfo::service_size() const {
  return service_.size();
}
inline void ServiceInfo::clear_service() {
  service_.Clear();
}
inline const ::std::string& ServiceInfo::service(int index) const {
  // @@protoc_insertion_point(field_get:sub.ServiceInfo.service)
  return service_.Get(index);
}
inline ::std::string* ServiceInfo::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:sub.ServiceInfo.service)
  return service_.Mutable(index);
}
inline void ServiceInfo::set_service(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sub.ServiceInfo.service)
  service_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceInfo::set_service(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sub.ServiceInfo.service)
  service_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceInfo::set_service(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sub.ServiceInfo.service)
}
inline void ServiceInfo::set_service(int index, const char* value, size_t size) {
  service_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sub.ServiceInfo.service)
}
inline ::std::string* ServiceInfo::add_service() {
  // @@protoc_insertion_point(field_add_mutable:sub.ServiceInfo.service)
  return service_.Add();
}
inline void ServiceInfo::add_service(const ::std::string& value) {
  service_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sub.ServiceInfo.service)
}
#if LANG_CXX11
inline void ServiceInfo::add_service(::std::string&& value) {
  service_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sub.ServiceInfo.service)
}
#endif
inline void ServiceInfo::add_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sub.ServiceInfo.service)
}
inline void ServiceInfo::add_service(const char* value, size_t size) {
  service_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sub.ServiceInfo.service)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServiceInfo::service() const {
  // @@protoc_insertion_point(field_list:sub.ServiceInfo.service)
  return service_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServiceInfo::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:sub.ServiceInfo.service)
  return &service_;
}

// -------------------------------------------------------------------

// Push_Request

// int32 area_id = 1;
inline void Push_Request::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 Push_Request::area_id() const {
  // @@protoc_insertion_point(field_get:sub.Push.Request.area_id)
  return area_id_;
}
inline void Push_Request::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:sub.Push.Request.area_id)
}

// .sub.ServiceInfo rpc = 2;
inline bool Push_Request::has_rpc() const {
  return this != internal_default_instance() && rpc_ != nullptr;
}
inline void Push_Request::clear_rpc() {
  if (GetArenaNoVirtual() == nullptr && rpc_ != nullptr) {
    delete rpc_;
  }
  rpc_ = nullptr;
}
inline const ::sub::ServiceInfo& Push_Request::rpc() const {
  const ::sub::ServiceInfo* p = rpc_;
  // @@protoc_insertion_point(field_get:sub.Push.Request.rpc)
  return p != nullptr ? *p : *reinterpret_cast<const ::sub::ServiceInfo*>(
      &::sub::_ServiceInfo_default_instance_);
}
inline ::sub::ServiceInfo* Push_Request::release_rpc() {
  // @@protoc_insertion_point(field_release:sub.Push.Request.rpc)
  
  ::sub::ServiceInfo* temp = rpc_;
  rpc_ = nullptr;
  return temp;
}
inline ::sub::ServiceInfo* Push_Request::mutable_rpc() {
  
  if (rpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::sub::ServiceInfo>(GetArenaNoVirtual());
    rpc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sub.Push.Request.rpc)
  return rpc_;
}
inline void Push_Request::set_allocated_rpc(::sub::ServiceInfo* rpc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rpc_;
  }
  if (rpc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rpc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpc, submessage_arena);
    }
    
  } else {
    
  }
  rpc_ = rpc;
  // @@protoc_insertion_point(field_set_allocated:sub.Push.Request.rpc)
}

// .sub.ServiceInfo http = 3;
inline bool Push_Request::has_http() const {
  return this != internal_default_instance() && http_ != nullptr;
}
inline void Push_Request::clear_http() {
  if (GetArenaNoVirtual() == nullptr && http_ != nullptr) {
    delete http_;
  }
  http_ = nullptr;
}
inline const ::sub::ServiceInfo& Push_Request::http() const {
  const ::sub::ServiceInfo* p = http_;
  // @@protoc_insertion_point(field_get:sub.Push.Request.http)
  return p != nullptr ? *p : *reinterpret_cast<const ::sub::ServiceInfo*>(
      &::sub::_ServiceInfo_default_instance_);
}
inline ::sub::ServiceInfo* Push_Request::release_http() {
  // @@protoc_insertion_point(field_release:sub.Push.Request.http)
  
  ::sub::ServiceInfo* temp = http_;
  http_ = nullptr;
  return temp;
}
inline ::sub::ServiceInfo* Push_Request::mutable_http() {
  
  if (http_ == nullptr) {
    auto* p = CreateMaybeMessage<::sub::ServiceInfo>(GetArenaNoVirtual());
    http_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sub.Push.Request.http)
  return http_;
}
inline void Push_Request::set_allocated_http(::sub::ServiceInfo* http) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete http_;
  }
  if (http) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      http = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http, submessage_arena);
    }
    
  } else {
    
  }
  http_ = http;
  // @@protoc_insertion_point(field_set_allocated:sub.Push.Request.http)
}

// -------------------------------------------------------------------

// Push_Response

// .sub.ServiceInfo rpc = 1;
inline bool Push_Response::has_rpc() const {
  return this != internal_default_instance() && rpc_ != nullptr;
}
inline void Push_Response::clear_rpc() {
  if (GetArenaNoVirtual() == nullptr && rpc_ != nullptr) {
    delete rpc_;
  }
  rpc_ = nullptr;
}
inline const ::sub::ServiceInfo& Push_Response::rpc() const {
  const ::sub::ServiceInfo* p = rpc_;
  // @@protoc_insertion_point(field_get:sub.Push.Writer.rpc)
  return p != nullptr ? *p : *reinterpret_cast<const ::sub::ServiceInfo*>(
      &::sub::_ServiceInfo_default_instance_);
}
inline ::sub::ServiceInfo* Push_Response::release_rpc() {
  // @@protoc_insertion_point(field_release:sub.Push.Writer.rpc)
  
  ::sub::ServiceInfo* temp = rpc_;
  rpc_ = nullptr;
  return temp;
}
inline ::sub::ServiceInfo* Push_Response::mutable_rpc() {
  
  if (rpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::sub::ServiceInfo>(GetArenaNoVirtual());
    rpc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sub.Push.Writer.rpc)
  return rpc_;
}
inline void Push_Response::set_allocated_rpc(::sub::ServiceInfo* rpc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rpc_;
  }
  if (rpc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rpc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpc, submessage_arena);
    }
    
  } else {
    
  }
  rpc_ = rpc;
  // @@protoc_insertion_point(field_set_allocated:sub.Push.Writer.rpc)
}

// .sub.ServiceInfo http = 2;
inline bool Push_Response::has_http() const {
  return this != internal_default_instance() && http_ != nullptr;
}
inline void Push_Response::clear_http() {
  if (GetArenaNoVirtual() == nullptr && http_ != nullptr) {
    delete http_;
  }
  http_ = nullptr;
}
inline const ::sub::ServiceInfo& Push_Response::http() const {
  const ::sub::ServiceInfo* p = http_;
  // @@protoc_insertion_point(field_get:sub.Push.Writer.http)
  return p != nullptr ? *p : *reinterpret_cast<const ::sub::ServiceInfo*>(
      &::sub::_ServiceInfo_default_instance_);
}
inline ::sub::ServiceInfo* Push_Response::release_http() {
  // @@protoc_insertion_point(field_release:sub.Push.Writer.http)
  
  ::sub::ServiceInfo* temp = http_;
  http_ = nullptr;
  return temp;
}
inline ::sub::ServiceInfo* Push_Response::mutable_http() {
  
  if (http_ == nullptr) {
    auto* p = CreateMaybeMessage<::sub::ServiceInfo>(GetArenaNoVirtual());
    http_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sub.Push.Writer.http)
  return http_;
}
inline void Push_Response::set_allocated_http(::sub::ServiceInfo* http) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete http_;
  }
  if (http) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      http = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http, submessage_arena);
    }
    
  } else {
    
  }
  http_ = http;
  // @@protoc_insertion_point(field_set_allocated:sub.Push.Writer.http)
}

// -------------------------------------------------------------------

// Push

// -------------------------------------------------------------------

// Add_Request

// int32 area_id = 1;
inline void Add_Request::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 Add_Request::area_id() const {
  // @@protoc_insertion_point(field_get:sub.Add.Request.area_id)
  return area_id_;
}
inline void Add_Request::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:sub.Add.Request.area_id)
}

// string address = 2;
inline void Add_Request::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Add_Request::address() const {
  // @@protoc_insertion_point(field_get:sub.Add.Request.address)
  return address_.GetNoArena();
}
inline void Add_Request::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.Add.Request.address)
}
#if LANG_CXX11
inline void Add_Request::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.Add.Request.address)
}
#endif
inline void Add_Request::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.Add.Request.address)
}
inline void Add_Request::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.Add.Request.address)
}
inline ::std::string* Add_Request::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:sub.Add.Request.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Add_Request::release_address() {
  // @@protoc_insertion_point(field_release:sub.Add.Request.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Add_Request::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:sub.Add.Request.address)
}

// string service = 3;
inline void Add_Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Add_Request::service() const {
  // @@protoc_insertion_point(field_get:sub.Add.Request.service)
  return service_.GetNoArena();
}
inline void Add_Request::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.Add.Request.service)
}
#if LANG_CXX11
inline void Add_Request::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.Add.Request.service)
}
#endif
inline void Add_Request::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.Add.Request.service)
}
inline void Add_Request::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.Add.Request.service)
}
inline ::std::string* Add_Request::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:sub.Add.Request.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Add_Request::release_service() {
  // @@protoc_insertion_point(field_release:sub.Add.Request.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Add_Request::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:sub.Add.Request.service)
}

// -------------------------------------------------------------------

// Add

// -------------------------------------------------------------------

// Del_Request

// string address = 1;
inline void Del_Request::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Del_Request::address() const {
  // @@protoc_insertion_point(field_get:sub.Del.Request.address)
  return address_.GetNoArena();
}
inline void Del_Request::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.Del.Request.address)
}
#if LANG_CXX11
inline void Del_Request::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.Del.Request.address)
}
#endif
inline void Del_Request::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.Del.Request.address)
}
inline void Del_Request::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.Del.Request.address)
}
inline ::std::string* Del_Request::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:sub.Del.Request.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Del_Request::release_address() {
  // @@protoc_insertion_point(field_release:sub.Del.Request.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Del_Request::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:sub.Del.Request.address)
}

// string service = 2;
inline void Del_Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Del_Request::service() const {
  // @@protoc_insertion_point(field_get:sub.Del.Request.service)
  return service_.GetNoArena();
}
inline void Del_Request::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.Del.Request.service)
}
#if LANG_CXX11
inline void Del_Request::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.Del.Request.service)
}
#endif
inline void Del_Request::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.Del.Request.service)
}
inline void Del_Request::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.Del.Request.service)
}
inline ::std::string* Del_Request::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:sub.Del.Request.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Del_Request::release_service() {
  // @@protoc_insertion_point(field_release:sub.Del.Request.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Del_Request::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:sub.Del.Request.service)
}

// -------------------------------------------------------------------

// Del

// -------------------------------------------------------------------

// AddUser_Request

// int64 user_id = 1;
inline void AddUser_Request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddUser_Request::user_id() const {
  // @@protoc_insertion_point(field_get:sub.AddUser.Request.user_id)
  return user_id_;
}
inline void AddUser_Request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:sub.AddUser.Request.user_id)
}

// string address = 2;
inline void AddUser_Request::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUser_Request::address() const {
  // @@protoc_insertion_point(field_get:sub.AddUser.Request.address)
  return address_.GetNoArena();
}
inline void AddUser_Request::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.AddUser.Request.address)
}
#if LANG_CXX11
inline void AddUser_Request::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.AddUser.Request.address)
}
#endif
inline void AddUser_Request::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.AddUser.Request.address)
}
inline void AddUser_Request::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.AddUser.Request.address)
}
inline ::std::string* AddUser_Request::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:sub.AddUser.Request.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUser_Request::release_address() {
  // @@protoc_insertion_point(field_release:sub.AddUser.Request.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUser_Request::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:sub.AddUser.Request.address)
}

// string service = 3;
inline void AddUser_Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUser_Request::service() const {
  // @@protoc_insertion_point(field_get:sub.AddUser.Request.service)
  return service_.GetNoArena();
}
inline void AddUser_Request::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.AddUser.Request.service)
}
#if LANG_CXX11
inline void AddUser_Request::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.AddUser.Request.service)
}
#endif
inline void AddUser_Request::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.AddUser.Request.service)
}
inline void AddUser_Request::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.AddUser.Request.service)
}
inline ::std::string* AddUser_Request::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:sub.AddUser.Request.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUser_Request::release_service() {
  // @@protoc_insertion_point(field_release:sub.AddUser.Request.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUser_Request::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:sub.AddUser.Request.service)
}

// -------------------------------------------------------------------

// AddUser

// -------------------------------------------------------------------

// DelUser_Request

// int64 user_id = 1;
inline void DelUser_Request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 DelUser_Request::user_id() const {
  // @@protoc_insertion_point(field_get:sub.DelUser.Request.user_id)
  return user_id_;
}
inline void DelUser_Request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:sub.DelUser.Request.user_id)
}

// string service = 3;
inline void DelUser_Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DelUser_Request::service() const {
  // @@protoc_insertion_point(field_get:sub.DelUser.Request.service)
  return service_.GetNoArena();
}
inline void DelUser_Request::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sub.DelUser.Request.service)
}
#if LANG_CXX11
inline void DelUser_Request::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sub.DelUser.Request.service)
}
#endif
inline void DelUser_Request::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sub.DelUser.Request.service)
}
inline void DelUser_Request::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sub.DelUser.Request.service)
}
inline ::std::string* DelUser_Request::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:sub.DelUser.Request.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelUser_Request::release_service() {
  // @@protoc_insertion_point(field_release:sub.DelUser.Request.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelUser_Request::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:sub.DelUser.Request.service)
}

// -------------------------------------------------------------------

// DelUser

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sub

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_sub_2eproto
