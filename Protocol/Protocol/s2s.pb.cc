// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#include "s2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_s2s_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo_s2s_2eproto;
namespace s2s {
class NodeRegister_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeRegister_Request> _instance;
} _NodeRegister_Request_default_instance_;
class NodeRegister_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeRegister_Response> _instance;
} _NodeRegister_Response_default_instance_;
class NodeRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeRegister> _instance;
} _NodeRegister_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class NodeQuery_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeQuery_Request> _instance;
} _NodeQuery_Request_default_instance_;
class NodeQuery_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeQuery_Response> _instance;
} _NodeQuery_Response_default_instance_;
class NodeQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeQuery> _instance;
} _NodeQuery_default_instance_;
class MysqlQuery_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlQuery_Request> _instance;
} _MysqlQuery_Request_default_instance_;
class MysqlQuery_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlQuery_Response> _instance;
} _MysqlQuery_Response_default_instance_;
class MysqlQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlQuery> _instance;
} _MysqlQuery_default_instance_;
class MysqlOper_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlOper_Request> _instance;
} _MysqlOper_Request_default_instance_;
class MysqlOper_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlOper_Response> _instance;
} _MysqlOper_Response_default_instance_;
class MysqlOperDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlOper> _instance;
} _MysqlOper_default_instance_;
}  // namespace s2s
static void InitDefaultsNodeRegister_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_NodeRegister_Request_default_instance_;
    new (ptr) ::s2s::NodeRegister_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::NodeRegister_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeRegister_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeRegister_Request_s2s_2eproto}, {}};

static void InitDefaultsNodeRegister_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_NodeRegister_Response_default_instance_;
    new (ptr) ::s2s::NodeRegister_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::NodeRegister_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeRegister_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeRegister_Response_s2s_2eproto}, {}};

static void InitDefaultsNodeRegister_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_NodeRegister_default_instance_;
    new (ptr) ::s2s::NodeRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::NodeRegister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeRegister_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeRegister_s2s_2eproto}, {}};

static void InitDefaultsNodeInfo_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_NodeInfo_default_instance_;
    new (ptr) ::s2s::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::NodeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeInfo_s2s_2eproto}, {}};

static void InitDefaultsNodeQuery_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_NodeQuery_Request_default_instance_;
    new (ptr) ::s2s::NodeQuery_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::NodeQuery_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeQuery_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeQuery_Request_s2s_2eproto}, {}};

static void InitDefaultsNodeQuery_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_NodeQuery_Response_default_instance_;
    new (ptr) ::s2s::NodeQuery_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::NodeQuery_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeQuery_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeQuery_Response_s2s_2eproto}, {
      &scc_info_NodeInfo_s2s_2eproto.base,}};

static void InitDefaultsNodeQuery_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_NodeQuery_default_instance_;
    new (ptr) ::s2s::NodeQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::NodeQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeQuery_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeQuery_s2s_2eproto}, {}};

static void InitDefaultsMysqlQuery_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_MysqlQuery_Request_default_instance_;
    new (ptr) ::s2s::MysqlQuery_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::MysqlQuery_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MysqlQuery_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysqlQuery_Request_s2s_2eproto}, {}};

static void InitDefaultsMysqlQuery_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_MysqlQuery_Response_default_instance_;
    new (ptr) ::s2s::MysqlQuery_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::MysqlQuery_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MysqlQuery_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysqlQuery_Response_s2s_2eproto}, {}};

static void InitDefaultsMysqlQuery_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_MysqlQuery_default_instance_;
    new (ptr) ::s2s::MysqlQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::MysqlQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MysqlQuery_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysqlQuery_s2s_2eproto}, {}};

static void InitDefaultsMysqlOper_Request_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_MysqlOper_Request_default_instance_;
    new (ptr) ::s2s::MysqlOper_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::MysqlOper_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MysqlOper_Request_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysqlOper_Request_s2s_2eproto}, {}};

static void InitDefaultsMysqlOper_Response_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_MysqlOper_Response_default_instance_;
    new (ptr) ::s2s::MysqlOper_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::MysqlOper_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MysqlOper_Response_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysqlOper_Response_s2s_2eproto}, {}};

static void InitDefaultsMysqlOper_s2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_MysqlOper_default_instance_;
    new (ptr) ::s2s::MysqlOper();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::MysqlOper::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MysqlOper_s2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMysqlOper_s2s_2eproto}, {}};

void InitDefaults_s2s_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_NodeRegister_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeRegister_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeRegister_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeInfo_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeQuery_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeQuery_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeQuery_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MysqlQuery_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MysqlQuery_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MysqlQuery_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MysqlOper_Request_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MysqlOper_Response_s2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MysqlOper_s2s_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_s2s_2eproto[13];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_s2s_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_s2s_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_s2s_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Request, areaid_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Request, nodeid_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Request, address_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Request, servername_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Request, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister_Response, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeInfo, address_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeInfo, servername_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeInfo, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeQuery_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeQuery_Request, areaid_),
  PROTOBUF_FIELD_OFFSET(::s2s::NodeQuery_Request, service_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeQuery_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeQuery_Response, nodeinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::NodeQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlQuery_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlQuery_Request, protocolname_),
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlQuery_Request, protocolmessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlQuery_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlQuery_Response, errotstr_),
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlQuery_Response, querydatas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlOper_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlOper_Request, protocolname_),
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlOper_Request, protocolmessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlOper_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlOper_Response, errorstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::MysqlOper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::s2s::NodeRegister_Request)},
  { 10, -1, sizeof(::s2s::NodeRegister_Response)},
  { 16, -1, sizeof(::s2s::NodeRegister)},
  { 21, -1, sizeof(::s2s::NodeInfo)},
  { 30, -1, sizeof(::s2s::NodeQuery_Request)},
  { 37, -1, sizeof(::s2s::NodeQuery_Response)},
  { 43, -1, sizeof(::s2s::NodeQuery)},
  { 48, -1, sizeof(::s2s::MysqlQuery_Request)},
  { 55, -1, sizeof(::s2s::MysqlQuery_Response)},
  { 62, -1, sizeof(::s2s::MysqlQuery)},
  { 67, -1, sizeof(::s2s::MysqlOper_Request)},
  { 74, -1, sizeof(::s2s::MysqlOper_Response)},
  { 80, -1, sizeof(::s2s::MysqlOper)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_NodeRegister_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_NodeRegister_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_NodeRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_NodeQuery_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_NodeQuery_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_NodeQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_MysqlQuery_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_MysqlQuery_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_MysqlQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_MysqlOper_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_MysqlOper_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_MysqlOper_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_s2s_2eproto = {
  {}, AddDescriptors_s2s_2eproto, "s2s.proto", schemas,
  file_default_instances, TableStruct_s2s_2eproto::offsets,
  file_level_metadata_s2s_2eproto, 13, file_level_enum_descriptors_s2s_2eproto, file_level_service_descriptors_s2s_2eproto,
};

const char descriptor_table_protodef_s2s_2eproto[] =
  "\n\ts2s.proto\022\003s2s\"\211\001\n\014NodeRegister\032`\n\007Req"
  "uest\022\016\n\006AreaId\030\001 \001(\005\022\016\n\006NodeId\030\002 \001(\005\022\017\n\007"
  "Address\030\003 \001(\t\022\022\n\nServerName\030\004 \001(\t\022\020\n\010Ser"
  "vices\030\005 \003(\t\032\027\n\010Response\022\013\n\003Uid\030\001 \001(\005\"N\n\010"
  "NodeInfo\022\013\n\003Uid\030\001 \001(\005\022\017\n\007Address\030\002 \001(\t\022\022"
  "\n\nServerName\030\003 \001(\t\022\020\n\010Services\030\004 \003(\t\"e\n\t"
  "NodeQuery\032*\n\007Request\022\016\n\006AreaId\030\001 \001(\005\022\017\n\007"
  "Service\030\002 \001(\t\032,\n\010Response\022 \n\tNodeInfos\030\001"
  " \003(\0132\r.s2s.NodeInfo\"x\n\nMysqlQuery\0328\n\007Req"
  "uest\022\024\n\014ProtocolName\030\001 \001(\t\022\027\n\017ProtocolMe"
  "ssage\030\002 \001(\014\0320\n\010Response\022\020\n\010ErrotStr\030\001 \001("
  "\t\022\022\n\nQueryDatas\030\002 \003(\014\"c\n\tMysqlOper\0328\n\007Re"
  "quest\022\024\n\014ProtocolName\030\001 \001(\t\022\027\n\017ProtocolM"
  "essage\030\002 \001(\014\032\034\n\010Response\022\020\n\010ErrorStr\030\001 \001"
  "(\tb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_s2s_2eproto = {
  false, InitDefaults_s2s_2eproto, 
  descriptor_table_protodef_s2s_2eproto,
  "s2s.proto", &assign_descriptors_table_s2s_2eproto, 570,
};

void AddDescriptors_s2s_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_s2s_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_s2s_2eproto = []() { AddDescriptors_s2s_2eproto(); return true; }();
namespace s2s {

// ===================================================================

void NodeRegister_Request::InitAsDefaultInstance() {
}
class NodeRegister_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRegister_Request::kAreaIdFieldNumber;
const int NodeRegister_Request::kNodeIdFieldNumber;
const int NodeRegister_Request::kAddressFieldNumber;
const int NodeRegister_Request::kServerNameFieldNumber;
const int NodeRegister_Request::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRegister_Request::NodeRegister_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.NodeRegister.Request)
}
NodeRegister_Request::NodeRegister_Request(const NodeRegister_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nodeid_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(nodeid_));
  // @@protoc_insertion_point(copy_constructor:s2s.NodeRegister.Request)
}

void NodeRegister_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeRegister_Request_s2s_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeid_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(nodeid_));
}

NodeRegister_Request::~NodeRegister_Request() {
  // @@protoc_insertion_point(destructor:s2s.NodeRegister.Request)
  SharedDtor();
}

void NodeRegister_Request::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeRegister_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRegister_Request& NodeRegister_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeRegister_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void NodeRegister_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.NodeRegister.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeid_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(nodeid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeRegister_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeRegister_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 AreaId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_areaid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 NodeId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nodeid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Address = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.NodeRegister.Request.Address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ServerName = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.NodeRegister.Request.ServerName");
        object = msg->mutable_servername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string Services = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.NodeRegister.Request.Services");
          object = msg->add_services();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeRegister_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.NodeRegister.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 AreaId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 NodeId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.NodeRegister.Request.Address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.NodeRegister.Request.ServerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string Services = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_services()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->services(this->services_size() - 1).data(),
            static_cast<int>(this->services(this->services_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.NodeRegister.Request.Services"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.NodeRegister.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.NodeRegister.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeRegister_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.NodeRegister.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AreaId = 1;
  if (this->areaid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // int32 NodeId = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nodeid(), output);
  }

  // string Address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeRegister.Request.Address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  // string ServerName = 4;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeRegister.Request.ServerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->servername(), output);
  }

  // repeated string Services = 5;
  for (int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services(i).data(), static_cast<int>(this->services(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeRegister.Request.Services");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->services(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.NodeRegister.Request)
}

::google::protobuf::uint8* NodeRegister_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.NodeRegister.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AreaId = 1;
  if (this->areaid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // int32 NodeId = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nodeid(), target);
  }

  // string Address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeRegister.Request.Address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // string ServerName = 4;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeRegister.Request.ServerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  // repeated string Services = 5;
  for (int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services(i).data(), static_cast<int>(this->services(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeRegister.Request.Services");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->services(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.NodeRegister.Request)
  return target;
}

size_t NodeRegister_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.NodeRegister.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Services = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->services_size());
  for (int i = 0, n = this->services_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->services(i));
  }

  // string Address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string ServerName = 4;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // int32 AreaId = 1;
  if (this->areaid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());
  }

  // int32 NodeId = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegister_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.NodeRegister.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegister_Request* source =
      ::google::protobuf::DynamicCastToGenerated<NodeRegister_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.NodeRegister.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.NodeRegister.Request)
    MergeFrom(*source);
  }
}

void NodeRegister_Request::MergeFrom(const NodeRegister_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.NodeRegister.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.areaid() != 0) {
    set_areaid(from.areaid());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
}

void NodeRegister_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.NodeRegister.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegister_Request::CopyFrom(const NodeRegister_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.NodeRegister.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegister_Request::IsInitialized() const {
  return true;
}

void NodeRegister_Request::Swap(NodeRegister_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRegister_Request::InternalSwap(NodeRegister_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  services_.InternalSwap(CastToBase(&other->services_));
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(areaid_, other->areaid_);
  swap(nodeid_, other->nodeid_);
}

::google::protobuf::Metadata NodeRegister_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeRegister_Response::InitAsDefaultInstance() {
}
class NodeRegister_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRegister_Response::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRegister_Response::NodeRegister_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.NodeRegister.Response)
}
NodeRegister_Response::NodeRegister_Response(const NodeRegister_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:s2s.NodeRegister.Response)
}

void NodeRegister_Response::SharedCtor() {
  uid_ = 0;
}

NodeRegister_Response::~NodeRegister_Response() {
  // @@protoc_insertion_point(destructor:s2s.NodeRegister.Response)
  SharedDtor();
}

void NodeRegister_Response::SharedDtor() {
}

void NodeRegister_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRegister_Response& NodeRegister_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeRegister_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void NodeRegister_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.NodeRegister.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeRegister_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeRegister_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_uid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeRegister_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.NodeRegister.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.NodeRegister.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.NodeRegister.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeRegister_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.NodeRegister.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.NodeRegister.Response)
}

::google::protobuf::uint8* NodeRegister_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.NodeRegister.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.NodeRegister.Response)
  return target;
}

size_t NodeRegister_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.NodeRegister.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegister_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.NodeRegister.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegister_Response* source =
      ::google::protobuf::DynamicCastToGenerated<NodeRegister_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.NodeRegister.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.NodeRegister.Response)
    MergeFrom(*source);
  }
}

void NodeRegister_Response::MergeFrom(const NodeRegister_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.NodeRegister.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void NodeRegister_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.NodeRegister.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegister_Response::CopyFrom(const NodeRegister_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.NodeRegister.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegister_Response::IsInitialized() const {
  return true;
}

void NodeRegister_Response::Swap(NodeRegister_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRegister_Response::InternalSwap(NodeRegister_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::google::protobuf::Metadata NodeRegister_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeRegister::InitAsDefaultInstance() {
}
class NodeRegister::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRegister::NodeRegister()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.NodeRegister)
}
NodeRegister::NodeRegister(const NodeRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.NodeRegister)
}

void NodeRegister::SharedCtor() {
}

NodeRegister::~NodeRegister() {
  // @@protoc_insertion_point(destructor:s2s.NodeRegister)
  SharedDtor();
}

void NodeRegister::SharedDtor() {
}

void NodeRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRegister& NodeRegister::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeRegister_s2s_2eproto.base);
  return *internal_default_instance();
}


void NodeRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.NodeRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeRegister::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeRegister*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.NodeRegister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.NodeRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.NodeRegister)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.NodeRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.NodeRegister)
}

::google::protobuf::uint8* NodeRegister::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.NodeRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.NodeRegister)
  return target;
}

size_t NodeRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.NodeRegister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.NodeRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegister* source =
      ::google::protobuf::DynamicCastToGenerated<NodeRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.NodeRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.NodeRegister)
    MergeFrom(*source);
  }
}

void NodeRegister::MergeFrom(const NodeRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.NodeRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.NodeRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegister::CopyFrom(const NodeRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.NodeRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegister::IsInitialized() const {
  return true;
}

void NodeRegister::Swap(NodeRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRegister::InternalSwap(NodeRegister* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeRegister::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
class NodeInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kUidFieldNumber;
const int NodeInfo::kAddressFieldNumber;
const int NodeInfo::kServerNameFieldNumber;
const int NodeInfo::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:s2s.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeInfo_s2s_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:s2s.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeInfo_s2s_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_uid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.NodeInfo.Address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ServerName = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.NodeInfo.ServerName");
        object = msg->mutable_servername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string Services = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.NodeInfo.Services");
          object = msg->add_services();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.NodeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.NodeInfo.Address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.NodeInfo.ServerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string Services = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_services()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->services(this->services_size() - 1).data(),
            static_cast<int>(this->services(this->services_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.NodeInfo.Services"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.NodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // string Address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeInfo.Address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // string ServerName = 3;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeInfo.ServerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->servername(), output);
  }

  // repeated string Services = 4;
  for (int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services(i).data(), static_cast<int>(this->services(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeInfo.Services");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->services(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // string Address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeInfo.Address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // string ServerName = 3;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeInfo.ServerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servername(), target);
  }

  // repeated string Services = 4;
  for (int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services(i).data(), static_cast<int>(this->services(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeInfo.Services");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->services(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Services = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->services_size());
  for (int i = 0, n = this->services_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->services(i));
  }

  // string Address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string ServerName = 3;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // int32 Uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  services_.InternalSwap(CastToBase(&other->services_));
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeQuery_Request::InitAsDefaultInstance() {
}
class NodeQuery_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeQuery_Request::kAreaIdFieldNumber;
const int NodeQuery_Request::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeQuery_Request::NodeQuery_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.NodeQuery.Request)
}
NodeQuery_Request::NodeQuery_Request(const NodeQuery_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  areaid_ = from.areaid_;
  // @@protoc_insertion_point(copy_constructor:s2s.NodeQuery.Request)
}

void NodeQuery_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeQuery_Request_s2s_2eproto.base);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  areaid_ = 0;
}

NodeQuery_Request::~NodeQuery_Request() {
  // @@protoc_insertion_point(destructor:s2s.NodeQuery.Request)
  SharedDtor();
}

void NodeQuery_Request::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeQuery_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeQuery_Request& NodeQuery_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeQuery_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void NodeQuery_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.NodeQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  areaid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeQuery_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeQuery_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 AreaId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_areaid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string Service = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.NodeQuery.Request.Service");
        object = msg->mutable_service();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeQuery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.NodeQuery.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 AreaId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), static_cast<int>(this->service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.NodeQuery.Request.Service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.NodeQuery.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.NodeQuery.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeQuery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.NodeQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AreaId = 1;
  if (this->areaid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // string Service = 2;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeQuery.Request.Service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.NodeQuery.Request)
}

::google::protobuf::uint8* NodeQuery_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.NodeQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AreaId = 1;
  if (this->areaid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // string Service = 2;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.NodeQuery.Request.Service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.NodeQuery.Request)
  return target;
}

size_t NodeQuery_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.NodeQuery.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Service = 2;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // int32 AreaId = 1;
  if (this->areaid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeQuery_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.NodeQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeQuery_Request* source =
      ::google::protobuf::DynamicCastToGenerated<NodeQuery_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.NodeQuery.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.NodeQuery.Request)
    MergeFrom(*source);
  }
}

void NodeQuery_Request::MergeFrom(const NodeQuery_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.NodeQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.areaid() != 0) {
    set_areaid(from.areaid());
  }
}

void NodeQuery_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.NodeQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeQuery_Request::CopyFrom(const NodeQuery_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.NodeQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeQuery_Request::IsInitialized() const {
  return true;
}

void NodeQuery_Request::Swap(NodeQuery_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeQuery_Request::InternalSwap(NodeQuery_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(areaid_, other->areaid_);
}

::google::protobuf::Metadata NodeQuery_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeQuery_Response::InitAsDefaultInstance() {
}
class NodeQuery_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeQuery_Response::kNodeInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeQuery_Response::NodeQuery_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.NodeQuery.Response)
}
NodeQuery_Response::NodeQuery_Response(const NodeQuery_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      nodeinfos_(from.nodeinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.NodeQuery.Response)
}

void NodeQuery_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeQuery_Response_s2s_2eproto.base);
}

NodeQuery_Response::~NodeQuery_Response() {
  // @@protoc_insertion_point(destructor:s2s.NodeQuery.Response)
  SharedDtor();
}

void NodeQuery_Response::SharedDtor() {
}

void NodeQuery_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeQuery_Response& NodeQuery_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeQuery_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void NodeQuery_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.NodeQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeinfos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeQuery_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeQuery_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .s2s.NodeInfo NodeInfos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::s2s::NodeInfo::_InternalParse;
          object = msg->add_nodeinfos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeQuery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.NodeQuery.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .s2s.NodeInfo NodeInfos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodeinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.NodeQuery.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.NodeQuery.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeQuery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.NodeQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .s2s.NodeInfo NodeInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeinfos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodeinfos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.NodeQuery.Response)
}

::google::protobuf::uint8* NodeQuery_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.NodeQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .s2s.NodeInfo NodeInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeinfos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodeinfos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.NodeQuery.Response)
  return target;
}

size_t NodeQuery_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.NodeQuery.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .s2s.NodeInfo NodeInfos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodeinfos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodeinfos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeQuery_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.NodeQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeQuery_Response* source =
      ::google::protobuf::DynamicCastToGenerated<NodeQuery_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.NodeQuery.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.NodeQuery.Response)
    MergeFrom(*source);
  }
}

void NodeQuery_Response::MergeFrom(const NodeQuery_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.NodeQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodeinfos_.MergeFrom(from.nodeinfos_);
}

void NodeQuery_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.NodeQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeQuery_Response::CopyFrom(const NodeQuery_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.NodeQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeQuery_Response::IsInitialized() const {
  return true;
}

void NodeQuery_Response::Swap(NodeQuery_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeQuery_Response::InternalSwap(NodeQuery_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&nodeinfos_)->InternalSwap(CastToBase(&other->nodeinfos_));
}

::google::protobuf::Metadata NodeQuery_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeQuery::InitAsDefaultInstance() {
}
class NodeQuery::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeQuery::NodeQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.NodeQuery)
}
NodeQuery::NodeQuery(const NodeQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.NodeQuery)
}

void NodeQuery::SharedCtor() {
}

NodeQuery::~NodeQuery() {
  // @@protoc_insertion_point(destructor:s2s.NodeQuery)
  SharedDtor();
}

void NodeQuery::SharedDtor() {
}

void NodeQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeQuery& NodeQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeQuery_s2s_2eproto.base);
  return *internal_default_instance();
}


void NodeQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.NodeQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.NodeQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.NodeQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.NodeQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.NodeQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.NodeQuery)
}

::google::protobuf::uint8* NodeQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.NodeQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.NodeQuery)
  return target;
}

size_t NodeQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.NodeQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.NodeQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeQuery* source =
      ::google::protobuf::DynamicCastToGenerated<NodeQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.NodeQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.NodeQuery)
    MergeFrom(*source);
  }
}

void NodeQuery::MergeFrom(const NodeQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.NodeQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.NodeQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeQuery::CopyFrom(const NodeQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.NodeQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeQuery::IsInitialized() const {
  return true;
}

void NodeQuery::Swap(NodeQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeQuery::InternalSwap(NodeQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MysqlQuery_Request::InitAsDefaultInstance() {
}
class MysqlQuery_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlQuery_Request::kProtocolNameFieldNumber;
const int MysqlQuery_Request::kProtocolMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlQuery_Request::MysqlQuery_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.MysqlQuery.Request)
}
MysqlQuery_Request::MysqlQuery_Request(const MysqlQuery_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocolname().size() > 0) {
    protocolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  protocolmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocolmessage().size() > 0) {
    protocolmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolmessage_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.MysqlQuery.Request)
}

void MysqlQuery_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MysqlQuery_Request_s2s_2eproto.base);
  protocolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MysqlQuery_Request::~MysqlQuery_Request() {
  // @@protoc_insertion_point(destructor:s2s.MysqlQuery.Request)
  SharedDtor();
}

void MysqlQuery_Request::SharedDtor() {
  protocolname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlQuery_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlQuery_Request& MysqlQuery_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MysqlQuery_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void MysqlQuery_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.MysqlQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MysqlQuery_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MysqlQuery_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ProtocolName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.MysqlQuery.Request.ProtocolName");
        object = msg->mutable_protocolname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes ProtocolMessage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_protocolmessage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MysqlQuery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.MysqlQuery.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ProtocolName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocolname().data(), static_cast<int>(this->protocolname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.MysqlQuery.Request.ProtocolName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ProtocolMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protocolmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.MysqlQuery.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.MysqlQuery.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MysqlQuery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.MysqlQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ProtocolName = 1;
  if (this->protocolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolname().data(), static_cast<int>(this->protocolname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlQuery.Request.ProtocolName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocolname(), output);
  }

  // bytes ProtocolMessage = 2;
  if (this->protocolmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->protocolmessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.MysqlQuery.Request)
}

::google::protobuf::uint8* MysqlQuery_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.MysqlQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ProtocolName = 1;
  if (this->protocolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolname().data(), static_cast<int>(this->protocolname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlQuery.Request.ProtocolName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocolname(), target);
  }

  // bytes ProtocolMessage = 2;
  if (this->protocolmessage().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->protocolmessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.MysqlQuery.Request)
  return target;
}

size_t MysqlQuery_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.MysqlQuery.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProtocolName = 1;
  if (this->protocolname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocolname());
  }

  // bytes ProtocolMessage = 2;
  if (this->protocolmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->protocolmessage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlQuery_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.MysqlQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlQuery_Request* source =
      ::google::protobuf::DynamicCastToGenerated<MysqlQuery_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.MysqlQuery.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.MysqlQuery.Request)
    MergeFrom(*source);
  }
}

void MysqlQuery_Request::MergeFrom(const MysqlQuery_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.MysqlQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocolname().size() > 0) {

    protocolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  if (from.protocolmessage().size() > 0) {

    protocolmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolmessage_);
  }
}

void MysqlQuery_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.MysqlQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlQuery_Request::CopyFrom(const MysqlQuery_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.MysqlQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQuery_Request::IsInitialized() const {
  return true;
}

void MysqlQuery_Request::Swap(MysqlQuery_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlQuery_Request::InternalSwap(MysqlQuery_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  protocolname_.Swap(&other->protocolname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocolmessage_.Swap(&other->protocolmessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MysqlQuery_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MysqlQuery_Response::InitAsDefaultInstance() {
}
class MysqlQuery_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlQuery_Response::kErrotStrFieldNumber;
const int MysqlQuery_Response::kQueryDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlQuery_Response::MysqlQuery_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.MysqlQuery.Response)
}
MysqlQuery_Response::MysqlQuery_Response(const MysqlQuery_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      querydatas_(from.querydatas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errotstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errotstr().size() > 0) {
    errotstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errotstr_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.MysqlQuery.Response)
}

void MysqlQuery_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MysqlQuery_Response_s2s_2eproto.base);
  errotstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MysqlQuery_Response::~MysqlQuery_Response() {
  // @@protoc_insertion_point(destructor:s2s.MysqlQuery.Response)
  SharedDtor();
}

void MysqlQuery_Response::SharedDtor() {
  errotstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlQuery_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlQuery_Response& MysqlQuery_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MysqlQuery_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void MysqlQuery_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.MysqlQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  querydatas_.Clear();
  errotstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MysqlQuery_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MysqlQuery_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ErrotStr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.MysqlQuery.Response.ErrotStr");
        object = msg->mutable_errotstr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bytes QueryDatas = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_querydatas();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MysqlQuery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.MysqlQuery.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ErrotStr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errotstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errotstr().data(), static_cast<int>(this->errotstr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.MysqlQuery.Response.ErrotStr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes QueryDatas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_querydatas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.MysqlQuery.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.MysqlQuery.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MysqlQuery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.MysqlQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ErrotStr = 1;
  if (this->errotstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errotstr().data(), static_cast<int>(this->errotstr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlQuery.Response.ErrotStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->errotstr(), output);
  }

  // repeated bytes QueryDatas = 2;
  for (int i = 0, n = this->querydatas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->querydatas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.MysqlQuery.Response)
}

::google::protobuf::uint8* MysqlQuery_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.MysqlQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ErrotStr = 1;
  if (this->errotstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errotstr().data(), static_cast<int>(this->errotstr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlQuery.Response.ErrotStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errotstr(), target);
  }

  // repeated bytes QueryDatas = 2;
  for (int i = 0, n = this->querydatas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->querydatas(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.MysqlQuery.Response)
  return target;
}

size_t MysqlQuery_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.MysqlQuery.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes QueryDatas = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->querydatas_size());
  for (int i = 0, n = this->querydatas_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->querydatas(i));
  }

  // string ErrotStr = 1;
  if (this->errotstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errotstr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlQuery_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.MysqlQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlQuery_Response* source =
      ::google::protobuf::DynamicCastToGenerated<MysqlQuery_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.MysqlQuery.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.MysqlQuery.Response)
    MergeFrom(*source);
  }
}

void MysqlQuery_Response::MergeFrom(const MysqlQuery_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.MysqlQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  querydatas_.MergeFrom(from.querydatas_);
  if (from.errotstr().size() > 0) {

    errotstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errotstr_);
  }
}

void MysqlQuery_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.MysqlQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlQuery_Response::CopyFrom(const MysqlQuery_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.MysqlQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQuery_Response::IsInitialized() const {
  return true;
}

void MysqlQuery_Response::Swap(MysqlQuery_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlQuery_Response::InternalSwap(MysqlQuery_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  querydatas_.InternalSwap(CastToBase(&other->querydatas_));
  errotstr_.Swap(&other->errotstr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MysqlQuery_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MysqlQuery::InitAsDefaultInstance() {
}
class MysqlQuery::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlQuery::MysqlQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.MysqlQuery)
}
MysqlQuery::MysqlQuery(const MysqlQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.MysqlQuery)
}

void MysqlQuery::SharedCtor() {
}

MysqlQuery::~MysqlQuery() {
  // @@protoc_insertion_point(destructor:s2s.MysqlQuery)
  SharedDtor();
}

void MysqlQuery::SharedDtor() {
}

void MysqlQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlQuery& MysqlQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MysqlQuery_s2s_2eproto.base);
  return *internal_default_instance();
}


void MysqlQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.MysqlQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MysqlQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MysqlQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MysqlQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.MysqlQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.MysqlQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.MysqlQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MysqlQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.MysqlQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.MysqlQuery)
}

::google::protobuf::uint8* MysqlQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.MysqlQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.MysqlQuery)
  return target;
}

size_t MysqlQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.MysqlQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.MysqlQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlQuery* source =
      ::google::protobuf::DynamicCastToGenerated<MysqlQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.MysqlQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.MysqlQuery)
    MergeFrom(*source);
  }
}

void MysqlQuery::MergeFrom(const MysqlQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.MysqlQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MysqlQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.MysqlQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlQuery::CopyFrom(const MysqlQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.MysqlQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQuery::IsInitialized() const {
  return true;
}

void MysqlQuery::Swap(MysqlQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlQuery::InternalSwap(MysqlQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MysqlQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MysqlOper_Request::InitAsDefaultInstance() {
}
class MysqlOper_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlOper_Request::kProtocolNameFieldNumber;
const int MysqlOper_Request::kProtocolMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlOper_Request::MysqlOper_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.MysqlOper.Request)
}
MysqlOper_Request::MysqlOper_Request(const MysqlOper_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocolname().size() > 0) {
    protocolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  protocolmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocolmessage().size() > 0) {
    protocolmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolmessage_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.MysqlOper.Request)
}

void MysqlOper_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MysqlOper_Request_s2s_2eproto.base);
  protocolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MysqlOper_Request::~MysqlOper_Request() {
  // @@protoc_insertion_point(destructor:s2s.MysqlOper.Request)
  SharedDtor();
}

void MysqlOper_Request::SharedDtor() {
  protocolname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlOper_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlOper_Request& MysqlOper_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MysqlOper_Request_s2s_2eproto.base);
  return *internal_default_instance();
}


void MysqlOper_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.MysqlOper.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MysqlOper_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MysqlOper_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ProtocolName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.MysqlOper.Request.ProtocolName");
        object = msg->mutable_protocolname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes ProtocolMessage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_protocolmessage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MysqlOper_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.MysqlOper.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ProtocolName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocolname().data(), static_cast<int>(this->protocolname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.MysqlOper.Request.ProtocolName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ProtocolMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protocolmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.MysqlOper.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.MysqlOper.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MysqlOper_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.MysqlOper.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ProtocolName = 1;
  if (this->protocolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolname().data(), static_cast<int>(this->protocolname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlOper.Request.ProtocolName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocolname(), output);
  }

  // bytes ProtocolMessage = 2;
  if (this->protocolmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->protocolmessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.MysqlOper.Request)
}

::google::protobuf::uint8* MysqlOper_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.MysqlOper.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ProtocolName = 1;
  if (this->protocolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolname().data(), static_cast<int>(this->protocolname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlOper.Request.ProtocolName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocolname(), target);
  }

  // bytes ProtocolMessage = 2;
  if (this->protocolmessage().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->protocolmessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.MysqlOper.Request)
  return target;
}

size_t MysqlOper_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.MysqlOper.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProtocolName = 1;
  if (this->protocolname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocolname());
  }

  // bytes ProtocolMessage = 2;
  if (this->protocolmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->protocolmessage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlOper_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.MysqlOper.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlOper_Request* source =
      ::google::protobuf::DynamicCastToGenerated<MysqlOper_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.MysqlOper.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.MysqlOper.Request)
    MergeFrom(*source);
  }
}

void MysqlOper_Request::MergeFrom(const MysqlOper_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.MysqlOper.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocolname().size() > 0) {

    protocolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  if (from.protocolmessage().size() > 0) {

    protocolmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolmessage_);
  }
}

void MysqlOper_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.MysqlOper.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlOper_Request::CopyFrom(const MysqlOper_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.MysqlOper.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlOper_Request::IsInitialized() const {
  return true;
}

void MysqlOper_Request::Swap(MysqlOper_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlOper_Request::InternalSwap(MysqlOper_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  protocolname_.Swap(&other->protocolname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocolmessage_.Swap(&other->protocolmessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MysqlOper_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MysqlOper_Response::InitAsDefaultInstance() {
}
class MysqlOper_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlOper_Response::kErrorStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlOper_Response::MysqlOper_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.MysqlOper.Response)
}
MysqlOper_Response::MysqlOper_Response(const MysqlOper_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errorstr().size() > 0) {
    errorstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorstr_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.MysqlOper.Response)
}

void MysqlOper_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MysqlOper_Response_s2s_2eproto.base);
  errorstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MysqlOper_Response::~MysqlOper_Response() {
  // @@protoc_insertion_point(destructor:s2s.MysqlOper.Response)
  SharedDtor();
}

void MysqlOper_Response::SharedDtor() {
  errorstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlOper_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlOper_Response& MysqlOper_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MysqlOper_Response_s2s_2eproto.base);
  return *internal_default_instance();
}


void MysqlOper_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.MysqlOper.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MysqlOper_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MysqlOper_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ErrorStr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.MysqlOper.Response.ErrorStr");
        object = msg->mutable_errorstr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MysqlOper_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.MysqlOper.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ErrorStr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errorstr().data(), static_cast<int>(this->errorstr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.MysqlOper.Response.ErrorStr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.MysqlOper.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.MysqlOper.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MysqlOper_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.MysqlOper.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ErrorStr = 1;
  if (this->errorstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errorstr().data(), static_cast<int>(this->errorstr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlOper.Response.ErrorStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->errorstr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.MysqlOper.Response)
}

::google::protobuf::uint8* MysqlOper_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.MysqlOper.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ErrorStr = 1;
  if (this->errorstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errorstr().data(), static_cast<int>(this->errorstr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.MysqlOper.Response.ErrorStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errorstr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.MysqlOper.Response)
  return target;
}

size_t MysqlOper_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.MysqlOper.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ErrorStr = 1;
  if (this->errorstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errorstr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlOper_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.MysqlOper.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlOper_Response* source =
      ::google::protobuf::DynamicCastToGenerated<MysqlOper_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.MysqlOper.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.MysqlOper.Response)
    MergeFrom(*source);
  }
}

void MysqlOper_Response::MergeFrom(const MysqlOper_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.MysqlOper.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errorstr().size() > 0) {

    errorstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorstr_);
  }
}

void MysqlOper_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.MysqlOper.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlOper_Response::CopyFrom(const MysqlOper_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.MysqlOper.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlOper_Response::IsInitialized() const {
  return true;
}

void MysqlOper_Response::Swap(MysqlOper_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlOper_Response::InternalSwap(MysqlOper_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errorstr_.Swap(&other->errorstr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MysqlOper_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MysqlOper::InitAsDefaultInstance() {
}
class MysqlOper::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlOper::MysqlOper()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.MysqlOper)
}
MysqlOper::MysqlOper(const MysqlOper& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.MysqlOper)
}

void MysqlOper::SharedCtor() {
}

MysqlOper::~MysqlOper() {
  // @@protoc_insertion_point(destructor:s2s.MysqlOper)
  SharedDtor();
}

void MysqlOper::SharedDtor() {
}

void MysqlOper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlOper& MysqlOper::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MysqlOper_s2s_2eproto.base);
  return *internal_default_instance();
}


void MysqlOper::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.MysqlOper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MysqlOper::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MysqlOper*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MysqlOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.MysqlOper)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.MysqlOper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.MysqlOper)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MysqlOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.MysqlOper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.MysqlOper)
}

::google::protobuf::uint8* MysqlOper::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.MysqlOper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.MysqlOper)
  return target;
}

size_t MysqlOper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.MysqlOper)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlOper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.MysqlOper)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlOper* source =
      ::google::protobuf::DynamicCastToGenerated<MysqlOper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.MysqlOper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.MysqlOper)
    MergeFrom(*source);
  }
}

void MysqlOper::MergeFrom(const MysqlOper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.MysqlOper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MysqlOper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.MysqlOper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlOper::CopyFrom(const MysqlOper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.MysqlOper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlOper::IsInitialized() const {
  return true;
}

void MysqlOper::Swap(MysqlOper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlOper::InternalSwap(MysqlOper* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MysqlOper::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2eproto);
  return ::file_level_metadata_s2s_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace s2s
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::s2s::NodeRegister_Request* Arena::CreateMaybeMessage< ::s2s::NodeRegister_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::NodeRegister_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::NodeRegister_Response* Arena::CreateMaybeMessage< ::s2s::NodeRegister_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::NodeRegister_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::NodeRegister* Arena::CreateMaybeMessage< ::s2s::NodeRegister >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::NodeRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::NodeInfo* Arena::CreateMaybeMessage< ::s2s::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::NodeQuery_Request* Arena::CreateMaybeMessage< ::s2s::NodeQuery_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::NodeQuery_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::NodeQuery_Response* Arena::CreateMaybeMessage< ::s2s::NodeQuery_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::NodeQuery_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::NodeQuery* Arena::CreateMaybeMessage< ::s2s::NodeQuery >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::NodeQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::MysqlQuery_Request* Arena::CreateMaybeMessage< ::s2s::MysqlQuery_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::MysqlQuery_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::MysqlQuery_Response* Arena::CreateMaybeMessage< ::s2s::MysqlQuery_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::MysqlQuery_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::MysqlQuery* Arena::CreateMaybeMessage< ::s2s::MysqlQuery >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::MysqlQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::MysqlOper_Request* Arena::CreateMaybeMessage< ::s2s::MysqlOper_Request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::MysqlOper_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::MysqlOper_Response* Arena::CreateMaybeMessage< ::s2s::MysqlOper_Response >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::MysqlOper_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::MysqlOper* Arena::CreateMaybeMessage< ::s2s::MysqlOper >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::MysqlOper >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
