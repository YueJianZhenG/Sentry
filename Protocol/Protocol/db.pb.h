// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_INCLUDED_db_2eproto
#define PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_db_2eproto();
class account;
class accountDefaultTypeInternal;
extern accountDefaultTypeInternal _account_default_instance_;
class account_user_info;
class account_user_infoDefaultTypeInternal;
extern account_user_infoDefaultTypeInternal _account_user_info_default_instance_;
namespace google {
namespace protobuf {
template<> ::account* Arena::CreateMaybeMessage<::account>(Arena*);
template<> ::account_user_info* Arena::CreateMaybeMessage<::account_user_info>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class account_user_info :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:account.user_info) */ {
 public:
  account_user_info();
  virtual ~account_user_info();

  account_user_info(const account_user_info& from);

  inline account_user_info& operator=(const account_user_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  account_user_info(account_user_info&& from) noexcept
    : account_user_info() {
    *this = ::std::move(from);
  }

  inline account_user_info& operator=(account_user_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const account_user_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const account_user_info* internal_default_instance() {
    return reinterpret_cast<const account_user_info*>(
               &_account_user_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(account_user_info* other);
  friend void swap(account_user_info& a, account_user_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline account_user_info* New() const final {
    return CreateMaybeMessage<account_user_info>(nullptr);
  }

  account_user_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<account_user_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const account_user_info& from);
  void MergeFrom(const account_user_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_user_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string platform = 4;
  void clear_platform();
  static const int kPlatformFieldNumber = 4;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // string device_mac = 6;
  void clear_device_mac();
  static const int kDeviceMacFieldNumber = 6;
  const ::std::string& device_mac() const;
  void set_device_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_device_mac(::std::string&& value);
  #endif
  void set_device_mac(const char* value);
  void set_device_mac(const char* value, size_t size);
  ::std::string* mutable_device_mac();
  ::std::string* release_device_mac();
  void set_allocated_device_mac(::std::string* device_mac);

  // string token = 9;
  void clear_token();
  static const int kTokenFieldNumber = 9;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int64 phone_num = 5;
  void clear_phone_num();
  static const int kPhoneNumFieldNumber = 5;
  ::google::protobuf::int64 phone_num() const;
  void set_phone_num(::google::protobuf::int64 value);

  // int64 register_time = 7;
  void clear_register_time();
  static const int kRegisterTimeFieldNumber = 7;
  ::google::protobuf::int64 register_time() const;
  void set_register_time(::google::protobuf::int64 value);

  // int64 last_login_time = 8;
  void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 8;
  ::google::protobuf::int64 last_login_time() const;
  void set_last_login_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:account.user_info)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr device_mac_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 phone_num_;
  ::google::protobuf::int64 register_time_;
  ::google::protobuf::int64 last_login_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class account :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:account) */ {
 public:
  account();
  virtual ~account();

  account(const account& from);

  inline account& operator=(const account& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  account(account&& from) noexcept
    : account() {
    *this = ::std::move(from);
  }

  inline account& operator=(account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const account* internal_default_instance() {
    return reinterpret_cast<const account*>(
               &_account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(account* other);
  friend void swap(account& a, account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline account* New() const final {
    return CreateMaybeMessage<account>(nullptr);
  }

  account* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<account>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const account& from);
  void MergeFrom(const account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef account_user_info user_info;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:account)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// account_user_info

// string account = 1;
inline void account_user_info::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_user_info::account() const {
  // @@protoc_insertion_point(field_get:account.user_info.account)
  return account_.GetNoArena();
}
inline void account_user_info::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:account.user_info.account)
}
#if LANG_CXX11
inline void account_user_info::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:account.user_info.account)
}
#endif
inline void account_user_info::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:account.user_info.account)
}
inline void account_user_info::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:account.user_info.account)
}
inline ::std::string* account_user_info::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:account.user_info.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_user_info::release_account() {
  // @@protoc_insertion_point(field_release:account.user_info.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_user_info::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:account.user_info.account)
}

// int64 user_id = 2;
inline void account_user_info::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 account_user_info::user_id() const {
  // @@protoc_insertion_point(field_get:account.user_info.user_id)
  return user_id_;
}
inline void account_user_info::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:account.user_info.user_id)
}

// string password = 3;
inline void account_user_info::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_user_info::password() const {
  // @@protoc_insertion_point(field_get:account.user_info.password)
  return password_.GetNoArena();
}
inline void account_user_info::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:account.user_info.password)
}
#if LANG_CXX11
inline void account_user_info::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:account.user_info.password)
}
#endif
inline void account_user_info::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:account.user_info.password)
}
inline void account_user_info::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:account.user_info.password)
}
inline ::std::string* account_user_info::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:account.user_info.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_user_info::release_password() {
  // @@protoc_insertion_point(field_release:account.user_info.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_user_info::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:account.user_info.password)
}

// string platform = 4;
inline void account_user_info::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_user_info::platform() const {
  // @@protoc_insertion_point(field_get:account.user_info.platform)
  return platform_.GetNoArena();
}
inline void account_user_info::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:account.user_info.platform)
}
#if LANG_CXX11
inline void account_user_info::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:account.user_info.platform)
}
#endif
inline void account_user_info::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:account.user_info.platform)
}
inline void account_user_info::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:account.user_info.platform)
}
inline ::std::string* account_user_info::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:account.user_info.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_user_info::release_platform() {
  // @@protoc_insertion_point(field_release:account.user_info.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_user_info::set_allocated_platform(::std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:account.user_info.platform)
}

// int64 phone_num = 5;
inline void account_user_info::clear_phone_num() {
  phone_num_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 account_user_info::phone_num() const {
  // @@protoc_insertion_point(field_get:account.user_info.phone_num)
  return phone_num_;
}
inline void account_user_info::set_phone_num(::google::protobuf::int64 value) {
  
  phone_num_ = value;
  // @@protoc_insertion_point(field_set:account.user_info.phone_num)
}

// string device_mac = 6;
inline void account_user_info::clear_device_mac() {
  device_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_user_info::device_mac() const {
  // @@protoc_insertion_point(field_get:account.user_info.device_mac)
  return device_mac_.GetNoArena();
}
inline void account_user_info::set_device_mac(const ::std::string& value) {
  
  device_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:account.user_info.device_mac)
}
#if LANG_CXX11
inline void account_user_info::set_device_mac(::std::string&& value) {
  
  device_mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:account.user_info.device_mac)
}
#endif
inline void account_user_info::set_device_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:account.user_info.device_mac)
}
inline void account_user_info::set_device_mac(const char* value, size_t size) {
  
  device_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:account.user_info.device_mac)
}
inline ::std::string* account_user_info::mutable_device_mac() {
  
  // @@protoc_insertion_point(field_mutable:account.user_info.device_mac)
  return device_mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_user_info::release_device_mac() {
  // @@protoc_insertion_point(field_release:account.user_info.device_mac)
  
  return device_mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_user_info::set_allocated_device_mac(::std::string* device_mac) {
  if (device_mac != nullptr) {
    
  } else {
    
  }
  device_mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_mac);
  // @@protoc_insertion_point(field_set_allocated:account.user_info.device_mac)
}

// int64 register_time = 7;
inline void account_user_info::clear_register_time() {
  register_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 account_user_info::register_time() const {
  // @@protoc_insertion_point(field_get:account.user_info.register_time)
  return register_time_;
}
inline void account_user_info::set_register_time(::google::protobuf::int64 value) {
  
  register_time_ = value;
  // @@protoc_insertion_point(field_set:account.user_info.register_time)
}

// int64 last_login_time = 8;
inline void account_user_info::clear_last_login_time() {
  last_login_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 account_user_info::last_login_time() const {
  // @@protoc_insertion_point(field_get:account.user_info.last_login_time)
  return last_login_time_;
}
inline void account_user_info::set_last_login_time(::google::protobuf::int64 value) {
  
  last_login_time_ = value;
  // @@protoc_insertion_point(field_set:account.user_info.last_login_time)
}

// string token = 9;
inline void account_user_info::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_user_info::token() const {
  // @@protoc_insertion_point(field_get:account.user_info.token)
  return token_.GetNoArena();
}
inline void account_user_info::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:account.user_info.token)
}
#if LANG_CXX11
inline void account_user_info::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:account.user_info.token)
}
#endif
inline void account_user_info::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:account.user_info.token)
}
inline void account_user_info::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:account.user_info.token)
}
inline ::std::string* account_user_info::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:account.user_info.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_user_info::release_token() {
  // @@protoc_insertion_point(field_release:account.user_info.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_user_info::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:account.user_info.token)
}

// -------------------------------------------------------------------

// account

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_db_2eproto
