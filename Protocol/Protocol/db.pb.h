// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_INCLUDED_db_2eproto
#define PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_db_2eproto();
namespace db {
class UserAccountData;
class UserAccountDataDefaultTypeInternal;
extern UserAccountDataDefaultTypeInternal _UserAccountData_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::UserAccountData* Arena::CreateMaybeMessage<::db::UserAccountData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class UserAccountData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserAccountData) */ {
 public:
  UserAccountData();
  virtual ~UserAccountData();

  UserAccountData(const UserAccountData& from);

  inline UserAccountData& operator=(const UserAccountData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAccountData(UserAccountData&& from) noexcept
    : UserAccountData() {
    *this = ::std::move(from);
  }

  inline UserAccountData& operator=(UserAccountData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserAccountData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAccountData* internal_default_instance() {
    return reinterpret_cast<const UserAccountData*>(
               &_UserAccountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserAccountData* other);
  friend void swap(UserAccountData& a, UserAccountData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAccountData* New() const final {
    return CreateMaybeMessage<UserAccountData>(nullptr);
  }

  UserAccountData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAccountData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAccountData& from);
  void MergeFrom(const UserAccountData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAccountData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string Passwd = 3;
  void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string Platform = 4;
  void clear_platform();
  static const int kPlatformFieldNumber = 4;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // string Devicemac = 6;
  void clear_devicemac();
  static const int kDevicemacFieldNumber = 6;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const char* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // string Token = 9;
  void clear_token();
  static const int kTokenFieldNumber = 9;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int64 Phonenum = 5;
  void clear_phonenum();
  static const int kPhonenumFieldNumber = 5;
  ::google::protobuf::int64 phonenum() const;
  void set_phonenum(::google::protobuf::int64 value);

  // int64 Registertime = 7;
  void clear_registertime();
  static const int kRegistertimeFieldNumber = 7;
  ::google::protobuf::int64 registertime() const;
  void set_registertime(::google::protobuf::int64 value);

  // int64 Lastlogintime = 8;
  void clear_lastlogintime();
  static const int kLastlogintimeFieldNumber = 8;
  ::google::protobuf::int64 lastlogintime() const;
  void set_lastlogintime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserAccountData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int64 phonenum_;
  ::google::protobuf::int64 registertime_;
  ::google::protobuf::int64 lastlogintime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserAccountData

// int64 UserID = 1;
inline void UserAccountData::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::userid() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.UserID)
  return userid_;
}
inline void UserAccountData::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:db.UserAccountData.UserID)
}

// string Account = 2;
inline void UserAccountData::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::account() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Account)
  return account_.GetNoArena();
}
inline void UserAccountData::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.UserAccountData.Account)
}
#if LANG_CXX11
inline void UserAccountData::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.UserAccountData.Account)
}
#endif
inline void UserAccountData::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.UserAccountData.Account)
}
inline void UserAccountData::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.UserAccountData.Account)
}
inline ::std::string* UserAccountData::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:db.UserAccountData.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_account() {
  // @@protoc_insertion_point(field_release:db.UserAccountData.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:db.UserAccountData.Account)
}

// string Passwd = 3;
inline void UserAccountData::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::passwd() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Passwd)
  return passwd_.GetNoArena();
}
inline void UserAccountData::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.UserAccountData.Passwd)
}
#if LANG_CXX11
inline void UserAccountData::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.UserAccountData.Passwd)
}
#endif
inline void UserAccountData::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.UserAccountData.Passwd)
}
inline void UserAccountData::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.UserAccountData.Passwd)
}
inline ::std::string* UserAccountData::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:db.UserAccountData.Passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_passwd() {
  // @@protoc_insertion_point(field_release:db.UserAccountData.Passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_passwd(::std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:db.UserAccountData.Passwd)
}

// string Platform = 4;
inline void UserAccountData::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::platform() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Platform)
  return platform_.GetNoArena();
}
inline void UserAccountData::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.UserAccountData.Platform)
}
#if LANG_CXX11
inline void UserAccountData::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.UserAccountData.Platform)
}
#endif
inline void UserAccountData::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.UserAccountData.Platform)
}
inline void UserAccountData::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.UserAccountData.Platform)
}
inline ::std::string* UserAccountData::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:db.UserAccountData.Platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_platform() {
  // @@protoc_insertion_point(field_release:db.UserAccountData.Platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_platform(::std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:db.UserAccountData.Platform)
}

// int64 Phonenum = 5;
inline void UserAccountData::clear_phonenum() {
  phonenum_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::phonenum() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Phonenum)
  return phonenum_;
}
inline void UserAccountData::set_phonenum(::google::protobuf::int64 value) {
  
  phonenum_ = value;
  // @@protoc_insertion_point(field_set:db.UserAccountData.Phonenum)
}

// string Devicemac = 6;
inline void UserAccountData::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::devicemac() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Devicemac)
  return devicemac_.GetNoArena();
}
inline void UserAccountData::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.UserAccountData.Devicemac)
}
#if LANG_CXX11
inline void UserAccountData::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.UserAccountData.Devicemac)
}
#endif
inline void UserAccountData::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.UserAccountData.Devicemac)
}
inline void UserAccountData::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.UserAccountData.Devicemac)
}
inline ::std::string* UserAccountData::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:db.UserAccountData.Devicemac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_devicemac() {
  // @@protoc_insertion_point(field_release:db.UserAccountData.Devicemac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != nullptr) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:db.UserAccountData.Devicemac)
}

// int64 Registertime = 7;
inline void UserAccountData::clear_registertime() {
  registertime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::registertime() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Registertime)
  return registertime_;
}
inline void UserAccountData::set_registertime(::google::protobuf::int64 value) {
  
  registertime_ = value;
  // @@protoc_insertion_point(field_set:db.UserAccountData.Registertime)
}

// int64 Lastlogintime = 8;
inline void UserAccountData::clear_lastlogintime() {
  lastlogintime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::lastlogintime() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Lastlogintime)
  return lastlogintime_;
}
inline void UserAccountData::set_lastlogintime(::google::protobuf::int64 value) {
  
  lastlogintime_ = value;
  // @@protoc_insertion_point(field_set:db.UserAccountData.Lastlogintime)
}

// string Token = 9;
inline void UserAccountData::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::token() const {
  // @@protoc_insertion_point(field_get:db.UserAccountData.Token)
  return token_.GetNoArena();
}
inline void UserAccountData::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.UserAccountData.Token)
}
#if LANG_CXX11
inline void UserAccountData::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.UserAccountData.Token)
}
#endif
inline void UserAccountData::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.UserAccountData.Token)
}
inline void UserAccountData::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.UserAccountData.Token)
}
inline ::std::string* UserAccountData::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:db.UserAccountData.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_token() {
  // @@protoc_insertion_point(field_release:db.UserAccountData.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:db.UserAccountData.Token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_db_2eproto
