// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#ifndef PROTOBUF_INCLUDED_s2s_2eproto
#define PROTOBUF_INCLUDED_s2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2eproto();
namespace s2s {
class AddToGate;
class AddToGateDefaultTypeInternal;
extern AddToGateDefaultTypeInternal _AddToGate_default_instance_;
class AddToGate_Request;
class AddToGate_RequestDefaultTypeInternal;
extern AddToGate_RequestDefaultTypeInternal _AddToGate_Request_default_instance_;
class AddToGate_Response;
class AddToGate_ResponseDefaultTypeInternal;
extern AddToGate_ResponseDefaultTypeInternal _AddToGate_Response_default_instance_;
class GroupConfigData;
class GroupConfigDataDefaultTypeInternal;
extern GroupConfigDataDefaultTypeInternal _GroupConfigData_default_instance_;
class HostQuery;
class HostQueryDefaultTypeInternal;
extern HostQueryDefaultTypeInternal _HostQuery_default_instance_;
class HostQuery_Response;
class HostQuery_ResponseDefaultTypeInternal;
extern HostQuery_ResponseDefaultTypeInternal _HostQuery_Response_default_instance_;
class Listener;
class ListenerDefaultTypeInternal;
extern ListenerDefaultTypeInternal _Listener_default_instance_;
class Mysql;
class MysqlDefaultTypeInternal;
extern MysqlDefaultTypeInternal _Mysql_default_instance_;
class MysqlAnyOper;
class MysqlAnyOperDefaultTypeInternal;
extern MysqlAnyOperDefaultTypeInternal _MysqlAnyOper_default_instance_;
class MysqlAnyOper_Request;
class MysqlAnyOper_RequestDefaultTypeInternal;
extern MysqlAnyOper_RequestDefaultTypeInternal _MysqlAnyOper_Request_default_instance_;
class MysqlOper;
class MysqlOperDefaultTypeInternal;
extern MysqlOperDefaultTypeInternal _MysqlOper_default_instance_;
class MysqlOper_Request;
class MysqlOper_RequestDefaultTypeInternal;
extern MysqlOper_RequestDefaultTypeInternal _MysqlOper_Request_default_instance_;
class MysqlQuery;
class MysqlQueryDefaultTypeInternal;
extern MysqlQueryDefaultTypeInternal _MysqlQuery_default_instance_;
class MysqlQuery_Request;
class MysqlQuery_RequestDefaultTypeInternal;
extern MysqlQuery_RequestDefaultTypeInternal _MysqlQuery_Request_default_instance_;
class MysqlResponse;
class MysqlResponseDefaultTypeInternal;
extern MysqlResponseDefaultTypeInternal _MysqlResponse_default_instance_;
class Mysql_Add;
class Mysql_AddDefaultTypeInternal;
extern Mysql_AddDefaultTypeInternal _Mysql_Add_default_instance_;
class Mysql_Delete;
class Mysql_DeleteDefaultTypeInternal;
extern Mysql_DeleteDefaultTypeInternal _Mysql_Delete_default_instance_;
class Mysql_Query;
class Mysql_QueryDefaultTypeInternal;
extern Mysql_QueryDefaultTypeInternal _Mysql_Query_default_instance_;
class Mysql_Response;
class Mysql_ResponseDefaultTypeInternal;
extern Mysql_ResponseDefaultTypeInternal _Mysql_Response_default_instance_;
class Mysql_Save;
class Mysql_SaveDefaultTypeInternal;
extern Mysql_SaveDefaultTypeInternal _Mysql_Save_default_instance_;
class Mysql_Update;
class Mysql_UpdateDefaultTypeInternal;
extern Mysql_UpdateDefaultTypeInternal _Mysql_Update_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeInfo_ListenersEntry_DoNotUse;
class NodeInfo_ListenersEntry_DoNotUseDefaultTypeInternal;
extern NodeInfo_ListenersEntry_DoNotUseDefaultTypeInternal _NodeInfo_ListenersEntry_DoNotUse_default_instance_;
class NodeQuery;
class NodeQueryDefaultTypeInternal;
extern NodeQueryDefaultTypeInternal _NodeQuery_default_instance_;
class NodeQuery_Request;
class NodeQuery_RequestDefaultTypeInternal;
extern NodeQuery_RequestDefaultTypeInternal _NodeQuery_Request_default_instance_;
class NodeQuery_Response;
class NodeQuery_ResponseDefaultTypeInternal;
extern NodeQuery_ResponseDefaultTypeInternal _NodeQuery_Response_default_instance_;
class NodeRegister;
class NodeRegisterDefaultTypeInternal;
extern NodeRegisterDefaultTypeInternal _NodeRegister_default_instance_;
class NodeRegister_Request;
class NodeRegister_RequestDefaultTypeInternal;
extern NodeRegister_RequestDefaultTypeInternal _NodeRegister_Request_default_instance_;
class NodeRegister_Response;
class NodeRegister_ResponseDefaultTypeInternal;
extern NodeRegister_ResponseDefaultTypeInternal _NodeRegister_Response_default_instance_;
}  // namespace s2s
namespace google {
namespace protobuf {
template<> ::s2s::AddToGate* Arena::CreateMaybeMessage<::s2s::AddToGate>(Arena*);
template<> ::s2s::AddToGate_Request* Arena::CreateMaybeMessage<::s2s::AddToGate_Request>(Arena*);
template<> ::s2s::AddToGate_Response* Arena::CreateMaybeMessage<::s2s::AddToGate_Response>(Arena*);
template<> ::s2s::GroupConfigData* Arena::CreateMaybeMessage<::s2s::GroupConfigData>(Arena*);
template<> ::s2s::HostQuery* Arena::CreateMaybeMessage<::s2s::HostQuery>(Arena*);
template<> ::s2s::HostQuery_Response* Arena::CreateMaybeMessage<::s2s::HostQuery_Response>(Arena*);
template<> ::s2s::Listener* Arena::CreateMaybeMessage<::s2s::Listener>(Arena*);
template<> ::s2s::Mysql* Arena::CreateMaybeMessage<::s2s::Mysql>(Arena*);
template<> ::s2s::MysqlAnyOper* Arena::CreateMaybeMessage<::s2s::MysqlAnyOper>(Arena*);
template<> ::s2s::MysqlAnyOper_Request* Arena::CreateMaybeMessage<::s2s::MysqlAnyOper_Request>(Arena*);
template<> ::s2s::MysqlOper* Arena::CreateMaybeMessage<::s2s::MysqlOper>(Arena*);
template<> ::s2s::MysqlOper_Request* Arena::CreateMaybeMessage<::s2s::MysqlOper_Request>(Arena*);
template<> ::s2s::MysqlQuery* Arena::CreateMaybeMessage<::s2s::MysqlQuery>(Arena*);
template<> ::s2s::MysqlQuery_Request* Arena::CreateMaybeMessage<::s2s::MysqlQuery_Request>(Arena*);
template<> ::s2s::MysqlResponse* Arena::CreateMaybeMessage<::s2s::MysqlResponse>(Arena*);
template<> ::s2s::Mysql_Add* Arena::CreateMaybeMessage<::s2s::Mysql_Add>(Arena*);
template<> ::s2s::Mysql_Delete* Arena::CreateMaybeMessage<::s2s::Mysql_Delete>(Arena*);
template<> ::s2s::Mysql_Query* Arena::CreateMaybeMessage<::s2s::Mysql_Query>(Arena*);
template<> ::s2s::Mysql_Response* Arena::CreateMaybeMessage<::s2s::Mysql_Response>(Arena*);
template<> ::s2s::Mysql_Save* Arena::CreateMaybeMessage<::s2s::Mysql_Save>(Arena*);
template<> ::s2s::Mysql_Update* Arena::CreateMaybeMessage<::s2s::Mysql_Update>(Arena*);
template<> ::s2s::NodeInfo* Arena::CreateMaybeMessage<::s2s::NodeInfo>(Arena*);
template<> ::s2s::NodeInfo_ListenersEntry_DoNotUse* Arena::CreateMaybeMessage<::s2s::NodeInfo_ListenersEntry_DoNotUse>(Arena*);
template<> ::s2s::NodeQuery* Arena::CreateMaybeMessage<::s2s::NodeQuery>(Arena*);
template<> ::s2s::NodeQuery_Request* Arena::CreateMaybeMessage<::s2s::NodeQuery_Request>(Arena*);
template<> ::s2s::NodeQuery_Response* Arena::CreateMaybeMessage<::s2s::NodeQuery_Response>(Arena*);
template<> ::s2s::NodeRegister* Arena::CreateMaybeMessage<::s2s::NodeRegister>(Arena*);
template<> ::s2s::NodeRegister_Request* Arena::CreateMaybeMessage<::s2s::NodeRegister_Request>(Arena*);
template<> ::s2s::NodeRegister_Response* Arena::CreateMaybeMessage<::s2s::NodeRegister_Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace s2s {

// ===================================================================

class Listener :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Listener) */ {
 public:
  Listener();
  virtual ~Listener();

  Listener(const Listener& from);

  inline Listener& operator=(const Listener& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Listener(Listener&& from) noexcept
    : Listener() {
    *this = ::std::move(from);
  }

  inline Listener& operator=(Listener&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Listener& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Listener* internal_default_instance() {
    return reinterpret_cast<const Listener*>(
               &_Listener_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Listener* other);
  friend void swap(Listener& a, Listener& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Listener* New() const final {
    return CreateMaybeMessage<Listener>(nullptr);
  }

  Listener* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Listener>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Listener& from);
  void MergeFrom(const Listener& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Listener* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:s2s.Listener)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_ListenersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NodeInfo_ListenersEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<NodeInfo_ListenersEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  NodeInfo_ListenersEntry_DoNotUse();
  NodeInfo_ListenersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NodeInfo_ListenersEntry_DoNotUse& other);
  static const NodeInfo_ListenersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeInfo_ListenersEntry_DoNotUse*>(&_NodeInfo_ListenersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NodeInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string services = 5;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 5;
  const ::std::string& services(int index) const;
  ::std::string* mutable_services(int index);
  void set_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_services(int index, ::std::string&& value);
  #endif
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  ::std::string* add_services();
  void add_services(const ::std::string& value);
  #if LANG_CXX11
  void add_services(::std::string&& value);
  #endif
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_services();

  // map<string, int32> listeners = 6;
  int listeners_size() const;
  void clear_listeners();
  static const int kListenersFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      listeners() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_listeners();

  // string server_ip = 3;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // string server_name = 4;
  void clear_server_name();
  static const int kServerNameFieldNumber = 4;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // int32 area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // int32 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> services_;
  ::google::protobuf::internal::MapField<
      NodeInfo_ListenersEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > listeners_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int32 area_id_;
  ::google::protobuf::int32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class GroupConfigData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.GroupConfigData) */ {
 public:
  GroupConfigData();
  virtual ~GroupConfigData();

  GroupConfigData(const GroupConfigData& from);

  inline GroupConfigData& operator=(const GroupConfigData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupConfigData(GroupConfigData&& from) noexcept
    : GroupConfigData() {
    *this = ::std::move(from);
  }

  inline GroupConfigData& operator=(GroupConfigData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GroupConfigData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupConfigData* internal_default_instance() {
    return reinterpret_cast<const GroupConfigData*>(
               &_GroupConfigData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GroupConfigData* other);
  friend void swap(GroupConfigData& a, GroupConfigData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupConfigData* New() const final {
    return CreateMaybeMessage<GroupConfigData>(nullptr);
  }

  GroupConfigData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupConfigData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroupConfigData& from);
  void MergeFrom(const GroupConfigData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupConfigData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string group_name = 4;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 4;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // int64 open_time = 2;
  void clear_open_time();
  static const int kOpenTimeFieldNumber = 2;
  ::google::protobuf::int64 open_time() const;
  void set_open_time(::google::protobuf::int64 value);

  // uint32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:s2s.GroupConfigData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  ::google::protobuf::int64 open_time_;
  ::google::protobuf::uint32 group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeRegister_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister.Request) */ {
 public:
  NodeRegister_Request();
  virtual ~NodeRegister_Request();

  NodeRegister_Request(const NodeRegister_Request& from);

  inline NodeRegister_Request& operator=(const NodeRegister_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister_Request(NodeRegister_Request&& from) noexcept
    : NodeRegister_Request() {
    *this = ::std::move(from);
  }

  inline NodeRegister_Request& operator=(NodeRegister_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister_Request* internal_default_instance() {
    return reinterpret_cast<const NodeRegister_Request*>(
               &_NodeRegister_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NodeRegister_Request* other);
  friend void swap(NodeRegister_Request& a, NodeRegister_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister_Request* New() const final {
    return CreateMaybeMessage<NodeRegister_Request>(nullptr);
  }

  NodeRegister_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister_Request& from);
  void MergeFrom(const NodeRegister_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .s2s.NodeInfo node_info = 1;
  bool has_node_info() const;
  void clear_node_info();
  static const int kNodeInfoFieldNumber = 1;
  const ::s2s::NodeInfo& node_info() const;
  ::s2s::NodeInfo* release_node_info();
  ::s2s::NodeInfo* mutable_node_info();
  void set_allocated_node_info(::s2s::NodeInfo* node_info);

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::s2s::NodeInfo* node_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeRegister_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister.Response) */ {
 public:
  NodeRegister_Response();
  virtual ~NodeRegister_Response();

  NodeRegister_Response(const NodeRegister_Response& from);

  inline NodeRegister_Response& operator=(const NodeRegister_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister_Response(NodeRegister_Response&& from) noexcept
    : NodeRegister_Response() {
    *this = ::std::move(from);
  }

  inline NodeRegister_Response& operator=(NodeRegister_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister_Response* internal_default_instance() {
    return reinterpret_cast<const NodeRegister_Response*>(
               &_NodeRegister_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NodeRegister_Response* other);
  friend void swap(NodeRegister_Response& a, NodeRegister_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister_Response* New() const final {
    return CreateMaybeMessage<NodeRegister_Response>(nullptr);
  }

  NodeRegister_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister_Response& from);
  void MergeFrom(const NodeRegister_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .s2s.GroupConfigData group_data = 2;
  bool has_group_data() const;
  void clear_group_data();
  static const int kGroupDataFieldNumber = 2;
  const ::s2s::GroupConfigData& group_data() const;
  ::s2s::GroupConfigData* release_group_data();
  ::s2s::GroupConfigData* mutable_group_data();
  void set_allocated_group_data(::s2s::GroupConfigData* group_data);

  // int32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::s2s::GroupConfigData* group_data_;
  ::google::protobuf::int32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeRegister :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister) */ {
 public:
  NodeRegister();
  virtual ~NodeRegister();

  NodeRegister(const NodeRegister& from);

  inline NodeRegister& operator=(const NodeRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister(NodeRegister&& from) noexcept
    : NodeRegister() {
    *this = ::std::move(from);
  }

  inline NodeRegister& operator=(NodeRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister* internal_default_instance() {
    return reinterpret_cast<const NodeRegister*>(
               &_NodeRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NodeRegister* other);
  friend void swap(NodeRegister& a, NodeRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister* New() const final {
    return CreateMaybeMessage<NodeRegister>(nullptr);
  }

  NodeRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister& from);
  void MergeFrom(const NodeRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeRegister_Request Request;
  typedef NodeRegister_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Add :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Add) */ {
 public:
  Mysql_Add();
  virtual ~Mysql_Add();

  Mysql_Add(const Mysql_Add& from);

  inline Mysql_Add& operator=(const Mysql_Add& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Add(Mysql_Add&& from) noexcept
    : Mysql_Add() {
    *this = ::std::move(from);
  }

  inline Mysql_Add& operator=(Mysql_Add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Add* internal_default_instance() {
    return reinterpret_cast<const Mysql_Add*>(
               &_Mysql_Add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Mysql_Add* other);
  friend void swap(Mysql_Add& a, Mysql_Add& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Add* New() const final {
    return CreateMaybeMessage<Mysql_Add>(nullptr);
  }

  Mysql_Add* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Add>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Add& from);
  void MergeFrom(const Mysql_Add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Add* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Add)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Save :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Save) */ {
 public:
  Mysql_Save();
  virtual ~Mysql_Save();

  Mysql_Save(const Mysql_Save& from);

  inline Mysql_Save& operator=(const Mysql_Save& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Save(Mysql_Save&& from) noexcept
    : Mysql_Save() {
    *this = ::std::move(from);
  }

  inline Mysql_Save& operator=(Mysql_Save&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Save* internal_default_instance() {
    return reinterpret_cast<const Mysql_Save*>(
               &_Mysql_Save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Mysql_Save* other);
  friend void swap(Mysql_Save& a, Mysql_Save& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Save* New() const final {
    return CreateMaybeMessage<Mysql_Save>(nullptr);
  }

  Mysql_Save* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Save>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Save& from);
  void MergeFrom(const Mysql_Save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Save* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Save)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Query :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Query) */ {
 public:
  Mysql_Query();
  virtual ~Mysql_Query();

  Mysql_Query(const Mysql_Query& from);

  inline Mysql_Query& operator=(const Mysql_Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Query(Mysql_Query&& from) noexcept
    : Mysql_Query() {
    *this = ::std::move(from);
  }

  inline Mysql_Query& operator=(Mysql_Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Query* internal_default_instance() {
    return reinterpret_cast<const Mysql_Query*>(
               &_Mysql_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Mysql_Query* other);
  friend void swap(Mysql_Query& a, Mysql_Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Query* New() const final {
    return CreateMaybeMessage<Mysql_Query>(nullptr);
  }

  Mysql_Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Query& from);
  void MergeFrom(const Mysql_Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where_json = 2;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 2;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Query)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Delete :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Delete) */ {
 public:
  Mysql_Delete();
  virtual ~Mysql_Delete();

  Mysql_Delete(const Mysql_Delete& from);

  inline Mysql_Delete& operator=(const Mysql_Delete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Delete(Mysql_Delete&& from) noexcept
    : Mysql_Delete() {
    *this = ::std::move(from);
  }

  inline Mysql_Delete& operator=(Mysql_Delete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Delete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Delete* internal_default_instance() {
    return reinterpret_cast<const Mysql_Delete*>(
               &_Mysql_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Mysql_Delete* other);
  friend void swap(Mysql_Delete& a, Mysql_Delete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Delete* New() const final {
    return CreateMaybeMessage<Mysql_Delete>(nullptr);
  }

  Mysql_Delete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Delete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Delete& from);
  void MergeFrom(const Mysql_Delete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Delete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where_json = 2;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 2;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Delete)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Update :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Update) */ {
 public:
  Mysql_Update();
  virtual ~Mysql_Update();

  Mysql_Update(const Mysql_Update& from);

  inline Mysql_Update& operator=(const Mysql_Update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Update(Mysql_Update&& from) noexcept
    : Mysql_Update() {
    *this = ::std::move(from);
  }

  inline Mysql_Update& operator=(Mysql_Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Update* internal_default_instance() {
    return reinterpret_cast<const Mysql_Update*>(
               &_Mysql_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Mysql_Update* other);
  friend void swap(Mysql_Update& a, Mysql_Update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Update* New() const final {
    return CreateMaybeMessage<Mysql_Update>(nullptr);
  }

  Mysql_Update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Update& from);
  void MergeFrom(const Mysql_Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string update_json = 2;
  void clear_update_json();
  static const int kUpdateJsonFieldNumber = 2;
  const ::std::string& update_json() const;
  void set_update_json(const ::std::string& value);
  #if LANG_CXX11
  void set_update_json(::std::string&& value);
  #endif
  void set_update_json(const char* value);
  void set_update_json(const char* value, size_t size);
  ::std::string* mutable_update_json();
  ::std::string* release_update_json();
  void set_allocated_update_json(::std::string* update_json);

  // string where_json = 3;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 3;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Update)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr update_json_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Response) */ {
 public:
  Mysql_Response();
  virtual ~Mysql_Response();

  Mysql_Response(const Mysql_Response& from);

  inline Mysql_Response& operator=(const Mysql_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Response(Mysql_Response&& from) noexcept
    : Mysql_Response() {
    *this = ::std::move(from);
  }

  inline Mysql_Response& operator=(Mysql_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Response* internal_default_instance() {
    return reinterpret_cast<const Mysql_Response*>(
               &_Mysql_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Mysql_Response* other);
  friend void swap(Mysql_Response& a, Mysql_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Response* New() const final {
    return CreateMaybeMessage<Mysql_Response>(nullptr);
  }

  Mysql_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Response& from);
  void MergeFrom(const Mysql_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string json_array = 2;
  int json_array_size() const;
  void clear_json_array();
  static const int kJsonArrayFieldNumber = 2;
  const ::std::string& json_array(int index) const;
  ::std::string* mutable_json_array(int index);
  void set_json_array(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_json_array(int index, ::std::string&& value);
  #endif
  void set_json_array(int index, const char* value);
  void set_json_array(int index, const char* value, size_t size);
  ::std::string* add_json_array();
  void add_json_array(const ::std::string& value);
  #if LANG_CXX11
  void add_json_array(::std::string&& value);
  #endif
  void add_json_array(const char* value);
  void add_json_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& json_array() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_json_array();

  // string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> json_array_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql) */ {
 public:
  Mysql();
  virtual ~Mysql();

  Mysql(const Mysql& from);

  inline Mysql& operator=(const Mysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql(Mysql&& from) noexcept
    : Mysql() {
    *this = ::std::move(from);
  }

  inline Mysql& operator=(Mysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql* internal_default_instance() {
    return reinterpret_cast<const Mysql*>(
               &_Mysql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Mysql* other);
  friend void swap(Mysql& a, Mysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql* New() const final {
    return CreateMaybeMessage<Mysql>(nullptr);
  }

  Mysql* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql& from);
  void MergeFrom(const Mysql& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mysql_Add Add;
  typedef Mysql_Save Save;
  typedef Mysql_Query Query;
  typedef Mysql_Delete Delete;
  typedef Mysql_Update Update;
  typedef Mysql_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.Mysql)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeQuery_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeQuery.Request) */ {
 public:
  NodeQuery_Request();
  virtual ~NodeQuery_Request();

  NodeQuery_Request(const NodeQuery_Request& from);

  inline NodeQuery_Request& operator=(const NodeQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeQuery_Request(NodeQuery_Request&& from) noexcept
    : NodeQuery_Request() {
    *this = ::std::move(from);
  }

  inline NodeQuery_Request& operator=(NodeQuery_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeQuery_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeQuery_Request* internal_default_instance() {
    return reinterpret_cast<const NodeQuery_Request*>(
               &_NodeQuery_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(NodeQuery_Request* other);
  friend void swap(NodeQuery_Request& a, NodeQuery_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeQuery_Request* New() const final {
    return CreateMaybeMessage<NodeQuery_Request>(nullptr);
  }

  NodeQuery_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeQuery_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeQuery_Request& from);
  void MergeFrom(const NodeQuery_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeQuery_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 2;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // int32 area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeQuery.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::int32 area_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeQuery_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeQuery.Response) */ {
 public:
  NodeQuery_Response();
  virtual ~NodeQuery_Response();

  NodeQuery_Response(const NodeQuery_Response& from);

  inline NodeQuery_Response& operator=(const NodeQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeQuery_Response(NodeQuery_Response&& from) noexcept
    : NodeQuery_Response() {
    *this = ::std::move(from);
  }

  inline NodeQuery_Response& operator=(NodeQuery_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeQuery_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeQuery_Response* internal_default_instance() {
    return reinterpret_cast<const NodeQuery_Response*>(
               &_NodeQuery_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(NodeQuery_Response* other);
  friend void swap(NodeQuery_Response& a, NodeQuery_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeQuery_Response* New() const final {
    return CreateMaybeMessage<NodeQuery_Response>(nullptr);
  }

  NodeQuery_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeQuery_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeQuery_Response& from);
  void MergeFrom(const NodeQuery_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeQuery_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .s2s.NodeInfo node_infos = 1;
  int node_infos_size() const;
  void clear_node_infos();
  static const int kNodeInfosFieldNumber = 1;
  ::s2s::NodeInfo* mutable_node_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >*
      mutable_node_infos();
  const ::s2s::NodeInfo& node_infos(int index) const;
  ::s2s::NodeInfo* add_node_infos();
  const ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >&
      node_infos() const;

  // @@protoc_insertion_point(class_scope:s2s.NodeQuery.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo > node_infos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeQuery :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeQuery) */ {
 public:
  NodeQuery();
  virtual ~NodeQuery();

  NodeQuery(const NodeQuery& from);

  inline NodeQuery& operator=(const NodeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeQuery(NodeQuery&& from) noexcept
    : NodeQuery() {
    *this = ::std::move(from);
  }

  inline NodeQuery& operator=(NodeQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeQuery* internal_default_instance() {
    return reinterpret_cast<const NodeQuery*>(
               &_NodeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(NodeQuery* other);
  friend void swap(NodeQuery& a, NodeQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeQuery* New() const final {
    return CreateMaybeMessage<NodeQuery>(nullptr);
  }

  NodeQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeQuery& from);
  void MergeFrom(const NodeQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeQuery_Request Request;
  typedef NodeQuery_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.NodeQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class HostQuery_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.HostQuery.Response) */ {
 public:
  HostQuery_Response();
  virtual ~HostQuery_Response();

  HostQuery_Response(const HostQuery_Response& from);

  inline HostQuery_Response& operator=(const HostQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostQuery_Response(HostQuery_Response&& from) noexcept
    : HostQuery_Response() {
    *this = ::std::move(from);
  }

  inline HostQuery_Response& operator=(HostQuery_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HostQuery_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostQuery_Response* internal_default_instance() {
    return reinterpret_cast<const HostQuery_Response*>(
               &_HostQuery_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(HostQuery_Response* other);
  friend void swap(HostQuery_Response& a, HostQuery_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostQuery_Response* New() const final {
    return CreateMaybeMessage<HostQuery_Response>(nullptr);
  }

  HostQuery_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HostQuery_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HostQuery_Response& from);
  void MergeFrom(const HostQuery_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostQuery_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string hosts = 1;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 1;
  const ::std::string& hosts(int index) const;
  ::std::string* mutable_hosts(int index);
  void set_hosts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hosts(int index, ::std::string&& value);
  #endif
  void set_hosts(int index, const char* value);
  void set_hosts(int index, const char* value, size_t size);
  ::std::string* add_hosts();
  void add_hosts(const ::std::string& value);
  #if LANG_CXX11
  void add_hosts(::std::string&& value);
  #endif
  void add_hosts(const char* value);
  void add_hosts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& hosts() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_hosts();

  // @@protoc_insertion_point(class_scope:s2s.HostQuery.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> hosts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class HostQuery :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.HostQuery) */ {
 public:
  HostQuery();
  virtual ~HostQuery();

  HostQuery(const HostQuery& from);

  inline HostQuery& operator=(const HostQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostQuery(HostQuery&& from) noexcept
    : HostQuery() {
    *this = ::std::move(from);
  }

  inline HostQuery& operator=(HostQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HostQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostQuery* internal_default_instance() {
    return reinterpret_cast<const HostQuery*>(
               &_HostQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(HostQuery* other);
  friend void swap(HostQuery& a, HostQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostQuery* New() const final {
    return CreateMaybeMessage<HostQuery>(nullptr);
  }

  HostQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HostQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HostQuery& from);
  void MergeFrom(const HostQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostQuery_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.HostQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlResponse) */ {
 public:
  MysqlResponse();
  virtual ~MysqlResponse();

  MysqlResponse(const MysqlResponse& from);

  inline MysqlResponse& operator=(const MysqlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlResponse(MysqlResponse&& from) noexcept
    : MysqlResponse() {
    *this = ::std::move(from);
  }

  inline MysqlResponse& operator=(MysqlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlResponse*>(
               &_MysqlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(MysqlResponse* other);
  friend void swap(MysqlResponse& a, MysqlResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlResponse* New() const final {
    return CreateMaybeMessage<MysqlResponse>(nullptr);
  }

  MysqlResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlResponse& from);
  void MergeFrom(const MysqlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any datas = 2;
  int datas_size() const;
  void clear_datas();
  static const int kDatasFieldNumber = 2;
  ::google::protobuf::Any* mutable_datas(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_datas();
  const ::google::protobuf::Any& datas(int index) const;
  ::google::protobuf::Any* add_datas();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      datas() const;

  // string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:s2s.MysqlResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > datas_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlQuery_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlQuery.Request) */ {
 public:
  MysqlQuery_Request();
  virtual ~MysqlQuery_Request();

  MysqlQuery_Request(const MysqlQuery_Request& from);

  inline MysqlQuery_Request& operator=(const MysqlQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlQuery_Request(MysqlQuery_Request&& from) noexcept
    : MysqlQuery_Request() {
    *this = ::std::move(from);
  }

  inline MysqlQuery_Request& operator=(MysqlQuery_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlQuery_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlQuery_Request* internal_default_instance() {
    return reinterpret_cast<const MysqlQuery_Request*>(
               &_MysqlQuery_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MysqlQuery_Request* other);
  friend void swap(MysqlQuery_Request& a, MysqlQuery_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlQuery_Request* New() const final {
    return CreateMaybeMessage<MysqlQuery_Request>(nullptr);
  }

  MysqlQuery_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlQuery_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlQuery_Request& from);
  void MergeFrom(const MysqlQuery_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQuery_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.MysqlQuery.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlQuery :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlQuery) */ {
 public:
  MysqlQuery();
  virtual ~MysqlQuery();

  MysqlQuery(const MysqlQuery& from);

  inline MysqlQuery& operator=(const MysqlQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlQuery(MysqlQuery&& from) noexcept
    : MysqlQuery() {
    *this = ::std::move(from);
  }

  inline MysqlQuery& operator=(MysqlQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlQuery* internal_default_instance() {
    return reinterpret_cast<const MysqlQuery*>(
               &_MysqlQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(MysqlQuery* other);
  friend void swap(MysqlQuery& a, MysqlQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlQuery* New() const final {
    return CreateMaybeMessage<MysqlQuery>(nullptr);
  }

  MysqlQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlQuery& from);
  void MergeFrom(const MysqlQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MysqlQuery_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.MysqlQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlAnyOper_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlAnyOper.Request) */ {
 public:
  MysqlAnyOper_Request();
  virtual ~MysqlAnyOper_Request();

  MysqlAnyOper_Request(const MysqlAnyOper_Request& from);

  inline MysqlAnyOper_Request& operator=(const MysqlAnyOper_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlAnyOper_Request(MysqlAnyOper_Request&& from) noexcept
    : MysqlAnyOper_Request() {
    *this = ::std::move(from);
  }

  inline MysqlAnyOper_Request& operator=(MysqlAnyOper_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlAnyOper_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlAnyOper_Request* internal_default_instance() {
    return reinterpret_cast<const MysqlAnyOper_Request*>(
               &_MysqlAnyOper_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(MysqlAnyOper_Request* other);
  friend void swap(MysqlAnyOper_Request& a, MysqlAnyOper_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlAnyOper_Request* New() const final {
    return CreateMaybeMessage<MysqlAnyOper_Request>(nullptr);
  }

  MysqlAnyOper_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlAnyOper_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlAnyOper_Request& from);
  void MergeFrom(const MysqlAnyOper_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlAnyOper_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sql = 1;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // string tab = 2;
  void clear_tab();
  static const int kTabFieldNumber = 2;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // @@protoc_insertion_point(class_scope:s2s.MysqlAnyOper.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlAnyOper :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlAnyOper) */ {
 public:
  MysqlAnyOper();
  virtual ~MysqlAnyOper();

  MysqlAnyOper(const MysqlAnyOper& from);

  inline MysqlAnyOper& operator=(const MysqlAnyOper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlAnyOper(MysqlAnyOper&& from) noexcept
    : MysqlAnyOper() {
    *this = ::std::move(from);
  }

  inline MysqlAnyOper& operator=(MysqlAnyOper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlAnyOper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlAnyOper* internal_default_instance() {
    return reinterpret_cast<const MysqlAnyOper*>(
               &_MysqlAnyOper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(MysqlAnyOper* other);
  friend void swap(MysqlAnyOper& a, MysqlAnyOper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlAnyOper* New() const final {
    return CreateMaybeMessage<MysqlAnyOper>(nullptr);
  }

  MysqlAnyOper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlAnyOper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlAnyOper& from);
  void MergeFrom(const MysqlAnyOper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlAnyOper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MysqlAnyOper_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.MysqlAnyOper)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlOper_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlOper.Request) */ {
 public:
  MysqlOper_Request();
  virtual ~MysqlOper_Request();

  MysqlOper_Request(const MysqlOper_Request& from);

  inline MysqlOper_Request& operator=(const MysqlOper_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlOper_Request(MysqlOper_Request&& from) noexcept
    : MysqlOper_Request() {
    *this = ::std::move(from);
  }

  inline MysqlOper_Request& operator=(MysqlOper_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlOper_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlOper_Request* internal_default_instance() {
    return reinterpret_cast<const MysqlOper_Request*>(
               &_MysqlOper_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(MysqlOper_Request* other);
  friend void swap(MysqlOper_Request& a, MysqlOper_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlOper_Request* New() const final {
    return CreateMaybeMessage<MysqlOper_Request>(nullptr);
  }

  MysqlOper_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlOper_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlOper_Request& from);
  void MergeFrom(const MysqlOper_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlOper_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any Data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.MysqlOper.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlOper :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlOper) */ {
 public:
  MysqlOper();
  virtual ~MysqlOper();

  MysqlOper(const MysqlOper& from);

  inline MysqlOper& operator=(const MysqlOper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlOper(MysqlOper&& from) noexcept
    : MysqlOper() {
    *this = ::std::move(from);
  }

  inline MysqlOper& operator=(MysqlOper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlOper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlOper* internal_default_instance() {
    return reinterpret_cast<const MysqlOper*>(
               &_MysqlOper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(MysqlOper* other);
  friend void swap(MysqlOper& a, MysqlOper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlOper* New() const final {
    return CreateMaybeMessage<MysqlOper>(nullptr);
  }

  MysqlOper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlOper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlOper& from);
  void MergeFrom(const MysqlOper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlOper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MysqlOper_Request Request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.MysqlOper)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class AddToGate_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.AddToGate.Request) */ {
 public:
  AddToGate_Request();
  virtual ~AddToGate_Request();

  AddToGate_Request(const AddToGate_Request& from);

  inline AddToGate_Request& operator=(const AddToGate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddToGate_Request(AddToGate_Request&& from) noexcept
    : AddToGate_Request() {
    *this = ::std::move(from);
  }

  inline AddToGate_Request& operator=(AddToGate_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddToGate_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddToGate_Request* internal_default_instance() {
    return reinterpret_cast<const AddToGate_Request*>(
               &_AddToGate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(AddToGate_Request* other);
  friend void swap(AddToGate_Request& a, AddToGate_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddToGate_Request* New() const final {
    return CreateMaybeMessage<AddToGate_Request>(nullptr);
  }

  AddToGate_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddToGate_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddToGate_Request& from);
  void MergeFrom(const AddToGate_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddToGate_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.AddToGate.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class AddToGate_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.AddToGate.Response) */ {
 public:
  AddToGate_Response();
  virtual ~AddToGate_Response();

  AddToGate_Response(const AddToGate_Response& from);

  inline AddToGate_Response& operator=(const AddToGate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddToGate_Response(AddToGate_Response&& from) noexcept
    : AddToGate_Response() {
    *this = ::std::move(from);
  }

  inline AddToGate_Response& operator=(AddToGate_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddToGate_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddToGate_Response* internal_default_instance() {
    return reinterpret_cast<const AddToGate_Response*>(
               &_AddToGate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(AddToGate_Response* other);
  friend void swap(AddToGate_Response& a, AddToGate_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddToGate_Response* New() const final {
    return CreateMaybeMessage<AddToGate_Response>(nullptr);
  }

  AddToGate_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddToGate_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddToGate_Response& from);
  void MergeFrom(const AddToGate_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddToGate_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gate_ip = 1;
  void clear_gate_ip();
  static const int kGateIpFieldNumber = 1;
  const ::std::string& gate_ip() const;
  void set_gate_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_gate_ip(::std::string&& value);
  #endif
  void set_gate_ip(const char* value);
  void set_gate_ip(const char* value, size_t size);
  ::std::string* mutable_gate_ip();
  ::std::string* release_gate_ip();
  void set_allocated_gate_ip(::std::string* gate_ip);

  // string login_token = 3;
  void clear_login_token();
  static const int kLoginTokenFieldNumber = 3;
  const ::std::string& login_token() const;
  void set_login_token(const ::std::string& value);
  #if LANG_CXX11
  void set_login_token(::std::string&& value);
  #endif
  void set_login_token(const char* value);
  void set_login_token(const char* value, size_t size);
  ::std::string* mutable_login_token();
  ::std::string* release_login_token();
  void set_allocated_login_token(::std::string* login_token);

  // int32 gate_port = 2;
  void clear_gate_port();
  static const int kGatePortFieldNumber = 2;
  ::google::protobuf::int32 gate_port() const;
  void set_gate_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.AddToGate.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gate_ip_;
  ::google::protobuf::internal::ArenaStringPtr login_token_;
  ::google::protobuf::int32 gate_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class AddToGate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.AddToGate) */ {
 public:
  AddToGate();
  virtual ~AddToGate();

  AddToGate(const AddToGate& from);

  inline AddToGate& operator=(const AddToGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddToGate(AddToGate&& from) noexcept
    : AddToGate() {
    *this = ::std::move(from);
  }

  inline AddToGate& operator=(AddToGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddToGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddToGate* internal_default_instance() {
    return reinterpret_cast<const AddToGate*>(
               &_AddToGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(AddToGate* other);
  friend void swap(AddToGate& a, AddToGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddToGate* New() const final {
    return CreateMaybeMessage<AddToGate>(nullptr);
  }

  AddToGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddToGate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddToGate& from);
  void MergeFrom(const AddToGate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddToGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddToGate_Request Request;
  typedef AddToGate_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.AddToGate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Listener

// string name = 1;
inline void Listener::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Listener::name() const {
  // @@protoc_insertion_point(field_get:s2s.Listener.name)
  return name_.GetNoArena();
}
inline void Listener::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Listener.name)
}
#if LANG_CXX11
inline void Listener::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Listener.name)
}
#endif
inline void Listener::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Listener.name)
}
inline void Listener::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Listener.name)
}
inline ::std::string* Listener::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Listener.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Listener::release_name() {
  // @@protoc_insertion_point(field_release:s2s.Listener.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Listener::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:s2s.Listener.name)
}

// uint32 port = 2;
inline void Listener::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Listener::port() const {
  // @@protoc_insertion_point(field_get:s2s.Listener.port)
  return port_;
}
inline void Listener::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:s2s.Listener.port)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeInfo

// int32 area_id = 1;
inline void NodeInfo::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::area_id() const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.area_id)
  return area_id_;
}
inline void NodeInfo::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.area_id)
}

// int32 node_id = 2;
inline void NodeInfo::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.node_id)
  return node_id_;
}
inline void NodeInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.node_id)
}

// string server_ip = 3;
inline void NodeInfo::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::server_ip() const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.server_ip)
  return server_ip_.GetNoArena();
}
inline void NodeInfo::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.server_ip)
}
#if LANG_CXX11
inline void NodeInfo::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeInfo.server_ip)
}
#endif
inline void NodeInfo::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeInfo.server_ip)
}
inline void NodeInfo::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeInfo.server_ip)
}
inline ::std::string* NodeInfo::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeInfo.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_server_ip() {
  // @@protoc_insertion_point(field_release:s2s.NodeInfo.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeInfo.server_ip)
}

// string server_name = 4;
inline void NodeInfo::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::server_name() const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.server_name)
  return server_name_.GetNoArena();
}
inline void NodeInfo::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.server_name)
}
#if LANG_CXX11
inline void NodeInfo::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeInfo.server_name)
}
#endif
inline void NodeInfo::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeInfo.server_name)
}
inline void NodeInfo::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeInfo.server_name)
}
inline ::std::string* NodeInfo::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeInfo.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_server_name() {
  // @@protoc_insertion_point(field_release:s2s.NodeInfo.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeInfo.server_name)
}

// repeated string services = 5;
inline int NodeInfo::services_size() const {
  return services_.size();
}
inline void NodeInfo::clear_services() {
  services_.Clear();
}
inline const ::std::string& NodeInfo::services(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.services)
  return services_.Get(index);
}
inline ::std::string* NodeInfo::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeInfo.services)
  return services_.Mutable(index);
}
inline void NodeInfo::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.services)
  services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeInfo::set_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.services)
  services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeInfo::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.NodeInfo.services)
}
inline void NodeInfo::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeInfo.services)
}
inline ::std::string* NodeInfo::add_services() {
  // @@protoc_insertion_point(field_add_mutable:s2s.NodeInfo.services)
  return services_.Add();
}
inline void NodeInfo::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.NodeInfo.services)
}
#if LANG_CXX11
inline void NodeInfo::add_services(::std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.NodeInfo.services)
}
#endif
inline void NodeInfo::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.NodeInfo.services)
}
inline void NodeInfo::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.NodeInfo.services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodeInfo::services() const {
  // @@protoc_insertion_point(field_list:s2s.NodeInfo.services)
  return services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodeInfo::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeInfo.services)
  return &services_;
}

// map<string, int32> listeners = 6;
inline int NodeInfo::listeners_size() const {
  return listeners_.size();
}
inline void NodeInfo::clear_listeners() {
  listeners_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
NodeInfo::listeners() const {
  // @@protoc_insertion_point(field_map:s2s.NodeInfo.listeners)
  return listeners_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
NodeInfo::mutable_listeners() {
  // @@protoc_insertion_point(field_mutable_map:s2s.NodeInfo.listeners)
  return listeners_.MutableMap();
}

// -------------------------------------------------------------------

// GroupConfigData

// uint32 group_id = 1;
inline void GroupConfigData::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 GroupConfigData::group_id() const {
  // @@protoc_insertion_point(field_get:s2s.GroupConfigData.group_id)
  return group_id_;
}
inline void GroupConfigData::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.GroupConfigData.group_id)
}

// int64 open_time = 2;
inline void GroupConfigData::clear_open_time() {
  open_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupConfigData::open_time() const {
  // @@protoc_insertion_point(field_get:s2s.GroupConfigData.open_time)
  return open_time_;
}
inline void GroupConfigData::set_open_time(::google::protobuf::int64 value) {
  
  open_time_ = value;
  // @@protoc_insertion_point(field_set:s2s.GroupConfigData.open_time)
}

// string token = 3;
inline void GroupConfigData::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupConfigData::token() const {
  // @@protoc_insertion_point(field_get:s2s.GroupConfigData.token)
  return token_.GetNoArena();
}
inline void GroupConfigData::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.GroupConfigData.token)
}
#if LANG_CXX11
inline void GroupConfigData::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.GroupConfigData.token)
}
#endif
inline void GroupConfigData::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.GroupConfigData.token)
}
inline void GroupConfigData::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.GroupConfigData.token)
}
inline ::std::string* GroupConfigData::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:s2s.GroupConfigData.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupConfigData::release_token() {
  // @@protoc_insertion_point(field_release:s2s.GroupConfigData.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupConfigData::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:s2s.GroupConfigData.token)
}

// string group_name = 4;
inline void GroupConfigData::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupConfigData::group_name() const {
  // @@protoc_insertion_point(field_get:s2s.GroupConfigData.group_name)
  return group_name_.GetNoArena();
}
inline void GroupConfigData::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.GroupConfigData.group_name)
}
#if LANG_CXX11
inline void GroupConfigData::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.GroupConfigData.group_name)
}
#endif
inline void GroupConfigData::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.GroupConfigData.group_name)
}
inline void GroupConfigData::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.GroupConfigData.group_name)
}
inline ::std::string* GroupConfigData::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:s2s.GroupConfigData.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupConfigData::release_group_name() {
  // @@protoc_insertion_point(field_release:s2s.GroupConfigData.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupConfigData::set_allocated_group_name(::std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:s2s.GroupConfigData.group_name)
}

// -------------------------------------------------------------------

// NodeRegister_Request

// .s2s.NodeInfo node_info = 1;
inline bool NodeRegister_Request::has_node_info() const {
  return this != internal_default_instance() && node_info_ != nullptr;
}
inline void NodeRegister_Request::clear_node_info() {
  if (GetArenaNoVirtual() == nullptr && node_info_ != nullptr) {
    delete node_info_;
  }
  node_info_ = nullptr;
}
inline const ::s2s::NodeInfo& NodeRegister_Request::node_info() const {
  const ::s2s::NodeInfo* p = node_info_;
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.node_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::s2s::NodeInfo*>(
      &::s2s::_NodeInfo_default_instance_);
}
inline ::s2s::NodeInfo* NodeRegister_Request::release_node_info() {
  // @@protoc_insertion_point(field_release:s2s.NodeRegister.Request.node_info)
  
  ::s2s::NodeInfo* temp = node_info_;
  node_info_ = nullptr;
  return temp;
}
inline ::s2s::NodeInfo* NodeRegister_Request::mutable_node_info() {
  
  if (node_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::s2s::NodeInfo>(GetArenaNoVirtual());
    node_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Request.node_info)
  return node_info_;
}
inline void NodeRegister_Request::set_allocated_node_info(::s2s::NodeInfo* node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_info_;
  }
  if (node_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_info, submessage_arena);
    }
    
  } else {
    
  }
  node_info_ = node_info;
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeRegister.Request.node_info)
}

// -------------------------------------------------------------------

// NodeRegister_Response

// int32 node_id = 1;
inline void NodeRegister_Response::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 NodeRegister_Response::node_id() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Response.node_id)
  return node_id_;
}
inline void NodeRegister_Response::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Response.node_id)
}

// .s2s.GroupConfigData group_data = 2;
inline bool NodeRegister_Response::has_group_data() const {
  return this != internal_default_instance() && group_data_ != nullptr;
}
inline void NodeRegister_Response::clear_group_data() {
  if (GetArenaNoVirtual() == nullptr && group_data_ != nullptr) {
    delete group_data_;
  }
  group_data_ = nullptr;
}
inline const ::s2s::GroupConfigData& NodeRegister_Response::group_data() const {
  const ::s2s::GroupConfigData* p = group_data_;
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Response.group_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::s2s::GroupConfigData*>(
      &::s2s::_GroupConfigData_default_instance_);
}
inline ::s2s::GroupConfigData* NodeRegister_Response::release_group_data() {
  // @@protoc_insertion_point(field_release:s2s.NodeRegister.Response.group_data)
  
  ::s2s::GroupConfigData* temp = group_data_;
  group_data_ = nullptr;
  return temp;
}
inline ::s2s::GroupConfigData* NodeRegister_Response::mutable_group_data() {
  
  if (group_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::s2s::GroupConfigData>(GetArenaNoVirtual());
    group_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Response.group_data)
  return group_data_;
}
inline void NodeRegister_Response::set_allocated_group_data(::s2s::GroupConfigData* group_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete group_data_;
  }
  if (group_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_data, submessage_arena);
    }
    
  } else {
    
  }
  group_data_ = group_data;
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeRegister.Response.group_data)
}

// -------------------------------------------------------------------

// NodeRegister

// -------------------------------------------------------------------

// Mysql_Add

// string table = 1;
inline void Mysql_Add::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Add::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Add.table)
  return table_.GetNoArena();
}
inline void Mysql_Add::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Add.table)
}
#if LANG_CXX11
inline void Mysql_Add::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Add.table)
}
#endif
inline void Mysql_Add::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Add.table)
}
inline void Mysql_Add::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Add.table)
}
inline ::std::string* Mysql_Add::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Add.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Add::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Add.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Add::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Add.table)
}

// .google.protobuf.Any data = 2;
inline bool Mysql_Add::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& Mysql_Add::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.Mysql.Add.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Mysql_Add::release_data() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Add.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Mysql_Add::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Add.data)
  return data_;
}
inline void Mysql_Add::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Add.data)
}

// -------------------------------------------------------------------

// Mysql_Save

// string table = 1;
inline void Mysql_Save::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Save::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Save.table)
  return table_.GetNoArena();
}
inline void Mysql_Save::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Save.table)
}
#if LANG_CXX11
inline void Mysql_Save::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Save.table)
}
#endif
inline void Mysql_Save::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Save.table)
}
inline void Mysql_Save::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Save.table)
}
inline ::std::string* Mysql_Save::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Save.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Save::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Save.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Save::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Save.table)
}

// .google.protobuf.Any data = 2;
inline bool Mysql_Save::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& Mysql_Save::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.Mysql.Save.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Mysql_Save::release_data() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Save.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Mysql_Save::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Save.data)
  return data_;
}
inline void Mysql_Save::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Save.data)
}

// -------------------------------------------------------------------

// Mysql_Query

// string table = 1;
inline void Mysql_Query::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Query::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Query.table)
  return table_.GetNoArena();
}
inline void Mysql_Query::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Query.table)
}
#if LANG_CXX11
inline void Mysql_Query::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Query.table)
}
#endif
inline void Mysql_Query::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Query.table)
}
inline void Mysql_Query::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Query.table)
}
inline ::std::string* Mysql_Query::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Query.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Query::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Query.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Query::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Query.table)
}

// string where_json = 2;
inline void Mysql_Query::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Query::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Query.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Query::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Query.where_json)
}
#if LANG_CXX11
inline void Mysql_Query::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Query.where_json)
}
#endif
inline void Mysql_Query::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Query.where_json)
}
inline void Mysql_Query::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Query.where_json)
}
inline ::std::string* Mysql_Query::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Query.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Query::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Query.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Query::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Query.where_json)
}

// -------------------------------------------------------------------

// Mysql_Delete

// string table = 1;
inline void Mysql_Delete::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Delete::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Delete.table)
  return table_.GetNoArena();
}
inline void Mysql_Delete::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Delete.table)
}
#if LANG_CXX11
inline void Mysql_Delete::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Delete.table)
}
#endif
inline void Mysql_Delete::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Delete.table)
}
inline void Mysql_Delete::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Delete.table)
}
inline ::std::string* Mysql_Delete::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Delete.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Delete::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Delete.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Delete::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Delete.table)
}

// string where_json = 2;
inline void Mysql_Delete::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Delete::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Delete.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Delete::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Delete.where_json)
}
#if LANG_CXX11
inline void Mysql_Delete::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Delete.where_json)
}
#endif
inline void Mysql_Delete::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Delete.where_json)
}
inline void Mysql_Delete::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Delete.where_json)
}
inline ::std::string* Mysql_Delete::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Delete.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Delete::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Delete.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Delete::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Delete.where_json)
}

// -------------------------------------------------------------------

// Mysql_Update

// string table = 1;
inline void Mysql_Update::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.table)
  return table_.GetNoArena();
}
inline void Mysql_Update::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.table)
}
#if LANG_CXX11
inline void Mysql_Update::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.table)
}
#endif
inline void Mysql_Update::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.table)
}
inline void Mysql_Update::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.table)
}
inline ::std::string* Mysql_Update::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.table)
}

// string update_json = 2;
inline void Mysql_Update::clear_update_json() {
  update_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::update_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.update_json)
  return update_json_.GetNoArena();
}
inline void Mysql_Update::set_update_json(const ::std::string& value) {
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.update_json)
}
#if LANG_CXX11
inline void Mysql_Update::set_update_json(::std::string&& value) {
  
  update_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.update_json)
}
#endif
inline void Mysql_Update::set_update_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.update_json)
}
inline void Mysql_Update::set_update_json(const char* value, size_t size) {
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.update_json)
}
inline ::std::string* Mysql_Update::mutable_update_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.update_json)
  return update_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_update_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.update_json)
  
  return update_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_update_json(::std::string* update_json) {
  if (update_json != nullptr) {
    
  } else {
    
  }
  update_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.update_json)
}

// string where_json = 3;
inline void Mysql_Update::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Update::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.where_json)
}
#if LANG_CXX11
inline void Mysql_Update::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.where_json)
}
#endif
inline void Mysql_Update::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.where_json)
}
inline void Mysql_Update::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.where_json)
}
inline ::std::string* Mysql_Update::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.where_json)
}

// -------------------------------------------------------------------

// Mysql_Response

// string error = 1;
inline void Mysql_Response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Response::error() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Response.error)
  return error_.GetNoArena();
}
inline void Mysql_Response::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.error)
}
#if LANG_CXX11
inline void Mysql_Response::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Response.error)
}
#endif
inline void Mysql_Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Response.error)
}
inline void Mysql_Response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Response.error)
}
inline ::std::string* Mysql_Response::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Response::release_error() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Response.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Response::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Response.error)
}

// repeated string json_array = 2;
inline int Mysql_Response::json_array_size() const {
  return json_array_.size();
}
inline void Mysql_Response::clear_json_array() {
  json_array_.Clear();
}
inline const ::std::string& Mysql_Response::json_array(int index) const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Response.json_array)
  return json_array_.Get(index);
}
inline ::std::string* Mysql_Response::mutable_json_array(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Response.json_array)
  return json_array_.Mutable(index);
}
inline void Mysql_Response::set_json_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.json_array)
  json_array_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mysql_Response::set_json_array(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.json_array)
  json_array_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mysql_Response::set_json_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  json_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Response.json_array)
}
inline void Mysql_Response::set_json_array(int index, const char* value, size_t size) {
  json_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Response.json_array)
}
inline ::std::string* Mysql_Response::add_json_array() {
  // @@protoc_insertion_point(field_add_mutable:s2s.Mysql.Response.json_array)
  return json_array_.Add();
}
inline void Mysql_Response::add_json_array(const ::std::string& value) {
  json_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.Mysql.Response.json_array)
}
#if LANG_CXX11
inline void Mysql_Response::add_json_array(::std::string&& value) {
  json_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.Mysql.Response.json_array)
}
#endif
inline void Mysql_Response::add_json_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  json_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.Mysql.Response.json_array)
}
inline void Mysql_Response::add_json_array(const char* value, size_t size) {
  json_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.Mysql.Response.json_array)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Mysql_Response::json_array() const {
  // @@protoc_insertion_point(field_list:s2s.Mysql.Response.json_array)
  return json_array_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Mysql_Response::mutable_json_array() {
  // @@protoc_insertion_point(field_mutable_list:s2s.Mysql.Response.json_array)
  return &json_array_;
}

// -------------------------------------------------------------------

// Mysql

// -------------------------------------------------------------------

// NodeQuery_Request

// int32 area_id = 1;
inline void NodeQuery_Request::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 NodeQuery_Request::area_id() const {
  // @@protoc_insertion_point(field_get:s2s.NodeQuery.Request.area_id)
  return area_id_;
}
inline void NodeQuery_Request::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeQuery.Request.area_id)
}

// string service = 2;
inline void NodeQuery_Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeQuery_Request::service() const {
  // @@protoc_insertion_point(field_get:s2s.NodeQuery.Request.service)
  return service_.GetNoArena();
}
inline void NodeQuery_Request::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeQuery.Request.service)
}
#if LANG_CXX11
inline void NodeQuery_Request::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeQuery.Request.service)
}
#endif
inline void NodeQuery_Request::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeQuery.Request.service)
}
inline void NodeQuery_Request::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeQuery.Request.service)
}
inline ::std::string* NodeQuery_Request::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeQuery.Request.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeQuery_Request::release_service() {
  // @@protoc_insertion_point(field_release:s2s.NodeQuery.Request.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeQuery_Request::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeQuery.Request.service)
}

// -------------------------------------------------------------------

// NodeQuery_Response

// repeated .s2s.NodeInfo node_infos = 1;
inline int NodeQuery_Response::node_infos_size() const {
  return node_infos_.size();
}
inline void NodeQuery_Response::clear_node_infos() {
  node_infos_.Clear();
}
inline ::s2s::NodeInfo* NodeQuery_Response::mutable_node_infos(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeQuery.Response.node_infos)
  return node_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >*
NodeQuery_Response::mutable_node_infos() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeQuery.Response.node_infos)
  return &node_infos_;
}
inline const ::s2s::NodeInfo& NodeQuery_Response::node_infos(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeQuery.Response.node_infos)
  return node_infos_.Get(index);
}
inline ::s2s::NodeInfo* NodeQuery_Response::add_node_infos() {
  // @@protoc_insertion_point(field_add:s2s.NodeQuery.Response.node_infos)
  return node_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >&
NodeQuery_Response::node_infos() const {
  // @@protoc_insertion_point(field_list:s2s.NodeQuery.Response.node_infos)
  return node_infos_;
}

// -------------------------------------------------------------------

// NodeQuery

// -------------------------------------------------------------------

// HostQuery_Response

// repeated string hosts = 1;
inline int HostQuery_Response::hosts_size() const {
  return hosts_.size();
}
inline void HostQuery_Response::clear_hosts() {
  hosts_.Clear();
}
inline const ::std::string& HostQuery_Response::hosts(int index) const {
  // @@protoc_insertion_point(field_get:s2s.HostQuery.Response.hosts)
  return hosts_.Get(index);
}
inline ::std::string* HostQuery_Response::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.HostQuery.Response.hosts)
  return hosts_.Mutable(index);
}
inline void HostQuery_Response::set_hosts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.HostQuery.Response.hosts)
  hosts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HostQuery_Response::set_hosts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.HostQuery.Response.hosts)
  hosts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HostQuery_Response::set_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.HostQuery.Response.hosts)
}
inline void HostQuery_Response::set_hosts(int index, const char* value, size_t size) {
  hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.HostQuery.Response.hosts)
}
inline ::std::string* HostQuery_Response::add_hosts() {
  // @@protoc_insertion_point(field_add_mutable:s2s.HostQuery.Response.hosts)
  return hosts_.Add();
}
inline void HostQuery_Response::add_hosts(const ::std::string& value) {
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.HostQuery.Response.hosts)
}
#if LANG_CXX11
inline void HostQuery_Response::add_hosts(::std::string&& value) {
  hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.HostQuery.Response.hosts)
}
#endif
inline void HostQuery_Response::add_hosts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.HostQuery.Response.hosts)
}
inline void HostQuery_Response::add_hosts(const char* value, size_t size) {
  hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.HostQuery.Response.hosts)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
HostQuery_Response::hosts() const {
  // @@protoc_insertion_point(field_list:s2s.HostQuery.Response.hosts)
  return hosts_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
HostQuery_Response::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:s2s.HostQuery.Response.hosts)
  return &hosts_;
}

// -------------------------------------------------------------------

// HostQuery

// -------------------------------------------------------------------

// MysqlResponse

// string error = 1;
inline void MysqlResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlResponse::error() const {
  // @@protoc_insertion_point(field_get:s2s.MysqlResponse.error)
  return error_.GetNoArena();
}
inline void MysqlResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.MysqlResponse.error)
}
#if LANG_CXX11
inline void MysqlResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.MysqlResponse.error)
}
#endif
inline void MysqlResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.MysqlResponse.error)
}
inline void MysqlResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.MysqlResponse.error)
}
inline ::std::string* MysqlResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:s2s.MysqlResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlResponse::release_error() {
  // @@protoc_insertion_point(field_release:s2s.MysqlResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlResponse::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlResponse.error)
}

// repeated .google.protobuf.Any datas = 2;
inline int MysqlResponse::datas_size() const {
  return datas_.size();
}
inline ::google::protobuf::Any* MysqlResponse::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.MysqlResponse.datas)
  return datas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
MysqlResponse::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:s2s.MysqlResponse.datas)
  return &datas_;
}
inline const ::google::protobuf::Any& MysqlResponse::datas(int index) const {
  // @@protoc_insertion_point(field_get:s2s.MysqlResponse.datas)
  return datas_.Get(index);
}
inline ::google::protobuf::Any* MysqlResponse::add_datas() {
  // @@protoc_insertion_point(field_add:s2s.MysqlResponse.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
MysqlResponse::datas() const {
  // @@protoc_insertion_point(field_list:s2s.MysqlResponse.datas)
  return datas_;
}

// -------------------------------------------------------------------

// MysqlQuery_Request

// .google.protobuf.Any data = 1;
inline bool MysqlQuery_Request::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& MysqlQuery_Request::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.MysqlQuery.Request.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* MysqlQuery_Request::release_data() {
  // @@protoc_insertion_point(field_release:s2s.MysqlQuery.Request.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MysqlQuery_Request::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.MysqlQuery.Request.data)
  return data_;
}
inline void MysqlQuery_Request::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlQuery.Request.data)
}

// -------------------------------------------------------------------

// MysqlQuery

// -------------------------------------------------------------------

// MysqlAnyOper_Request

// string sql = 1;
inline void MysqlAnyOper_Request::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlAnyOper_Request::sql() const {
  // @@protoc_insertion_point(field_get:s2s.MysqlAnyOper.Request.sql)
  return sql_.GetNoArena();
}
inline void MysqlAnyOper_Request::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.MysqlAnyOper.Request.sql)
}
#if LANG_CXX11
inline void MysqlAnyOper_Request::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.MysqlAnyOper.Request.sql)
}
#endif
inline void MysqlAnyOper_Request::set_sql(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.MysqlAnyOper.Request.sql)
}
inline void MysqlAnyOper_Request::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.MysqlAnyOper.Request.sql)
}
inline ::std::string* MysqlAnyOper_Request::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:s2s.MysqlAnyOper.Request.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlAnyOper_Request::release_sql() {
  // @@protoc_insertion_point(field_release:s2s.MysqlAnyOper.Request.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlAnyOper_Request::set_allocated_sql(::std::string* sql) {
  if (sql != nullptr) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlAnyOper.Request.sql)
}

// string tab = 2;
inline void MysqlAnyOper_Request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlAnyOper_Request::tab() const {
  // @@protoc_insertion_point(field_get:s2s.MysqlAnyOper.Request.tab)
  return tab_.GetNoArena();
}
inline void MysqlAnyOper_Request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.MysqlAnyOper.Request.tab)
}
#if LANG_CXX11
inline void MysqlAnyOper_Request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.MysqlAnyOper.Request.tab)
}
#endif
inline void MysqlAnyOper_Request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.MysqlAnyOper.Request.tab)
}
inline void MysqlAnyOper_Request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.MysqlAnyOper.Request.tab)
}
inline ::std::string* MysqlAnyOper_Request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:s2s.MysqlAnyOper.Request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlAnyOper_Request::release_tab() {
  // @@protoc_insertion_point(field_release:s2s.MysqlAnyOper.Request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlAnyOper_Request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlAnyOper.Request.tab)
}

// -------------------------------------------------------------------

// MysqlAnyOper

// -------------------------------------------------------------------

// MysqlOper_Request

// .google.protobuf.Any Data = 1;
inline bool MysqlOper_Request::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& MysqlOper_Request::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.MysqlOper.Request.Data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* MysqlOper_Request::release_data() {
  // @@protoc_insertion_point(field_release:s2s.MysqlOper.Request.Data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MysqlOper_Request::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.MysqlOper.Request.Data)
  return data_;
}
inline void MysqlOper_Request::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlOper.Request.Data)
}

// -------------------------------------------------------------------

// MysqlOper

// -------------------------------------------------------------------

// AddToGate_Request

// int64 user_id = 1;
inline void AddToGate_Request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddToGate_Request::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.AddToGate.Request.user_id)
  return user_id_;
}
inline void AddToGate_Request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.AddToGate.Request.user_id)
}

// -------------------------------------------------------------------

// AddToGate_Response

// string gate_ip = 1;
inline void AddToGate_Response::clear_gate_ip() {
  gate_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddToGate_Response::gate_ip() const {
  // @@protoc_insertion_point(field_get:s2s.AddToGate.Response.gate_ip)
  return gate_ip_.GetNoArena();
}
inline void AddToGate_Response::set_gate_ip(const ::std::string& value) {
  
  gate_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.AddToGate.Response.gate_ip)
}
#if LANG_CXX11
inline void AddToGate_Response::set_gate_ip(::std::string&& value) {
  
  gate_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.AddToGate.Response.gate_ip)
}
#endif
inline void AddToGate_Response::set_gate_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gate_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.AddToGate.Response.gate_ip)
}
inline void AddToGate_Response::set_gate_ip(const char* value, size_t size) {
  
  gate_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.AddToGate.Response.gate_ip)
}
inline ::std::string* AddToGate_Response::mutable_gate_ip() {
  
  // @@protoc_insertion_point(field_mutable:s2s.AddToGate.Response.gate_ip)
  return gate_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddToGate_Response::release_gate_ip() {
  // @@protoc_insertion_point(field_release:s2s.AddToGate.Response.gate_ip)
  
  return gate_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddToGate_Response::set_allocated_gate_ip(::std::string* gate_ip) {
  if (gate_ip != nullptr) {
    
  } else {
    
  }
  gate_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gate_ip);
  // @@protoc_insertion_point(field_set_allocated:s2s.AddToGate.Response.gate_ip)
}

// int32 gate_port = 2;
inline void AddToGate_Response::clear_gate_port() {
  gate_port_ = 0;
}
inline ::google::protobuf::int32 AddToGate_Response::gate_port() const {
  // @@protoc_insertion_point(field_get:s2s.AddToGate.Response.gate_port)
  return gate_port_;
}
inline void AddToGate_Response::set_gate_port(::google::protobuf::int32 value) {
  
  gate_port_ = value;
  // @@protoc_insertion_point(field_set:s2s.AddToGate.Response.gate_port)
}

// string login_token = 3;
inline void AddToGate_Response::clear_login_token() {
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddToGate_Response::login_token() const {
  // @@protoc_insertion_point(field_get:s2s.AddToGate.Response.login_token)
  return login_token_.GetNoArena();
}
inline void AddToGate_Response::set_login_token(const ::std::string& value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.AddToGate.Response.login_token)
}
#if LANG_CXX11
inline void AddToGate_Response::set_login_token(::std::string&& value) {
  
  login_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.AddToGate.Response.login_token)
}
#endif
inline void AddToGate_Response::set_login_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.AddToGate.Response.login_token)
}
inline void AddToGate_Response::set_login_token(const char* value, size_t size) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.AddToGate.Response.login_token)
}
inline ::std::string* AddToGate_Response::mutable_login_token() {
  
  // @@protoc_insertion_point(field_mutable:s2s.AddToGate.Response.login_token)
  return login_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddToGate_Response::release_login_token() {
  // @@protoc_insertion_point(field_release:s2s.AddToGate.Response.login_token)
  
  return login_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddToGate_Response::set_allocated_login_token(::std::string* login_token) {
  if (login_token != nullptr) {
    
  } else {
    
  }
  login_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_token);
  // @@protoc_insertion_point(field_set_allocated:s2s.AddToGate.Response.login_token)
}

// -------------------------------------------------------------------

// AddToGate

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2eproto
