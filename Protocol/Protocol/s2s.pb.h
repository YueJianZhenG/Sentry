// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#ifndef PROTOBUF_INCLUDED_s2s_2eproto
#define PROTOBUF_INCLUDED_s2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2eproto();
namespace s2s {
class AddressAllot;
class AddressAllotDefaultTypeInternal;
extern AddressAllotDefaultTypeInternal _AddressAllot_default_instance_;
class AddressAllot_Request;
class AddressAllot_RequestDefaultTypeInternal;
extern AddressAllot_RequestDefaultTypeInternal _AddressAllot_Request_default_instance_;
class AddressAllot_Response;
class AddressAllot_ResponseDefaultTypeInternal;
extern AddressAllot_ResponseDefaultTypeInternal _AddressAllot_Response_default_instance_;
class Mysql;
class MysqlDefaultTypeInternal;
extern MysqlDefaultTypeInternal _Mysql_default_instance_;
class Mysql_Add;
class Mysql_AddDefaultTypeInternal;
extern Mysql_AddDefaultTypeInternal _Mysql_Add_default_instance_;
class Mysql_Delete;
class Mysql_DeleteDefaultTypeInternal;
extern Mysql_DeleteDefaultTypeInternal _Mysql_Delete_default_instance_;
class Mysql_Invoke;
class Mysql_InvokeDefaultTypeInternal;
extern Mysql_InvokeDefaultTypeInternal _Mysql_Invoke_default_instance_;
class Mysql_Query;
class Mysql_QueryDefaultTypeInternal;
extern Mysql_QueryDefaultTypeInternal _Mysql_Query_default_instance_;
class Mysql_Response;
class Mysql_ResponseDefaultTypeInternal;
extern Mysql_ResponseDefaultTypeInternal _Mysql_Response_default_instance_;
class Mysql_Save;
class Mysql_SaveDefaultTypeInternal;
extern Mysql_SaveDefaultTypeInternal _Mysql_Save_default_instance_;
class Mysql_Update;
class Mysql_UpdateDefaultTypeInternal;
extern Mysql_UpdateDefaultTypeInternal _Mysql_Update_default_instance_;
}  // namespace s2s
namespace google {
namespace protobuf {
template<> ::s2s::AddressAllot* Arena::CreateMaybeMessage<::s2s::AddressAllot>(Arena*);
template<> ::s2s::AddressAllot_Request* Arena::CreateMaybeMessage<::s2s::AddressAllot_Request>(Arena*);
template<> ::s2s::AddressAllot_Response* Arena::CreateMaybeMessage<::s2s::AddressAllot_Response>(Arena*);
template<> ::s2s::Mysql* Arena::CreateMaybeMessage<::s2s::Mysql>(Arena*);
template<> ::s2s::Mysql_Add* Arena::CreateMaybeMessage<::s2s::Mysql_Add>(Arena*);
template<> ::s2s::Mysql_Delete* Arena::CreateMaybeMessage<::s2s::Mysql_Delete>(Arena*);
template<> ::s2s::Mysql_Invoke* Arena::CreateMaybeMessage<::s2s::Mysql_Invoke>(Arena*);
template<> ::s2s::Mysql_Query* Arena::CreateMaybeMessage<::s2s::Mysql_Query>(Arena*);
template<> ::s2s::Mysql_Response* Arena::CreateMaybeMessage<::s2s::Mysql_Response>(Arena*);
template<> ::s2s::Mysql_Save* Arena::CreateMaybeMessage<::s2s::Mysql_Save>(Arena*);
template<> ::s2s::Mysql_Update* Arena::CreateMaybeMessage<::s2s::Mysql_Update>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace s2s {

// ===================================================================

class Mysql_Add :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Add) */ {
 public:
  Mysql_Add();
  virtual ~Mysql_Add();

  Mysql_Add(const Mysql_Add& from);

  inline Mysql_Add& operator=(const Mysql_Add& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Add(Mysql_Add&& from) noexcept
    : Mysql_Add() {
    *this = ::std::move(from);
  }

  inline Mysql_Add& operator=(Mysql_Add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Add* internal_default_instance() {
    return reinterpret_cast<const Mysql_Add*>(
               &_Mysql_Add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Mysql_Add* other);
  friend void swap(Mysql_Add& a, Mysql_Add& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Add* New() const final {
    return CreateMaybeMessage<Mysql_Add>(nullptr);
  }

  Mysql_Add* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Add>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Add& from);
  void MergeFrom(const Mysql_Add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Add* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Add)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Save :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Save) */ {
 public:
  Mysql_Save();
  virtual ~Mysql_Save();

  Mysql_Save(const Mysql_Save& from);

  inline Mysql_Save& operator=(const Mysql_Save& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Save(Mysql_Save&& from) noexcept
    : Mysql_Save() {
    *this = ::std::move(from);
  }

  inline Mysql_Save& operator=(Mysql_Save&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Save* internal_default_instance() {
    return reinterpret_cast<const Mysql_Save*>(
               &_Mysql_Save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Mysql_Save* other);
  friend void swap(Mysql_Save& a, Mysql_Save& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Save* New() const final {
    return CreateMaybeMessage<Mysql_Save>(nullptr);
  }

  Mysql_Save* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Save>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Save& from);
  void MergeFrom(const Mysql_Save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Save* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Save)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Query :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Query) */ {
 public:
  Mysql_Query();
  virtual ~Mysql_Query();

  Mysql_Query(const Mysql_Query& from);

  inline Mysql_Query& operator=(const Mysql_Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Query(Mysql_Query&& from) noexcept
    : Mysql_Query() {
    *this = ::std::move(from);
  }

  inline Mysql_Query& operator=(Mysql_Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Query* internal_default_instance() {
    return reinterpret_cast<const Mysql_Query*>(
               &_Mysql_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Mysql_Query* other);
  friend void swap(Mysql_Query& a, Mysql_Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Query* New() const final {
    return CreateMaybeMessage<Mysql_Query>(nullptr);
  }

  Mysql_Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Query& from);
  void MergeFrom(const Mysql_Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where_json = 2;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 2;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Query)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Delete :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Delete) */ {
 public:
  Mysql_Delete();
  virtual ~Mysql_Delete();

  Mysql_Delete(const Mysql_Delete& from);

  inline Mysql_Delete& operator=(const Mysql_Delete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Delete(Mysql_Delete&& from) noexcept
    : Mysql_Delete() {
    *this = ::std::move(from);
  }

  inline Mysql_Delete& operator=(Mysql_Delete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Delete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Delete* internal_default_instance() {
    return reinterpret_cast<const Mysql_Delete*>(
               &_Mysql_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Mysql_Delete* other);
  friend void swap(Mysql_Delete& a, Mysql_Delete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Delete* New() const final {
    return CreateMaybeMessage<Mysql_Delete>(nullptr);
  }

  Mysql_Delete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Delete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Delete& from);
  void MergeFrom(const Mysql_Delete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Delete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where_json = 2;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 2;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Delete)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Update :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Update) */ {
 public:
  Mysql_Update();
  virtual ~Mysql_Update();

  Mysql_Update(const Mysql_Update& from);

  inline Mysql_Update& operator=(const Mysql_Update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Update(Mysql_Update&& from) noexcept
    : Mysql_Update() {
    *this = ::std::move(from);
  }

  inline Mysql_Update& operator=(Mysql_Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Update* internal_default_instance() {
    return reinterpret_cast<const Mysql_Update*>(
               &_Mysql_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Mysql_Update* other);
  friend void swap(Mysql_Update& a, Mysql_Update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Update* New() const final {
    return CreateMaybeMessage<Mysql_Update>(nullptr);
  }

  Mysql_Update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Update& from);
  void MergeFrom(const Mysql_Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string update_json = 2;
  void clear_update_json();
  static const int kUpdateJsonFieldNumber = 2;
  const ::std::string& update_json() const;
  void set_update_json(const ::std::string& value);
  #if LANG_CXX11
  void set_update_json(::std::string&& value);
  #endif
  void set_update_json(const char* value);
  void set_update_json(const char* value, size_t size);
  ::std::string* mutable_update_json();
  ::std::string* release_update_json();
  void set_allocated_update_json(::std::string* update_json);

  // string where_json = 3;
  void clear_where_json();
  static const int kWhereJsonFieldNumber = 3;
  const ::std::string& where_json() const;
  void set_where_json(const ::std::string& value);
  #if LANG_CXX11
  void set_where_json(::std::string&& value);
  #endif
  void set_where_json(const char* value);
  void set_where_json(const char* value, size_t size);
  ::std::string* mutable_where_json();
  ::std::string* release_where_json();
  void set_allocated_where_json(::std::string* where_json);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Update)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr update_json_;
  ::google::protobuf::internal::ArenaStringPtr where_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Invoke :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Invoke) */ {
 public:
  Mysql_Invoke();
  virtual ~Mysql_Invoke();

  Mysql_Invoke(const Mysql_Invoke& from);

  inline Mysql_Invoke& operator=(const Mysql_Invoke& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Invoke(Mysql_Invoke&& from) noexcept
    : Mysql_Invoke() {
    *this = ::std::move(from);
  }

  inline Mysql_Invoke& operator=(Mysql_Invoke&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Invoke& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Invoke* internal_default_instance() {
    return reinterpret_cast<const Mysql_Invoke*>(
               &_Mysql_Invoke_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Mysql_Invoke* other);
  friend void swap(Mysql_Invoke& a, Mysql_Invoke& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Invoke* New() const final {
    return CreateMaybeMessage<Mysql_Invoke>(nullptr);
  }

  Mysql_Invoke* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Invoke>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Invoke& from);
  void MergeFrom(const Mysql_Invoke& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Invoke* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sql = 1;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Invoke)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql.Response) */ {
 public:
  Mysql_Response();
  virtual ~Mysql_Response();

  Mysql_Response(const Mysql_Response& from);

  inline Mysql_Response& operator=(const Mysql_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql_Response(Mysql_Response&& from) noexcept
    : Mysql_Response() {
    *this = ::std::move(from);
  }

  inline Mysql_Response& operator=(Mysql_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql_Response* internal_default_instance() {
    return reinterpret_cast<const Mysql_Response*>(
               &_Mysql_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Mysql_Response* other);
  friend void swap(Mysql_Response& a, Mysql_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql_Response* New() const final {
    return CreateMaybeMessage<Mysql_Response>(nullptr);
  }

  Mysql_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql_Response& from);
  void MergeFrom(const Mysql_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string json_array = 2;
  int json_array_size() const;
  void clear_json_array();
  static const int kJsonArrayFieldNumber = 2;
  const ::std::string& json_array(int index) const;
  ::std::string* mutable_json_array(int index);
  void set_json_array(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_json_array(int index, ::std::string&& value);
  #endif
  void set_json_array(int index, const char* value);
  void set_json_array(int index, const char* value, size_t size);
  ::std::string* add_json_array();
  void add_json_array(const ::std::string& value);
  #if LANG_CXX11
  void add_json_array(::std::string&& value);
  #endif
  void add_json_array(const char* value);
  void add_json_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& json_array() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_json_array();

  // string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:s2s.Mysql.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> json_array_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class Mysql :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.Mysql) */ {
 public:
  Mysql();
  virtual ~Mysql();

  Mysql(const Mysql& from);

  inline Mysql& operator=(const Mysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mysql(Mysql&& from) noexcept
    : Mysql() {
    *this = ::std::move(from);
  }

  inline Mysql& operator=(Mysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mysql* internal_default_instance() {
    return reinterpret_cast<const Mysql*>(
               &_Mysql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Mysql* other);
  friend void swap(Mysql& a, Mysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mysql* New() const final {
    return CreateMaybeMessage<Mysql>(nullptr);
  }

  Mysql* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mysql>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mysql& from);
  void MergeFrom(const Mysql& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mysql_Add Add;
  typedef Mysql_Save Save;
  typedef Mysql_Query Query;
  typedef Mysql_Delete Delete;
  typedef Mysql_Update Update;
  typedef Mysql_Invoke Invoke;
  typedef Mysql_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.Mysql)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class AddressAllot_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.AddressAllot.Request) */ {
 public:
  AddressAllot_Request();
  virtual ~AddressAllot_Request();

  AddressAllot_Request(const AddressAllot_Request& from);

  inline AddressAllot_Request& operator=(const AddressAllot_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressAllot_Request(AddressAllot_Request&& from) noexcept
    : AddressAllot_Request() {
    *this = ::std::move(from);
  }

  inline AddressAllot_Request& operator=(AddressAllot_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddressAllot_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressAllot_Request* internal_default_instance() {
    return reinterpret_cast<const AddressAllot_Request*>(
               &_AddressAllot_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AddressAllot_Request* other);
  friend void swap(AddressAllot_Request& a, AddressAllot_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressAllot_Request* New() const final {
    return CreateMaybeMessage<AddressAllot_Request>(nullptr);
  }

  AddressAllot_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressAllot_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressAllot_Request& from);
  void MergeFrom(const AddressAllot_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressAllot_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string login_token = 2;
  void clear_login_token();
  static const int kLoginTokenFieldNumber = 2;
  const ::std::string& login_token() const;
  void set_login_token(const ::std::string& value);
  #if LANG_CXX11
  void set_login_token(::std::string&& value);
  #endif
  void set_login_token(const char* value);
  void set_login_token(const char* value, size_t size);
  ::std::string* mutable_login_token();
  ::std::string* release_login_token();
  void set_allocated_login_token(::std::string* login_token);

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.AddressAllot.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr login_token_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class AddressAllot_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.AddressAllot.Response) */ {
 public:
  AddressAllot_Response();
  virtual ~AddressAllot_Response();

  AddressAllot_Response(const AddressAllot_Response& from);

  inline AddressAllot_Response& operator=(const AddressAllot_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressAllot_Response(AddressAllot_Response&& from) noexcept
    : AddressAllot_Response() {
    *this = ::std::move(from);
  }

  inline AddressAllot_Response& operator=(AddressAllot_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddressAllot_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressAllot_Response* internal_default_instance() {
    return reinterpret_cast<const AddressAllot_Response*>(
               &_AddressAllot_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AddressAllot_Response* other);
  friend void swap(AddressAllot_Response& a, AddressAllot_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressAllot_Response* New() const final {
    return CreateMaybeMessage<AddressAllot_Response>(nullptr);
  }

  AddressAllot_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressAllot_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressAllot_Response& from);
  void MergeFrom(const AddressAllot_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressAllot_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:s2s.AddressAllot.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class AddressAllot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.AddressAllot) */ {
 public:
  AddressAllot();
  virtual ~AddressAllot();

  AddressAllot(const AddressAllot& from);

  inline AddressAllot& operator=(const AddressAllot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressAllot(AddressAllot&& from) noexcept
    : AddressAllot() {
    *this = ::std::move(from);
  }

  inline AddressAllot& operator=(AddressAllot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddressAllot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressAllot* internal_default_instance() {
    return reinterpret_cast<const AddressAllot*>(
               &_AddressAllot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AddressAllot* other);
  friend void swap(AddressAllot& a, AddressAllot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressAllot* New() const final {
    return CreateMaybeMessage<AddressAllot>(nullptr);
  }

  AddressAllot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressAllot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressAllot& from);
  void MergeFrom(const AddressAllot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressAllot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddressAllot_Request Request;
  typedef AddressAllot_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.AddressAllot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mysql_Add

// string table = 1;
inline void Mysql_Add::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Add::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Add.table)
  return table_.GetNoArena();
}
inline void Mysql_Add::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Add.table)
}
#if LANG_CXX11
inline void Mysql_Add::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Add.table)
}
#endif
inline void Mysql_Add::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Add.table)
}
inline void Mysql_Add::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Add.table)
}
inline ::std::string* Mysql_Add::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Add.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Add::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Add.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Add::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Add.table)
}

// .google.protobuf.Any data = 2;
inline bool Mysql_Add::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& Mysql_Add::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.Mysql.Add.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Mysql_Add::release_data() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Add.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Mysql_Add::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Add.data)
  return data_;
}
inline void Mysql_Add::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Add.data)
}

// -------------------------------------------------------------------

// Mysql_Save

// string table = 1;
inline void Mysql_Save::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Save::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Save.table)
  return table_.GetNoArena();
}
inline void Mysql_Save::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Save.table)
}
#if LANG_CXX11
inline void Mysql_Save::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Save.table)
}
#endif
inline void Mysql_Save::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Save.table)
}
inline void Mysql_Save::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Save.table)
}
inline ::std::string* Mysql_Save::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Save.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Save::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Save.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Save::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Save.table)
}

// .google.protobuf.Any data = 2;
inline bool Mysql_Save::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& Mysql_Save::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.Mysql.Save.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Mysql_Save::release_data() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Save.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Mysql_Save::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Save.data)
  return data_;
}
inline void Mysql_Save::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Save.data)
}

// -------------------------------------------------------------------

// Mysql_Query

// string table = 1;
inline void Mysql_Query::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Query::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Query.table)
  return table_.GetNoArena();
}
inline void Mysql_Query::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Query.table)
}
#if LANG_CXX11
inline void Mysql_Query::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Query.table)
}
#endif
inline void Mysql_Query::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Query.table)
}
inline void Mysql_Query::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Query.table)
}
inline ::std::string* Mysql_Query::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Query.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Query::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Query.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Query::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Query.table)
}

// string where_json = 2;
inline void Mysql_Query::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Query::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Query.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Query::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Query.where_json)
}
#if LANG_CXX11
inline void Mysql_Query::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Query.where_json)
}
#endif
inline void Mysql_Query::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Query.where_json)
}
inline void Mysql_Query::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Query.where_json)
}
inline ::std::string* Mysql_Query::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Query.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Query::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Query.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Query::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Query.where_json)
}

// -------------------------------------------------------------------

// Mysql_Delete

// string table = 1;
inline void Mysql_Delete::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Delete::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Delete.table)
  return table_.GetNoArena();
}
inline void Mysql_Delete::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Delete.table)
}
#if LANG_CXX11
inline void Mysql_Delete::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Delete.table)
}
#endif
inline void Mysql_Delete::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Delete.table)
}
inline void Mysql_Delete::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Delete.table)
}
inline ::std::string* Mysql_Delete::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Delete.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Delete::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Delete.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Delete::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Delete.table)
}

// string where_json = 2;
inline void Mysql_Delete::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Delete::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Delete.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Delete::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Delete.where_json)
}
#if LANG_CXX11
inline void Mysql_Delete::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Delete.where_json)
}
#endif
inline void Mysql_Delete::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Delete.where_json)
}
inline void Mysql_Delete::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Delete.where_json)
}
inline ::std::string* Mysql_Delete::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Delete.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Delete::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Delete.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Delete::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Delete.where_json)
}

// -------------------------------------------------------------------

// Mysql_Update

// string table = 1;
inline void Mysql_Update::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::table() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.table)
  return table_.GetNoArena();
}
inline void Mysql_Update::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.table)
}
#if LANG_CXX11
inline void Mysql_Update::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.table)
}
#endif
inline void Mysql_Update::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.table)
}
inline void Mysql_Update::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.table)
}
inline ::std::string* Mysql_Update::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_table() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.table)
}

// string update_json = 2;
inline void Mysql_Update::clear_update_json() {
  update_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::update_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.update_json)
  return update_json_.GetNoArena();
}
inline void Mysql_Update::set_update_json(const ::std::string& value) {
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.update_json)
}
#if LANG_CXX11
inline void Mysql_Update::set_update_json(::std::string&& value) {
  
  update_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.update_json)
}
#endif
inline void Mysql_Update::set_update_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.update_json)
}
inline void Mysql_Update::set_update_json(const char* value, size_t size) {
  
  update_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.update_json)
}
inline ::std::string* Mysql_Update::mutable_update_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.update_json)
  return update_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_update_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.update_json)
  
  return update_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_update_json(::std::string* update_json) {
  if (update_json != nullptr) {
    
  } else {
    
  }
  update_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.update_json)
}

// string where_json = 3;
inline void Mysql_Update::clear_where_json() {
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Update::where_json() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Update.where_json)
  return where_json_.GetNoArena();
}
inline void Mysql_Update::set_where_json(const ::std::string& value) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Update.where_json)
}
#if LANG_CXX11
inline void Mysql_Update::set_where_json(::std::string&& value) {
  
  where_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Update.where_json)
}
#endif
inline void Mysql_Update::set_where_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Update.where_json)
}
inline void Mysql_Update::set_where_json(const char* value, size_t size) {
  
  where_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Update.where_json)
}
inline ::std::string* Mysql_Update::mutable_where_json() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Update.where_json)
  return where_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Update::release_where_json() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Update.where_json)
  
  return where_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Update::set_allocated_where_json(::std::string* where_json) {
  if (where_json != nullptr) {
    
  } else {
    
  }
  where_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_json);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Update.where_json)
}

// -------------------------------------------------------------------

// Mysql_Invoke

// string sql = 1;
inline void Mysql_Invoke::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Invoke::sql() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Invoke.sql)
  return sql_.GetNoArena();
}
inline void Mysql_Invoke::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Invoke.sql)
}
#if LANG_CXX11
inline void Mysql_Invoke::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Invoke.sql)
}
#endif
inline void Mysql_Invoke::set_sql(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Invoke.sql)
}
inline void Mysql_Invoke::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Invoke.sql)
}
inline ::std::string* Mysql_Invoke::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Invoke.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Invoke::release_sql() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Invoke.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Invoke::set_allocated_sql(::std::string* sql) {
  if (sql != nullptr) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Invoke.sql)
}

// -------------------------------------------------------------------

// Mysql_Response

// string error = 1;
inline void Mysql_Response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mysql_Response::error() const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Response.error)
  return error_.GetNoArena();
}
inline void Mysql_Response::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.error)
}
#if LANG_CXX11
inline void Mysql_Response::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.Mysql.Response.error)
}
#endif
inline void Mysql_Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Response.error)
}
inline void Mysql_Response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Response.error)
}
inline ::std::string* Mysql_Response::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mysql_Response::release_error() {
  // @@protoc_insertion_point(field_release:s2s.Mysql.Response.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mysql_Response::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:s2s.Mysql.Response.error)
}

// repeated string json_array = 2;
inline int Mysql_Response::json_array_size() const {
  return json_array_.size();
}
inline void Mysql_Response::clear_json_array() {
  json_array_.Clear();
}
inline const ::std::string& Mysql_Response::json_array(int index) const {
  // @@protoc_insertion_point(field_get:s2s.Mysql.Response.json_array)
  return json_array_.Get(index);
}
inline ::std::string* Mysql_Response::mutable_json_array(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.Mysql.Response.json_array)
  return json_array_.Mutable(index);
}
inline void Mysql_Response::set_json_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.json_array)
  json_array_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mysql_Response::set_json_array(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.Mysql.Response.json_array)
  json_array_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mysql_Response::set_json_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  json_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.Mysql.Response.json_array)
}
inline void Mysql_Response::set_json_array(int index, const char* value, size_t size) {
  json_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.Mysql.Response.json_array)
}
inline ::std::string* Mysql_Response::add_json_array() {
  // @@protoc_insertion_point(field_add_mutable:s2s.Mysql.Response.json_array)
  return json_array_.Add();
}
inline void Mysql_Response::add_json_array(const ::std::string& value) {
  json_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.Mysql.Response.json_array)
}
#if LANG_CXX11
inline void Mysql_Response::add_json_array(::std::string&& value) {
  json_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.Mysql.Response.json_array)
}
#endif
inline void Mysql_Response::add_json_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  json_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.Mysql.Response.json_array)
}
inline void Mysql_Response::add_json_array(const char* value, size_t size) {
  json_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.Mysql.Response.json_array)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Mysql_Response::json_array() const {
  // @@protoc_insertion_point(field_list:s2s.Mysql.Response.json_array)
  return json_array_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Mysql_Response::mutable_json_array() {
  // @@protoc_insertion_point(field_mutable_list:s2s.Mysql.Response.json_array)
  return &json_array_;
}

// -------------------------------------------------------------------

// Mysql

// -------------------------------------------------------------------

// AddressAllot_Request

// int64 user_id = 1;
inline void AddressAllot_Request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddressAllot_Request::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.AddressAllot.Request.user_id)
  return user_id_;
}
inline void AddressAllot_Request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.AddressAllot.Request.user_id)
}

// string login_token = 2;
inline void AddressAllot_Request::clear_login_token() {
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressAllot_Request::login_token() const {
  // @@protoc_insertion_point(field_get:s2s.AddressAllot.Request.login_token)
  return login_token_.GetNoArena();
}
inline void AddressAllot_Request::set_login_token(const ::std::string& value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.AddressAllot.Request.login_token)
}
#if LANG_CXX11
inline void AddressAllot_Request::set_login_token(::std::string&& value) {
  
  login_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.AddressAllot.Request.login_token)
}
#endif
inline void AddressAllot_Request::set_login_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.AddressAllot.Request.login_token)
}
inline void AddressAllot_Request::set_login_token(const char* value, size_t size) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.AddressAllot.Request.login_token)
}
inline ::std::string* AddressAllot_Request::mutable_login_token() {
  
  // @@protoc_insertion_point(field_mutable:s2s.AddressAllot.Request.login_token)
  return login_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressAllot_Request::release_login_token() {
  // @@protoc_insertion_point(field_release:s2s.AddressAllot.Request.login_token)
  
  return login_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressAllot_Request::set_allocated_login_token(::std::string* login_token) {
  if (login_token != nullptr) {
    
  } else {
    
  }
  login_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_token);
  // @@protoc_insertion_point(field_set_allocated:s2s.AddressAllot.Request.login_token)
}

// -------------------------------------------------------------------

// AddressAllot_Response

// string address = 1;
inline void AddressAllot_Response::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressAllot_Response::address() const {
  // @@protoc_insertion_point(field_get:s2s.AddressAllot.Response.address)
  return address_.GetNoArena();
}
inline void AddressAllot_Response::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.AddressAllot.Response.address)
}
#if LANG_CXX11
inline void AddressAllot_Response::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.AddressAllot.Response.address)
}
#endif
inline void AddressAllot_Response::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.AddressAllot.Response.address)
}
inline void AddressAllot_Response::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.AddressAllot.Response.address)
}
inline ::std::string* AddressAllot_Response::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.AddressAllot.Response.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressAllot_Response::release_address() {
  // @@protoc_insertion_point(field_release:s2s.AddressAllot.Response.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressAllot_Response::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.AddressAllot.Response.address)
}

// -------------------------------------------------------------------

// AddressAllot

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2eproto
