// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s.proto

#ifndef PROTOBUF_INCLUDED_s2s_2eproto
#define PROTOBUF_INCLUDED_s2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2eproto();
namespace s2s {
class MysqlOper;
class MysqlOperDefaultTypeInternal;
extern MysqlOperDefaultTypeInternal _MysqlOper_default_instance_;
class MysqlOper_Request;
class MysqlOper_RequestDefaultTypeInternal;
extern MysqlOper_RequestDefaultTypeInternal _MysqlOper_Request_default_instance_;
class MysqlOper_Response;
class MysqlOper_ResponseDefaultTypeInternal;
extern MysqlOper_ResponseDefaultTypeInternal _MysqlOper_Response_default_instance_;
class MysqlQuery;
class MysqlQueryDefaultTypeInternal;
extern MysqlQueryDefaultTypeInternal _MysqlQuery_default_instance_;
class MysqlQuery_Request;
class MysqlQuery_RequestDefaultTypeInternal;
extern MysqlQuery_RequestDefaultTypeInternal _MysqlQuery_Request_default_instance_;
class MysqlQuery_Response;
class MysqlQuery_ResponseDefaultTypeInternal;
extern MysqlQuery_ResponseDefaultTypeInternal _MysqlQuery_Response_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeQuery;
class NodeQueryDefaultTypeInternal;
extern NodeQueryDefaultTypeInternal _NodeQuery_default_instance_;
class NodeQuery_Request;
class NodeQuery_RequestDefaultTypeInternal;
extern NodeQuery_RequestDefaultTypeInternal _NodeQuery_Request_default_instance_;
class NodeQuery_Response;
class NodeQuery_ResponseDefaultTypeInternal;
extern NodeQuery_ResponseDefaultTypeInternal _NodeQuery_Response_default_instance_;
class NodeRegister;
class NodeRegisterDefaultTypeInternal;
extern NodeRegisterDefaultTypeInternal _NodeRegister_default_instance_;
class NodeRegister_Request;
class NodeRegister_RequestDefaultTypeInternal;
extern NodeRegister_RequestDefaultTypeInternal _NodeRegister_Request_default_instance_;
class NodeRegister_Response;
class NodeRegister_ResponseDefaultTypeInternal;
extern NodeRegister_ResponseDefaultTypeInternal _NodeRegister_Response_default_instance_;
}  // namespace s2s
namespace google {
namespace protobuf {
template<> ::s2s::MysqlOper* Arena::CreateMaybeMessage<::s2s::MysqlOper>(Arena*);
template<> ::s2s::MysqlOper_Request* Arena::CreateMaybeMessage<::s2s::MysqlOper_Request>(Arena*);
template<> ::s2s::MysqlOper_Response* Arena::CreateMaybeMessage<::s2s::MysqlOper_Response>(Arena*);
template<> ::s2s::MysqlQuery* Arena::CreateMaybeMessage<::s2s::MysqlQuery>(Arena*);
template<> ::s2s::MysqlQuery_Request* Arena::CreateMaybeMessage<::s2s::MysqlQuery_Request>(Arena*);
template<> ::s2s::MysqlQuery_Response* Arena::CreateMaybeMessage<::s2s::MysqlQuery_Response>(Arena*);
template<> ::s2s::NodeInfo* Arena::CreateMaybeMessage<::s2s::NodeInfo>(Arena*);
template<> ::s2s::NodeQuery* Arena::CreateMaybeMessage<::s2s::NodeQuery>(Arena*);
template<> ::s2s::NodeQuery_Request* Arena::CreateMaybeMessage<::s2s::NodeQuery_Request>(Arena*);
template<> ::s2s::NodeQuery_Response* Arena::CreateMaybeMessage<::s2s::NodeQuery_Response>(Arena*);
template<> ::s2s::NodeRegister* Arena::CreateMaybeMessage<::s2s::NodeRegister>(Arena*);
template<> ::s2s::NodeRegister_Request* Arena::CreateMaybeMessage<::s2s::NodeRegister_Request>(Arena*);
template<> ::s2s::NodeRegister_Response* Arena::CreateMaybeMessage<::s2s::NodeRegister_Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace s2s {

// ===================================================================

class NodeRegister_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister.Request) */ {
 public:
  NodeRegister_Request();
  virtual ~NodeRegister_Request();

  NodeRegister_Request(const NodeRegister_Request& from);

  inline NodeRegister_Request& operator=(const NodeRegister_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister_Request(NodeRegister_Request&& from) noexcept
    : NodeRegister_Request() {
    *this = ::std::move(from);
  }

  inline NodeRegister_Request& operator=(NodeRegister_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister_Request* internal_default_instance() {
    return reinterpret_cast<const NodeRegister_Request*>(
               &_NodeRegister_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NodeRegister_Request* other);
  friend void swap(NodeRegister_Request& a, NodeRegister_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister_Request* New() const final {
    return CreateMaybeMessage<NodeRegister_Request>(nullptr);
  }

  NodeRegister_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister_Request& from);
  void MergeFrom(const NodeRegister_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Services = 5;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 5;
  const ::std::string& services(int index) const;
  ::std::string* mutable_services(int index);
  void set_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_services(int index, ::std::string&& value);
  #endif
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  ::std::string* add_services();
  void add_services(const ::std::string& value);
  #if LANG_CXX11
  void add_services(::std::string&& value);
  #endif
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_services();

  // string Address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string ServerName = 4;
  void clear_servername();
  static const int kServerNameFieldNumber = 4;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // int32 AreaId = 1;
  void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // int32 NodeId = 2;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 nodeid() const;
  void set_nodeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> services_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 nodeid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeRegister_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister.Response) */ {
 public:
  NodeRegister_Response();
  virtual ~NodeRegister_Response();

  NodeRegister_Response(const NodeRegister_Response& from);

  inline NodeRegister_Response& operator=(const NodeRegister_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister_Response(NodeRegister_Response&& from) noexcept
    : NodeRegister_Response() {
    *this = ::std::move(from);
  }

  inline NodeRegister_Response& operator=(NodeRegister_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister_Response* internal_default_instance() {
    return reinterpret_cast<const NodeRegister_Response*>(
               &_NodeRegister_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeRegister_Response* other);
  friend void swap(NodeRegister_Response& a, NodeRegister_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister_Response* New() const final {
    return CreateMaybeMessage<NodeRegister_Response>(nullptr);
  }

  NodeRegister_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister_Response& from);
  void MergeFrom(const NodeRegister_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeRegister :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeRegister) */ {
 public:
  NodeRegister();
  virtual ~NodeRegister();

  NodeRegister(const NodeRegister& from);

  inline NodeRegister& operator=(const NodeRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister(NodeRegister&& from) noexcept
    : NodeRegister() {
    *this = ::std::move(from);
  }

  inline NodeRegister& operator=(NodeRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister* internal_default_instance() {
    return reinterpret_cast<const NodeRegister*>(
               &_NodeRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeRegister* other);
  friend void swap(NodeRegister& a, NodeRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister* New() const final {
    return CreateMaybeMessage<NodeRegister>(nullptr);
  }

  NodeRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister& from);
  void MergeFrom(const NodeRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeRegister_Request Request;
  typedef NodeRegister_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.NodeRegister)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Services = 4;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 4;
  const ::std::string& services(int index) const;
  ::std::string* mutable_services(int index);
  void set_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_services(int index, ::std::string&& value);
  #endif
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  ::std::string* add_services();
  void add_services(const ::std::string& value);
  #if LANG_CXX11
  void add_services(::std::string&& value);
  #endif
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_services();

  // string Address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string ServerName = 3;
  void clear_servername();
  static const int kServerNameFieldNumber = 3;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // int32 Uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> services_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::int32 uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeQuery_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeQuery.Request) */ {
 public:
  NodeQuery_Request();
  virtual ~NodeQuery_Request();

  NodeQuery_Request(const NodeQuery_Request& from);

  inline NodeQuery_Request& operator=(const NodeQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeQuery_Request(NodeQuery_Request&& from) noexcept
    : NodeQuery_Request() {
    *this = ::std::move(from);
  }

  inline NodeQuery_Request& operator=(NodeQuery_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeQuery_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeQuery_Request* internal_default_instance() {
    return reinterpret_cast<const NodeQuery_Request*>(
               &_NodeQuery_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NodeQuery_Request* other);
  friend void swap(NodeQuery_Request& a, NodeQuery_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeQuery_Request* New() const final {
    return CreateMaybeMessage<NodeQuery_Request>(nullptr);
  }

  NodeQuery_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeQuery_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeQuery_Request& from);
  void MergeFrom(const NodeQuery_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeQuery_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Service = 2;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // int32 AreaId = 1;
  void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.NodeQuery.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::int32 areaid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeQuery_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeQuery.Response) */ {
 public:
  NodeQuery_Response();
  virtual ~NodeQuery_Response();

  NodeQuery_Response(const NodeQuery_Response& from);

  inline NodeQuery_Response& operator=(const NodeQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeQuery_Response(NodeQuery_Response&& from) noexcept
    : NodeQuery_Response() {
    *this = ::std::move(from);
  }

  inline NodeQuery_Response& operator=(NodeQuery_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeQuery_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeQuery_Response* internal_default_instance() {
    return reinterpret_cast<const NodeQuery_Response*>(
               &_NodeQuery_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NodeQuery_Response* other);
  friend void swap(NodeQuery_Response& a, NodeQuery_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeQuery_Response* New() const final {
    return CreateMaybeMessage<NodeQuery_Response>(nullptr);
  }

  NodeQuery_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeQuery_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeQuery_Response& from);
  void MergeFrom(const NodeQuery_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeQuery_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .s2s.NodeInfo NodeInfos = 1;
  int nodeinfos_size() const;
  void clear_nodeinfos();
  static const int kNodeInfosFieldNumber = 1;
  ::s2s::NodeInfo* mutable_nodeinfos(int index);
  ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >*
      mutable_nodeinfos();
  const ::s2s::NodeInfo& nodeinfos(int index) const;
  ::s2s::NodeInfo* add_nodeinfos();
  const ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >&
      nodeinfos() const;

  // @@protoc_insertion_point(class_scope:s2s.NodeQuery.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo > nodeinfos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class NodeQuery :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.NodeQuery) */ {
 public:
  NodeQuery();
  virtual ~NodeQuery();

  NodeQuery(const NodeQuery& from);

  inline NodeQuery& operator=(const NodeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeQuery(NodeQuery&& from) noexcept
    : NodeQuery() {
    *this = ::std::move(from);
  }

  inline NodeQuery& operator=(NodeQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeQuery* internal_default_instance() {
    return reinterpret_cast<const NodeQuery*>(
               &_NodeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NodeQuery* other);
  friend void swap(NodeQuery& a, NodeQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeQuery* New() const final {
    return CreateMaybeMessage<NodeQuery>(nullptr);
  }

  NodeQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeQuery& from);
  void MergeFrom(const NodeQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeQuery_Request Request;
  typedef NodeQuery_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.NodeQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlQuery_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlQuery.Request) */ {
 public:
  MysqlQuery_Request();
  virtual ~MysqlQuery_Request();

  MysqlQuery_Request(const MysqlQuery_Request& from);

  inline MysqlQuery_Request& operator=(const MysqlQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlQuery_Request(MysqlQuery_Request&& from) noexcept
    : MysqlQuery_Request() {
    *this = ::std::move(from);
  }

  inline MysqlQuery_Request& operator=(MysqlQuery_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlQuery_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlQuery_Request* internal_default_instance() {
    return reinterpret_cast<const MysqlQuery_Request*>(
               &_MysqlQuery_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MysqlQuery_Request* other);
  friend void swap(MysqlQuery_Request& a, MysqlQuery_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlQuery_Request* New() const final {
    return CreateMaybeMessage<MysqlQuery_Request>(nullptr);
  }

  MysqlQuery_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlQuery_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlQuery_Request& from);
  void MergeFrom(const MysqlQuery_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQuery_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any Data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.MysqlQuery.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlQuery_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlQuery.Response) */ {
 public:
  MysqlQuery_Response();
  virtual ~MysqlQuery_Response();

  MysqlQuery_Response(const MysqlQuery_Response& from);

  inline MysqlQuery_Response& operator=(const MysqlQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlQuery_Response(MysqlQuery_Response&& from) noexcept
    : MysqlQuery_Response() {
    *this = ::std::move(from);
  }

  inline MysqlQuery_Response& operator=(MysqlQuery_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlQuery_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlQuery_Response* internal_default_instance() {
    return reinterpret_cast<const MysqlQuery_Response*>(
               &_MysqlQuery_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MysqlQuery_Response* other);
  friend void swap(MysqlQuery_Response& a, MysqlQuery_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlQuery_Response* New() const final {
    return CreateMaybeMessage<MysqlQuery_Response>(nullptr);
  }

  MysqlQuery_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlQuery_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlQuery_Response& from);
  void MergeFrom(const MysqlQuery_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQuery_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any QueryDatas = 2;
  int querydatas_size() const;
  void clear_querydatas();
  static const int kQueryDatasFieldNumber = 2;
  ::google::protobuf::Any* mutable_querydatas(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_querydatas();
  const ::google::protobuf::Any& querydatas(int index) const;
  ::google::protobuf::Any* add_querydatas();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      querydatas() const;

  // string ErrotStr = 1;
  void clear_errotstr();
  static const int kErrotStrFieldNumber = 1;
  const ::std::string& errotstr() const;
  void set_errotstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errotstr(::std::string&& value);
  #endif
  void set_errotstr(const char* value);
  void set_errotstr(const char* value, size_t size);
  ::std::string* mutable_errotstr();
  ::std::string* release_errotstr();
  void set_allocated_errotstr(::std::string* errotstr);

  // @@protoc_insertion_point(class_scope:s2s.MysqlQuery.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > querydatas_;
  ::google::protobuf::internal::ArenaStringPtr errotstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlQuery :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlQuery) */ {
 public:
  MysqlQuery();
  virtual ~MysqlQuery();

  MysqlQuery(const MysqlQuery& from);

  inline MysqlQuery& operator=(const MysqlQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlQuery(MysqlQuery&& from) noexcept
    : MysqlQuery() {
    *this = ::std::move(from);
  }

  inline MysqlQuery& operator=(MysqlQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlQuery* internal_default_instance() {
    return reinterpret_cast<const MysqlQuery*>(
               &_MysqlQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MysqlQuery* other);
  friend void swap(MysqlQuery& a, MysqlQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlQuery* New() const final {
    return CreateMaybeMessage<MysqlQuery>(nullptr);
  }

  MysqlQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlQuery& from);
  void MergeFrom(const MysqlQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MysqlQuery_Request Request;
  typedef MysqlQuery_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.MysqlQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlOper_Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlOper.Request) */ {
 public:
  MysqlOper_Request();
  virtual ~MysqlOper_Request();

  MysqlOper_Request(const MysqlOper_Request& from);

  inline MysqlOper_Request& operator=(const MysqlOper_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlOper_Request(MysqlOper_Request&& from) noexcept
    : MysqlOper_Request() {
    *this = ::std::move(from);
  }

  inline MysqlOper_Request& operator=(MysqlOper_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlOper_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlOper_Request* internal_default_instance() {
    return reinterpret_cast<const MysqlOper_Request*>(
               &_MysqlOper_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(MysqlOper_Request* other);
  friend void swap(MysqlOper_Request& a, MysqlOper_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlOper_Request* New() const final {
    return CreateMaybeMessage<MysqlOper_Request>(nullptr);
  }

  MysqlOper_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlOper_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlOper_Request& from);
  void MergeFrom(const MysqlOper_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlOper_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any Data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:s2s.MysqlOper.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlOper_Response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlOper.Response) */ {
 public:
  MysqlOper_Response();
  virtual ~MysqlOper_Response();

  MysqlOper_Response(const MysqlOper_Response& from);

  inline MysqlOper_Response& operator=(const MysqlOper_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlOper_Response(MysqlOper_Response&& from) noexcept
    : MysqlOper_Response() {
    *this = ::std::move(from);
  }

  inline MysqlOper_Response& operator=(MysqlOper_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlOper_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlOper_Response* internal_default_instance() {
    return reinterpret_cast<const MysqlOper_Response*>(
               &_MysqlOper_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(MysqlOper_Response* other);
  friend void swap(MysqlOper_Response& a, MysqlOper_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlOper_Response* New() const final {
    return CreateMaybeMessage<MysqlOper_Response>(nullptr);
  }

  MysqlOper_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlOper_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlOper_Response& from);
  void MergeFrom(const MysqlOper_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlOper_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ErrorStr = 1;
  void clear_errorstr();
  static const int kErrorStrFieldNumber = 1;
  const ::std::string& errorstr() const;
  void set_errorstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errorstr(::std::string&& value);
  #endif
  void set_errorstr(const char* value);
  void set_errorstr(const char* value, size_t size);
  ::std::string* mutable_errorstr();
  ::std::string* release_errorstr();
  void set_allocated_errorstr(::std::string* errorstr);

  // @@protoc_insertion_point(class_scope:s2s.MysqlOper.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errorstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// -------------------------------------------------------------------

class MysqlOper :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.MysqlOper) */ {
 public:
  MysqlOper();
  virtual ~MysqlOper();

  MysqlOper(const MysqlOper& from);

  inline MysqlOper& operator=(const MysqlOper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlOper(MysqlOper&& from) noexcept
    : MysqlOper() {
    *this = ::std::move(from);
  }

  inline MysqlOper& operator=(MysqlOper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MysqlOper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlOper* internal_default_instance() {
    return reinterpret_cast<const MysqlOper*>(
               &_MysqlOper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(MysqlOper* other);
  friend void swap(MysqlOper& a, MysqlOper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlOper* New() const final {
    return CreateMaybeMessage<MysqlOper>(nullptr);
  }

  MysqlOper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlOper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlOper& from);
  void MergeFrom(const MysqlOper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlOper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MysqlOper_Request Request;
  typedef MysqlOper_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.MysqlOper)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeRegister_Request

// int32 AreaId = 1;
inline void NodeRegister_Request::clear_areaid() {
  areaid_ = 0;
}
inline ::google::protobuf::int32 NodeRegister_Request::areaid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.AreaId)
  return areaid_;
}
inline void NodeRegister_Request::set_areaid(::google::protobuf::int32 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.AreaId)
}

// int32 NodeId = 2;
inline void NodeRegister_Request::clear_nodeid() {
  nodeid_ = 0;
}
inline ::google::protobuf::int32 NodeRegister_Request::nodeid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.NodeId)
  return nodeid_;
}
inline void NodeRegister_Request::set_nodeid(::google::protobuf::int32 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.NodeId)
}

// string Address = 3;
inline void NodeRegister_Request::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeRegister_Request::address() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.Address)
  return address_.GetNoArena();
}
inline void NodeRegister_Request::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.Address)
}
#if LANG_CXX11
inline void NodeRegister_Request::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeRegister.Request.Address)
}
#endif
inline void NodeRegister_Request::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeRegister.Request.Address)
}
inline void NodeRegister_Request::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeRegister.Request.Address)
}
inline ::std::string* NodeRegister_Request::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Request.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRegister_Request::release_address() {
  // @@protoc_insertion_point(field_release:s2s.NodeRegister.Request.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRegister_Request::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeRegister.Request.Address)
}

// string ServerName = 4;
inline void NodeRegister_Request::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeRegister_Request::servername() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.ServerName)
  return servername_.GetNoArena();
}
inline void NodeRegister_Request::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.ServerName)
}
#if LANG_CXX11
inline void NodeRegister_Request::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeRegister.Request.ServerName)
}
#endif
inline void NodeRegister_Request::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeRegister.Request.ServerName)
}
inline void NodeRegister_Request::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeRegister.Request.ServerName)
}
inline ::std::string* NodeRegister_Request::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Request.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRegister_Request::release_servername() {
  // @@protoc_insertion_point(field_release:s2s.NodeRegister.Request.ServerName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRegister_Request::set_allocated_servername(::std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeRegister.Request.ServerName)
}

// repeated string Services = 5;
inline int NodeRegister_Request::services_size() const {
  return services_.size();
}
inline void NodeRegister_Request::clear_services() {
  services_.Clear();
}
inline const ::std::string& NodeRegister_Request::services(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Request.Services)
  return services_.Get(index);
}
inline ::std::string* NodeRegister_Request::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeRegister.Request.Services)
  return services_.Mutable(index);
}
inline void NodeRegister_Request::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.Services)
  services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeRegister_Request::set_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Request.Services)
  services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeRegister_Request::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.NodeRegister.Request.Services)
}
inline void NodeRegister_Request::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeRegister.Request.Services)
}
inline ::std::string* NodeRegister_Request::add_services() {
  // @@protoc_insertion_point(field_add_mutable:s2s.NodeRegister.Request.Services)
  return services_.Add();
}
inline void NodeRegister_Request::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.NodeRegister.Request.Services)
}
#if LANG_CXX11
inline void NodeRegister_Request::add_services(::std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.NodeRegister.Request.Services)
}
#endif
inline void NodeRegister_Request::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.NodeRegister.Request.Services)
}
inline void NodeRegister_Request::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.NodeRegister.Request.Services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodeRegister_Request::services() const {
  // @@protoc_insertion_point(field_list:s2s.NodeRegister.Request.Services)
  return services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodeRegister_Request::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeRegister.Request.Services)
  return &services_;
}

// -------------------------------------------------------------------

// NodeRegister_Response

// int32 Uid = 1;
inline void NodeRegister_Response::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 NodeRegister_Response::uid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeRegister.Response.Uid)
  return uid_;
}
inline void NodeRegister_Response::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeRegister.Response.Uid)
}

// -------------------------------------------------------------------

// NodeRegister

// -------------------------------------------------------------------

// NodeInfo

// int32 Uid = 1;
inline void NodeInfo::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::uid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.Uid)
  return uid_;
}
inline void NodeInfo::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.Uid)
}

// string Address = 2;
inline void NodeInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::address() const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.Address)
  return address_.GetNoArena();
}
inline void NodeInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.Address)
}
#if LANG_CXX11
inline void NodeInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeInfo.Address)
}
#endif
inline void NodeInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeInfo.Address)
}
inline void NodeInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeInfo.Address)
}
inline ::std::string* NodeInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeInfo.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_address() {
  // @@protoc_insertion_point(field_release:s2s.NodeInfo.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeInfo.Address)
}

// string ServerName = 3;
inline void NodeInfo::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::servername() const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.ServerName)
  return servername_.GetNoArena();
}
inline void NodeInfo::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.ServerName)
}
#if LANG_CXX11
inline void NodeInfo::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeInfo.ServerName)
}
#endif
inline void NodeInfo::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeInfo.ServerName)
}
inline void NodeInfo::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeInfo.ServerName)
}
inline ::std::string* NodeInfo::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeInfo.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_servername() {
  // @@protoc_insertion_point(field_release:s2s.NodeInfo.ServerName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_servername(::std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeInfo.ServerName)
}

// repeated string Services = 4;
inline int NodeInfo::services_size() const {
  return services_.size();
}
inline void NodeInfo::clear_services() {
  services_.Clear();
}
inline const ::std::string& NodeInfo::services(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeInfo.Services)
  return services_.Get(index);
}
inline ::std::string* NodeInfo::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeInfo.Services)
  return services_.Mutable(index);
}
inline void NodeInfo::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.Services)
  services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeInfo::set_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.NodeInfo.Services)
  services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeInfo::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.NodeInfo.Services)
}
inline void NodeInfo::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeInfo.Services)
}
inline ::std::string* NodeInfo::add_services() {
  // @@protoc_insertion_point(field_add_mutable:s2s.NodeInfo.Services)
  return services_.Add();
}
inline void NodeInfo::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.NodeInfo.Services)
}
#if LANG_CXX11
inline void NodeInfo::add_services(::std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.NodeInfo.Services)
}
#endif
inline void NodeInfo::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.NodeInfo.Services)
}
inline void NodeInfo::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.NodeInfo.Services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodeInfo::services() const {
  // @@protoc_insertion_point(field_list:s2s.NodeInfo.Services)
  return services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodeInfo::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeInfo.Services)
  return &services_;
}

// -------------------------------------------------------------------

// NodeQuery_Request

// int32 AreaId = 1;
inline void NodeQuery_Request::clear_areaid() {
  areaid_ = 0;
}
inline ::google::protobuf::int32 NodeQuery_Request::areaid() const {
  // @@protoc_insertion_point(field_get:s2s.NodeQuery.Request.AreaId)
  return areaid_;
}
inline void NodeQuery_Request::set_areaid(::google::protobuf::int32 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:s2s.NodeQuery.Request.AreaId)
}

// string Service = 2;
inline void NodeQuery_Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeQuery_Request::service() const {
  // @@protoc_insertion_point(field_get:s2s.NodeQuery.Request.Service)
  return service_.GetNoArena();
}
inline void NodeQuery_Request::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.NodeQuery.Request.Service)
}
#if LANG_CXX11
inline void NodeQuery_Request::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.NodeQuery.Request.Service)
}
#endif
inline void NodeQuery_Request::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.NodeQuery.Request.Service)
}
inline void NodeQuery_Request::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.NodeQuery.Request.Service)
}
inline ::std::string* NodeQuery_Request::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:s2s.NodeQuery.Request.Service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeQuery_Request::release_service() {
  // @@protoc_insertion_point(field_release:s2s.NodeQuery.Request.Service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeQuery_Request::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:s2s.NodeQuery.Request.Service)
}

// -------------------------------------------------------------------

// NodeQuery_Response

// repeated .s2s.NodeInfo NodeInfos = 1;
inline int NodeQuery_Response::nodeinfos_size() const {
  return nodeinfos_.size();
}
inline void NodeQuery_Response::clear_nodeinfos() {
  nodeinfos_.Clear();
}
inline ::s2s::NodeInfo* NodeQuery_Response::mutable_nodeinfos(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.NodeQuery.Response.NodeInfos)
  return nodeinfos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >*
NodeQuery_Response::mutable_nodeinfos() {
  // @@protoc_insertion_point(field_mutable_list:s2s.NodeQuery.Response.NodeInfos)
  return &nodeinfos_;
}
inline const ::s2s::NodeInfo& NodeQuery_Response::nodeinfos(int index) const {
  // @@protoc_insertion_point(field_get:s2s.NodeQuery.Response.NodeInfos)
  return nodeinfos_.Get(index);
}
inline ::s2s::NodeInfo* NodeQuery_Response::add_nodeinfos() {
  // @@protoc_insertion_point(field_add:s2s.NodeQuery.Response.NodeInfos)
  return nodeinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::s2s::NodeInfo >&
NodeQuery_Response::nodeinfos() const {
  // @@protoc_insertion_point(field_list:s2s.NodeQuery.Response.NodeInfos)
  return nodeinfos_;
}

// -------------------------------------------------------------------

// NodeQuery

// -------------------------------------------------------------------

// MysqlQuery_Request

// .google.protobuf.Any Data = 1;
inline bool MysqlQuery_Request::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& MysqlQuery_Request::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.MysqlQuery.Request.Data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* MysqlQuery_Request::release_data() {
  // @@protoc_insertion_point(field_release:s2s.MysqlQuery.Request.Data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MysqlQuery_Request::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.MysqlQuery.Request.Data)
  return data_;
}
inline void MysqlQuery_Request::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlQuery.Request.Data)
}

// -------------------------------------------------------------------

// MysqlQuery_Response

// string ErrotStr = 1;
inline void MysqlQuery_Response::clear_errotstr() {
  errotstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlQuery_Response::errotstr() const {
  // @@protoc_insertion_point(field_get:s2s.MysqlQuery.Response.ErrotStr)
  return errotstr_.GetNoArena();
}
inline void MysqlQuery_Response::set_errotstr(const ::std::string& value) {
  
  errotstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.MysqlQuery.Response.ErrotStr)
}
#if LANG_CXX11
inline void MysqlQuery_Response::set_errotstr(::std::string&& value) {
  
  errotstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.MysqlQuery.Response.ErrotStr)
}
#endif
inline void MysqlQuery_Response::set_errotstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errotstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.MysqlQuery.Response.ErrotStr)
}
inline void MysqlQuery_Response::set_errotstr(const char* value, size_t size) {
  
  errotstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.MysqlQuery.Response.ErrotStr)
}
inline ::std::string* MysqlQuery_Response::mutable_errotstr() {
  
  // @@protoc_insertion_point(field_mutable:s2s.MysqlQuery.Response.ErrotStr)
  return errotstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlQuery_Response::release_errotstr() {
  // @@protoc_insertion_point(field_release:s2s.MysqlQuery.Response.ErrotStr)
  
  return errotstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlQuery_Response::set_allocated_errotstr(::std::string* errotstr) {
  if (errotstr != nullptr) {
    
  } else {
    
  }
  errotstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errotstr);
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlQuery.Response.ErrotStr)
}

// repeated .google.protobuf.Any QueryDatas = 2;
inline int MysqlQuery_Response::querydatas_size() const {
  return querydatas_.size();
}
inline ::google::protobuf::Any* MysqlQuery_Response::mutable_querydatas(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.MysqlQuery.Response.QueryDatas)
  return querydatas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
MysqlQuery_Response::mutable_querydatas() {
  // @@protoc_insertion_point(field_mutable_list:s2s.MysqlQuery.Response.QueryDatas)
  return &querydatas_;
}
inline const ::google::protobuf::Any& MysqlQuery_Response::querydatas(int index) const {
  // @@protoc_insertion_point(field_get:s2s.MysqlQuery.Response.QueryDatas)
  return querydatas_.Get(index);
}
inline ::google::protobuf::Any* MysqlQuery_Response::add_querydatas() {
  // @@protoc_insertion_point(field_add:s2s.MysqlQuery.Response.QueryDatas)
  return querydatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
MysqlQuery_Response::querydatas() const {
  // @@protoc_insertion_point(field_list:s2s.MysqlQuery.Response.QueryDatas)
  return querydatas_;
}

// -------------------------------------------------------------------

// MysqlQuery

// -------------------------------------------------------------------

// MysqlOper_Request

// .google.protobuf.Any Data = 1;
inline bool MysqlOper_Request::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::google::protobuf::Any& MysqlOper_Request::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:s2s.MysqlOper.Request.Data)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* MysqlOper_Request::release_data() {
  // @@protoc_insertion_point(field_release:s2s.MysqlOper.Request.Data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MysqlOper_Request::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:s2s.MysqlOper.Request.Data)
  return data_;
}
inline void MysqlOper_Request::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlOper.Request.Data)
}

// -------------------------------------------------------------------

// MysqlOper_Response

// string ErrorStr = 1;
inline void MysqlOper_Response::clear_errorstr() {
  errorstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOper_Response::errorstr() const {
  // @@protoc_insertion_point(field_get:s2s.MysqlOper.Response.ErrorStr)
  return errorstr_.GetNoArena();
}
inline void MysqlOper_Response::set_errorstr(const ::std::string& value) {
  
  errorstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.MysqlOper.Response.ErrorStr)
}
#if LANG_CXX11
inline void MysqlOper_Response::set_errorstr(::std::string&& value) {
  
  errorstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.MysqlOper.Response.ErrorStr)
}
#endif
inline void MysqlOper_Response::set_errorstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.MysqlOper.Response.ErrorStr)
}
inline void MysqlOper_Response::set_errorstr(const char* value, size_t size) {
  
  errorstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.MysqlOper.Response.ErrorStr)
}
inline ::std::string* MysqlOper_Response::mutable_errorstr() {
  
  // @@protoc_insertion_point(field_mutable:s2s.MysqlOper.Response.ErrorStr)
  return errorstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOper_Response::release_errorstr() {
  // @@protoc_insertion_point(field_release:s2s.MysqlOper.Response.ErrorStr)
  
  return errorstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOper_Response::set_allocated_errorstr(::std::string* errorstr) {
  if (errorstr != nullptr) {
    
  } else {
    
  }
  errorstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorstr);
  // @@protoc_insertion_point(field_set_allocated:s2s.MysqlOper.Response.ErrorStr)
}

// -------------------------------------------------------------------

// MysqlOper

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2eproto
